/* eslint-disable @typescript-eslint/no-explicit-any */
import { BaseMakeRequestParams, MakeRequestConfig } from './make';

export interface ListScenariosParams extends BaseMakeRequestParams {
  organizationId: number;
}

// Generated by https://quicktype.io

export interface ListScenariosOutput {
  scenarios: Scenario[];
  pg: PG;
}

export interface PG {
  sortBy: string;
  limit: number;
  sortDir: string;
  offset: number;
}

export interface Scenario {
  id: number;
  name: string;
  teamId: number;
  hookId: number;
  deviceId: null;
  deviceScope: null;
  concept: boolean;
  description: string;
  folderId: number | null;
  isinvalid: boolean;
  islinked: boolean;
  islocked: boolean;
  isPaused: boolean;
  usedPackages: string[];
  lastEdit: string;
  scheduling: Scheduling;
  iswaiting: boolean;
  dlqCount: number;
  createdByUser: null;
  updatedByUser: null;
}

export interface Scheduling {
  type: string;
}

export function listScenarios(params: ListScenariosParams): MakeRequestConfig {
  const requestConfig: MakeRequestConfig = {
    method: 'get',
    path: '/scenarios',
    queryStringObject: { ...params },
    // subContentKeys: ['scenarios'],
  };
  return requestConfig;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

export interface GetScenarioBlueprintParams {
  scenarioId: number;
}

// Generated by https://quicktype.io

export interface GetScenarioBlueprintOutput {
  code: string;
  response: Response;
}

export interface Response {
  blueprint: BlueprintType;
  scheduling: Scheduling;
  concept: boolean;
  idSequence: number;
  created: string;
  // eslint-disable-next-line @typescript-eslint/naming-convention
  last_edit: string;
}

export interface BlueprintType {
  flow: Module[];
  name: string;
  metadata: BlueprintTypeMetadata;
}

export interface Module {
  id: number;
  mapper: ModuleMapper;
  module: string;
  onerror?: Onerror[];
  version: number;
  metadata: ModuleMetadata;
  parameters: ModuleParameters;
  routes: BlueprintType[]; // if Router
}

export interface ModuleMapper {
  ca: string;
  qs: any[];
  url: string;
  gzip: boolean;
  method: string;
  headers: any[];
  timeout: string;
  authPass: string;
  authUser: string;
  bodyType: string;
  shareCookies: boolean;
  parseResponse: boolean;
  followRedirect: boolean;
  useQuerystring: boolean;
  rejectUnauthorized: boolean;
}

export interface ModuleMetadata {
  expect: Expect[];
  restore: PurpleRestore;
  designer: PurpleDesigner;
  parameters: Parameter[];
}

export interface PurpleDesigner {
  x: number;
  y: number;
}

export interface Expect {
  name: string;
  type: string;
  label: string;
  required?: boolean;
  validate?: Validate;
  spec?: Parameter[];
  labels?: Labels;
  multiline?: boolean;
}

export interface Labels {
  add: string;
  edit: string;
}

export interface Parameter {
  name: string;
  type: string;
  label: string;
  required?: boolean;
}

export interface Validate {
  enum?: string[];
  max?: number;
  min?: number;
}

export interface PurpleRestore {
  qs: Headers;
  method: Method;
  headers: Headers;
  bodyType: BodyType;
}

export interface BodyType {
  label: string;
}

export interface Headers {
  mode: string;
  items: any[];
}

export interface Method {
  mode: string;
  label: string;
}

export interface Onerror {
  id: number;
  mapper: OnerrorMapper;
  module: string;
  version: number;
  metadata: OnerrorMetadata;
  parameters: OnerrorParameters;
}

export interface OnerrorMapper {
  count: string;
  retry: boolean;
  interval: string;
}

export interface OnerrorMetadata {
  expect: Parameter[];
  restore: FluffyRestore;
  designer: PurpleDesigner;
}

export interface FluffyRestore {
  retry: Retry;
}

export interface Retry {
  mode: string;
}

export interface OnerrorParameters {
  name: string;
  type: string;
  label: string;
  required: boolean;
}

export interface ModuleParameters {
  handleErrors: boolean;
}

export interface BlueprintTypeMetadata {
  version: number;
  designer: FluffyDesigner;
  scenario: Scenario;
}

export interface FluffyDesigner {
  orphans: any[];
}

export interface Scenario {
  dlq: boolean;
  dataloss: boolean;
  maxErrors: number;
  autoCommit: boolean;
  roundtrips: number;
  sequential: boolean;
  confidential: boolean;
  autoCommitTriggerLast: boolean;
}

export function getScenarioBlueprint(params: GetScenarioBlueprintParams): MakeRequestConfig {
  const requestConfig: MakeRequestConfig = {
    method: 'get',
    path: `/scenarios/${params.scenarioId}/blueprint`,
    queryStringObject: {},
    // subContentKeys: ['scenarios'],
  };
  return requestConfig;
}
