import Make from './makeSDK/make';
import credentials from './credentials';
import { GetScenarioBlueprintOutput } from './makeSDK/scenarios';

interface ErrorHandlerParams {
  developer: string;
}

// Generated by https://quicktype.io

export interface BlueprintType {
  flow: Module[];
  name: string;
  metadata: BlueprintTypeMetadata;
}

export interface Module {
  id: number;
  mapper: ModuleMapper;
  module: string;
  onerror?: Onerror[];
  version: number;
  metadata: ModuleMetadata;
  parameters: ModuleParameters;
  routes: BlueprintType[]; // if Router
}

export interface ModuleMapper {
  ca: string;
  qs: any[];
  url: string;
  gzip: boolean;
  method: string;
  headers: any[];
  timeout: string;
  authPass: string;
  authUser: string;
  bodyType: string;
  shareCookies: boolean;
  parseResponse: boolean;
  followRedirect: boolean;
  useQuerystring: boolean;
  rejectUnauthorized: boolean;
}

export interface ModuleMetadata {
  expect: Expect[];
  restore: PurpleRestore;
  designer: PurpleDesigner;
  parameters: Parameter[];
}

export interface PurpleDesigner {
  x: number;
  y: number;
}

export interface Expect {
  name: string;
  type: string;
  label: string;
  required?: boolean;
  validate?: Validate;
  spec?: Parameter[];
  labels?: Labels;
  multiline?: boolean;
}

export interface Labels {
  add: string;
  edit: string;
}

export interface Parameter {
  name: string;
  type: string;
  label: string;
  required?: boolean;
}

export interface Validate {
  enum?: string[];
  max?: number;
  min?: number;
}

export interface PurpleRestore {
  qs: Headers;
  method: Method;
  headers: Headers;
  bodyType: BodyType;
}

export interface BodyType {
  label: string;
}

export interface Headers {
  mode: string;
  items: any[];
}

export interface Method {
  mode: string;
  label: string;
}

export interface Onerror {
  id: number;
  mapper: OnerrorMapper;
  module: string;
  version: number;
  metadata: OnerrorMetadata;
  parameters: OnerrorParameters;
}

export interface OnerrorMapper {
  count: string;
  retry: boolean;
  interval: string;
}

export interface OnerrorMetadata {
  expect: Parameter[];
  restore: FluffyRestore;
  designer: PurpleDesigner;
}

export interface FluffyRestore {
  retry: Retry;
}

export interface Retry {
  mode: string;
}

export interface OnerrorParameters {
  name: string;
  type: string;
  label: string;
  required: boolean;
}

export interface ModuleParameters {
  handleErrors: boolean;
}

export interface BlueprintTypeMetadata {
  version: number;
  designer: FluffyDesigner;
  scenario: Scenario;
}

export interface FluffyDesigner {
  orphans: any[];
}

export interface Scenario {
  dlq: boolean;
  dataloss: boolean;
  maxErrors: number;
  autoCommit: boolean;
  roundtrips: number;
  sequential: boolean;
  confidential: boolean;
  autoCommitTriggerLast: boolean;
}

export class BlueprintEditor {
  blueprint: BlueprintType;
  original: BlueprintType;
  constructor(blueprint?: BlueprintType) {
    if (typeof blueprint !== 'undefined') {
      this.original = blueprint;
      this.blueprint = blueprint;
    }
  }
  async loadFromScenarioId(scenarioId: number, makeInstance: Make) {
    this.original = await makeInstance
      .getScenarioBlueprint({ scenarioId })
      .then((response: GetScenarioBlueprintOutput) => response.response.blueprint);
    this.blueprint = JSON.parse(JSON.stringify(this.original)); // deep copy
  }
  print() {
    console.log(JSON.stringify(this.blueprint, null, 4));
  }

  //   async addErrorHandlers(errorHandlerParams: ErrorHandlerParams, blueprint = this.blueprint) {
  //     // console.log(JSON.stringify(this.blueprint,null,4))
  //     for (let i = 0; i < blueprint.flow.length; i++) {
  //       if (typeof blueprint.flow[i].routes !== 'undefined') {
  //         // this means that there can be more than one child ;-)
  //         for (let routerIndex = 0; routerIndex < blueprint.flow[i].routes.length; routerIndex++) {
  //           // now we call this function again with the subroute of each child
  //           this.addErrorHandlers(errorHandlerParams, blueprint.flow[i].routes[routerIndex]);
  //         }
  //         return;
  //       }
  //       // blueprint.flow[i].onerror == undefined) {
  //       // console.log(blueprint.flow[i].module + " does not have an error handler")
  //       const newId = this.getNewId();
  //       this.ids.push(newId);

  //       const errorHandlerCode = `[
  //                   {
  //                       "id": ${newId},
  //                       "module": "app#errorhandler-dpgcf8:errorhandler",
  //                       "version": 1,
  //                       "parameters": {
  //                           "limit": 2,
  //                           "__IMTCONN__": ${errorHandlerParams.connectionId}
  //                       },
  //                       "mapper": {
  //                           "developer": "${errorHandlerParams.developer}",
  //                           "errorCode": "${errorHandlerParams.errorCode ?? 400}",
  //                           "module_name": "${blueprint.flow[i].id}:${blueprint.flow[i].module}",
  //                           "scenario_name": "${this.flow.name}",
  //                           "scenario_number": "${this.scenarioId}",
  //                           "level": ${errorHandlerParams.level ?? 1},
  //                           "message": "Error in Scenario ${this.scenarioId} and module ${blueprint.flow[i].id}:${blueprint.flow[i].module}."
  //                       },
  //                       "metadata": {
  //                           "designer": {
  //                               "x": ${blueprint.flow[i].metadata.designer.x + 120},
  //                               "y": ${blueprint.flow[i].metadata.designer.y + 120}
  //                           },
  //                           "restore": {
  //                               "level": {
  //                                   "mode": "chose",
  //                                   "label": ""
  //                               },
  //                               "__IMTCONN__": {
  //                                   "label": "My {} connection"
  //                               }
  //                           },
  //                           "parameters": [
  //                               {
  //                                   "name": "__IMTCONN__",
  //                                   "type": "account",
  //                                   "label": "Connection",
  //                                   "required": true
  //                               },
  //                               {
  //                                   "name": "limit",
  //                                   "type": "uinteger",
  //                                   "label": "Limit",
  //                                   "required": true
  //                               }
  //                           ],
  //                           "expect": [
  //                               {
  //                                   "name": "scenario_name",
  //                                   "type": "text",
  //                                   "label": "Scenario Name",
  //                                   "required": true
  //                               },
  //                               {
  //                                   "name": "scenario_number",
  //                                   "type": "text",
  //                                   "label": "Scenario Number",
  //                                   "required": true
  //                               },
  //                               {
  //                                   "name": "module_name",
  //                                   "type": "text",
  //                                   "label": "Module Name",
  //                                   "required": true
  //                               },
  //                               {
  //                                   "name": "developer",
  //                                   "type": "text",
  //                                   "label": "Developer",
  //                                   "required": true
  //                               },
  //                               {
  //                                   "name": "errorCode",
  //                                   "type": "number",
  //                                   "label": "Error Code"
  //                               },
  //                               {
  //                                   "name": "message",
  //                                   "type": "text",
  //                                   "label": "Error Message"
  //                               },
  //                               {
  //                                   "name": "level",
  //                                   "type": "select",
  //                                   "label": "Error Level",
  //                                   "validate": {
  //                                       "enum": [
  //                                           1,
  //                                           2,
  //                                           3,
  //                                           4
  //                                       ]
  //                                   }
  //                               }
  //                           ]
  //                       }
  //                   }
  //               ]
  //                 `;
  //       // console.log(errorHandlerCode)
  //       blueprint.flow[i].onerror = JSON.parse(errorHandlerCode);
  //     }
  //   }
}

if (typeof require !== 'undefined' && require.main === module) {
  (async () => {
    const make = new Make({
      apiKey: credentials.make,
      host: 'eu1.make.com',
      organizationId: 181,
    });

    const blueprint = new BlueprintEditor();
    await blueprint.loadFromScenarioId(2802, make);
    blueprint.print();
  })();
}
