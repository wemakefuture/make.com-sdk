{
  "openapi": "3.0.0",
  "info": { "title": "Web API v2 - Public ", "description": "Documentation of the public web API.", "version": "1.0.0" },
  "servers": [
    { "url": "https://localhost:{port}", "description": "Localhost server", "variables": { "port": { "default": "3017" } } },
    {
      "url": "https://master.integromat.cloud/{basePath}",
      "description": "Development server",
      "variables": { "basePath": { "default": "api/v2" } }
    }
  ],
  "components": {
    "securitySchemes": {
      "cookie": { "type": "apiKey", "in": "cookie", "name": "sid" },
      "token": { "type": "apiKey", "name": "Authorization", "in": "header" }
    },
    "schemas": {
      "Team": {
        "type": "object",
        "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "organizationId": { "type": "integer" } }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "language": { "type": "string" },
          "timezoneId": { "type": "integer" },
          "localeId": { "type": "integer" },
          "countryId": { "type": "integer" },
          "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
          "avatar": { "type": "string", "format": "uri" },
          "timezone": { "type": "string" },
          "locale": { "type": "string" },
          "emailNotifications": { "type": "null" },
          "usersAdminsRoleId": { "type": "integer" },
          "hasPassword": { "type": "boolean" },
          "tfaEnabled": { "type": "boolean" },
          "forceSetPassword": { "type": "boolean" },
          "userOrganizationRoles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "usersRoleId": { "type": "integer" },
                "userId": { "type": "integer" },
                "organizationId": { "type": "integer" },
                "invitation": { "type": "null" }
              }
            }
          },
          "userTeamRoles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "usersRoleId": { "type": "integer" },
                "userId": { "type": "integer" },
                "teamId": { "type": "integer" },
                "changeable": { "type": "boolean" }
              }
            }
          }
        }
      },
      "UserPublic": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "language": { "type": "string" },
          "timezoneId": { "type": "integer" },
          "localeId": { "type": "integer" },
          "countryId": { "type": "integer" },
          "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
          "avatar": { "type": "string", "format": "uri" }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "language": { "type": "string" },
          "timezoneId": { "type": "integer" },
          "localeId": { "type": "integer" },
          "countryId": { "type": "integer" },
          "usersAdminsRoleId": { "type": "integer" }
        }
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "subsidiary": { "type": "boolean" },
          "category": { "type": "string" },
          "permissions": { "type": "array", "items": { "type": "string" } }
        }
      },
      "UserTeamRole": {
        "type": "object",
        "properties": {
          "usersRoleId": { "type": "integer" },
          "userId": { "type": "integer" },
          "teamId": { "type": "integer" },
          "changeable": { "type": "boolean" }
        }
      },
      "Pg": {
        "type": "object",
        "properties": {
          "sortBy": { "type": "string" },
          "sortDir": { "type": "string" },
          "limit": { "type": "integer" },
          "offset": { "type": "integer" }
        }
      },
      "UserOrganizationInvitations": {
        "type": "object",
        "properties": {
          "hash": { "type": "string" },
          "invitation": { "type": "string" },
          "usersRoleId": { "type": "integer" },
          "organizationId": { "type": "integer" },
          "organizationName": { "type": "string" },
          "zone": { "type": "string" }
        }
      },
      "UserOrganizationRole": {
        "type": "object",
        "properties": {
          "userId": { "type": "integer" },
          "organizationId": { "type": "integer" },
          "usersRoleId": { "type": "integer" },
          "invitation": { "type": "string" }
        }
      },
      "UserOrganizationRoleAll": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "userId": { "type": "integer" },
              "organizationId": { "type": "integer" },
              "usersRoleId": { "type": "integer" },
              "invitation": { "type": "string" }
            }
          },
          { "type": "object", "properties": { "organizationTeamsCount": { "type": "integer" }, "joinedTeamsCount": { "type": "integer" } } }
        ]
      },
      "UserTeamNotification": {
        "type": "object",
        "properties": {
          "userId": { "type": "integer" },
          "teamId": { "type": "integer" },
          "notificationId": { "type": "integer" },
          "enabled": { "type": "boolean" }
        }
      },
      "ApiToken": {
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "scope": { "type": "array", "items": { "type": "string", "format": "uri" } },
          "created": { "type": "string", "format": "date-time" },
          "label": { "type": "string" }
        }
      },
      "EmailPreferences": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "uuid": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "is_email_verified": { "type": "boolean" },
          "global": {
            "type": "object",
            "properties": {
              "isEmailVerified": { "type": "boolean" },
              "preferences": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "enabled": { "type": "boolean" },
                    "label": { "type": "string" },
                    "description": { "type": "string" }
                  }
                }
              }
            }
          },
          "zones": { "type": "array" }
        }
      },
      "DataStore": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint."
          },
          "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
          "records": { "type": "integer", "description": "The number of rows containing data in the data store." },
          "size": { "type": "string", "description": "The size that the data store occupies (defined in bytes)." },
          "maxSize": { "type": "string", "description": "The maximum size of the data store (defined in bytes)." },
          "teamId": { "type": "integer", "description": "The unique numeric ID of the team whose data stores will be retrieved." },
          "datastructureId": { "type": "integer", "description": "The unique numeric ID of the data structure related to the data store." }
        }
      },
      "DataStructure": {
        "Whole": {
          "type": "object",
          "properties": {
            "id": { "type": "integer" },
            "teamId": { "type": "integer" },
            "name": { "type": "string", "minLength": 1, "maxLength": 128 },
            "strict": { "type": "boolean" },
            "spec": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Boolean property",
                    "properties": {
                      "type": { "type": "string", "enum": ["boolean"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "String property",
                    "properties": {
                      "type": { "type": "string", "enum": ["text"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "string" },
                      "multiline": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Number property",
                    "properties": {
                      "type": { "type": "string", "enum": ["number"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "number" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Date property",
                    "properties": {
                      "type": { "type": "string", "enum": ["date"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Binary data property",
                    "properties": {
                      "type": { "type": "string", "enum": ["buffer"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Collection property",
                    "properties": {
                      "type": { "type": "string", "enum": ["collection"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Array property",
                    "properties": {
                      "type": { "type": "string", "enum": ["array"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "object", "description": "DataStructureSpec object" },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  }
                ]
              }
            }
          },
          "required": ["id", "teamId", "name", "strict", "spec"]
        },
        "Create": {
          "type": "object",
          "properties": {
            "teamId": { "type": "integer", "description": "The unique numeric ID of the team in which a data structure will be created." },
            "name": {
              "type": "string",
              "description": "The data structure name. The name does not need to be unique.",
              "minLength": 1,
              "maxLength": 128
            },
            "strict": {
              "type": "boolean",
              "description": "Refers to the \"Strict\" option available for data structures in the Integromat platform interface. If set to **true**, the data structure will be compared to the structure of the payload and if the payload contains extra items not specified in the data structure, the payload will be rejected."
            },
            "spec": {
              "type": "array",
              "description": "Defines the data structure specifications including all related options. The specification structure depends on the chosen data types.",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Boolean property",
                    "properties": {
                      "type": { "type": "string", "enum": ["boolean"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "String property",
                    "properties": {
                      "type": { "type": "string", "enum": ["text"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "string" },
                      "multiline": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Number property",
                    "properties": {
                      "type": { "type": "string", "enum": ["number"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "number" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Date property",
                    "properties": {
                      "type": { "type": "string", "enum": ["date"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Binary data property",
                    "properties": {
                      "type": { "type": "string", "enum": ["buffer"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Collection property",
                    "properties": {
                      "type": { "type": "string", "enum": ["collection"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Array property",
                    "properties": {
                      "type": { "type": "string", "enum": ["array"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "object", "description": "DataStructureSpec object" },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  }
                ]
              }
            }
          },
          "required": ["teamId", "name", "strict", "spec"]
        },
        "Patch": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The unique numeric ID of the team in which a data structure will be created.",
              "minLength": 1,
              "maxLength": 128
            },
            "strict": {
              "type": "boolean",
              "description": "Refers to the \"Strict\" option available for data structures in the Integromat user interface. If set to **true**, the data structure will be compared to the structure of the payload and if the payload contains extra items not specified in the data structure, the payload will be rejected."
            },
            "spec": {
              "type": "array",
              "description": "Defines the data structure specifications including all related options. The specification structure depends on the chosen data types. All properties correspond to the options visible in the Integromat interface.",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Boolean property",
                    "properties": {
                      "type": { "type": "string", "enum": ["boolean"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "String property",
                    "properties": {
                      "type": { "type": "string", "enum": ["text"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "string" },
                      "multiline": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Number property",
                    "properties": {
                      "type": { "type": "string", "enum": ["number"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "default": { "type": "number" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Date property",
                    "properties": {
                      "type": { "type": "string", "enum": ["date"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Binary data property",
                    "properties": {
                      "type": { "type": "string", "enum": ["buffer"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "required": { "type": "boolean" },
                      "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Collection property",
                    "properties": {
                      "type": { "type": "string", "enum": ["collection"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  },
                  {
                    "type": "object",
                    "description": "Array property",
                    "properties": {
                      "type": { "type": "string", "enum": ["array"] },
                      "name": { "type": "string" },
                      "label": { "type": "string" },
                      "spec": { "type": "object", "description": "DataStructureSpec object" },
                      "sequence": { "type": "boolean" }
                    },
                    "required": ["name", "type"]
                  }
                ]
              }
            }
          }
        }
      },
      "DataStructureSpec": {
        "oneOf": [
          {
            "type": "object",
            "description": "Boolean property",
            "properties": {
              "type": { "type": "string", "enum": ["boolean"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "required": { "type": "boolean" },
              "default": { "type": "boolean" }
            },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "String property",
            "properties": {
              "type": { "type": "string", "enum": ["text"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "required": { "type": "boolean" },
              "default": { "type": "string" },
              "multiline": { "type": "boolean" }
            },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "Number property",
            "properties": {
              "type": { "type": "string", "enum": ["number"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "required": { "type": "boolean" },
              "default": { "type": "number" }
            },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "Date property",
            "properties": { "type": { "type": "string", "enum": ["date"] }, "name": { "type": "string" }, "label": { "type": "string" } },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "Binary data property",
            "properties": {
              "type": { "type": "string", "enum": ["buffer"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "required": { "type": "boolean" },
              "codepage": { "type": "string", "enum": ["binary", "utf8"] }
            },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "Collection property",
            "properties": {
              "type": { "type": "string", "enum": ["collection"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
              "sequence": { "type": "boolean" }
            },
            "required": ["name", "type"]
          },
          {
            "type": "object",
            "description": "Array property",
            "properties": {
              "type": { "type": "string", "enum": ["array"] },
              "name": { "type": "string" },
              "label": { "type": "string" },
              "spec": { "type": "object", "description": "DataStructureSpec object" },
              "sequence": { "type": "boolean" }
            },
            "required": ["name", "type"]
          }
        ]
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "teamId": { "type": "integer" },
          "udid": { "type": "string" },
          "scope": { "type": "array", "items": { "type": "string" } },
          "info": { "type": "object" },
          "queueCount": { "type": "integer" },
          "queueLimit": { "type": "integer" },
          "scenarioId": { "type": "integer" }
        }
      },
      "DeviceEventIncoming": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "scope": { "type": "string" },
          "size": { "type": "integer" },
          "created": { "type": "string", "format": "date-time" }
        }
      },
      "DeviceEventOutgoing": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "scope": { "type": "string" },
          "size": { "type": "integer" },
          "created": { "type": "string", "format": "date-time" }
        }
      },
      "Dlq": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "reason": { "type": "string" },
          "created": { "type": "string", "format": "date-time" },
          "size": { "type": "integer" },
          "resolved": { "type": "boolean" },
          "retry": { "type": "boolean" },
          "attempts": { "type": "integer" }
        }
      },
      "DlqFull": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "scenarioId": { "type": "integer" },
          "scenarioName": { "type": "string" },
          "companyId": { "type": "integer" },
          "companyName": { "type": "string" },
          "resolved": { "type": "boolean" },
          "deleted": { "type": "boolean" },
          "index": { "type": "integer" },
          "created": { "type": "string", "format": "date-time" },
          "executionId": { "type": "string" },
          "retry": { "type": "boolean" },
          "attempts": { "type": "integer" },
          "size": { "type": "integer" }
        }
      },
      "DlqLog": {
        "type": "object",
        "properties": {
          "imtId": { "type": "string" },
          "duration": { "type": "integer" },
          "transfer": { "type": "integer" },
          "operations": { "type": "integer" },
          "teamId": { "type": "integer" },
          "id": { "type": "string" },
          "type": { "type": "string" },
          "authorId": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "status": { "type": "integer" },
          "instant": { "type": "boolean" },
          "organizationId": { "type": "integer" }
        }
      },
      "Blueprint": {
        "type": "object",
        "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
        "properties": {
          "flow": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "integer" },
                "mapper": {
                  "type": "object",
                  "properties": {
                    "ca": { "type": "string" },
                    "qs": { "type": "array" },
                    "url": { "type": "string", "format": "uri" },
                    "gzip": { "type": "boolean" },
                    "method": { "type": "string" },
                    "headers": { "type": "array" },
                    "timeout": { "type": "string" },
                    "authPass": { "type": "string" },
                    "authUser": { "type": "string" },
                    "bodyType": { "type": "string" },
                    "shareCookies": { "type": "boolean" },
                    "parseResponse": { "type": "boolean" },
                    "followRedirect": { "type": "boolean" },
                    "useQuerystring": { "type": "boolean" },
                    "rejectUnauthorized": { "type": "boolean" }
                  }
                },
                "module": { "type": "string", "format": "uri" },
                "onerror": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "mapper": {
                        "type": "object",
                        "properties": {
                          "count": { "type": "string", "format": "utc-millisec" },
                          "retry": { "type": "boolean" },
                          "interval": { "type": "string", "format": "utc-millisec" }
                        }
                      },
                      "module": { "type": "string", "format": "uri" },
                      "version": { "type": "integer" },
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "expect": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "type": { "type": "string" },
                                "label": { "type": "string" },
                                "required": { "type": "boolean" }
                              }
                            }
                          },
                          "restore": {
                            "type": "object",
                            "properties": { "retry": { "type": "object", "properties": { "mode": { "type": "string" } } } }
                          },
                          "designer": { "type": "object", "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } } }
                        }
                      },
                      "parameters": { "type": "object" }
                    }
                  }
                },
                "version": { "type": "integer" },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "expect": { "type": "array", "items": { "type": "object" } },
                    "restore": {
                      "type": "object",
                      "properties": {
                        "qs": { "type": "object", "properties": { "mode": { "type": "string" }, "items": { "type": "array" } } },
                        "method": { "type": "object", "properties": { "mode": { "type": "string" }, "label": { "type": "string" } } },
                        "headers": { "type": "object", "properties": { "mode": { "type": "string" }, "items": { "type": "array" } } },
                        "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                      }
                    },
                    "designer": { "type": "object", "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } } },
                    "parameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "type": { "type": "string" },
                          "label": { "type": "string" },
                          "required": { "type": "boolean" }
                        }
                      }
                    }
                  }
                },
                "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
              }
            }
          },
          "name": { "type": "string" },
          "metadata": {
            "type": "object",
            "properties": {
              "version": { "type": "integer" },
              "scenario": {
                "type": "object",
                "properties": {
                  "maxErrors": { "type": "integer" },
                  "autoCommit": { "type": "boolean" },
                  "roundtrips": { "type": "integer" }
                }
              }
            }
          }
        }
      },
      "Hook": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "teamId": { "type": "integer" },
          "udid": { "type": "string" },
          "type": { "type": "string" },
          "packageName": { "type": "string" },
          "theme": { "type": "string", "format": "color" },
          "flags": { "type": "object", "properties": { "form": { "type": "boolean", "required": false } } },
          "editable": { "type": "boolean" },
          "queueCount": { "type": "integer" },
          "queueLimit": { "type": "integer" },
          "enabled": { "type": "boolean" },
          "gone": { "type": "boolean" },
          "typeName": { "type": "string" },
          "data": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "headers": { "type": "boolean", "required": false },
              "method": { "type": "boolean", "required": false },
              "stringify": { "type": "boolean", "required": false },
              "teamId": { "type": "integer", "required": false },
              "ip": { "type": "string", "format": "ipv6", "required": false },
              "udt": { "type": "string", "required": false }
            }
          },
          "scenarioId": { "type": "integer" },
          "url": { "type": "string", "format": "uri" }
        }
      },
      "HookEventIncoming": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "scope": { "type": "string" },
          "size": { "type": "integer" },
          "created": { "type": "string", "format": "date-time" },
          "data": { "type": "object" }
        }
      },
      "Key": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "typeName": { "type": "string" },
          "teamId": { "type": "integer" },
          "packageName": { "type": "string" },
          "theme": { "type": "string", "format": "color" }
        }
      },
      "KeyType": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "label": { "type": "string" },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
            }
          },
          "componentType": { "type": "string" },
          "author": { "type": "string" },
          "version": { "type": "string" },
          "theme": { "type": "string", "format": "color" },
          "icon": { "type": "string" }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "serviceName": { "type": "string" },
          "nextReset": { "type": "string", "format": "timestamp" },
          "operations": { "type": "string" },
          "transfer": { "type": "string" },
          "operationsExt": { "type": "string" },
          "transferExt": { "type": "string" },
          "isPaused": { "type": "boolean" },
          "countryId": { "type": "integer" },
          "timezoneId": { "type": "integer" },
          "deleted": { "type": "boolean" },
          "license": {
            "type": "object",
            "properties": {
              "apps": { "type": "array", "items": { "type": "string" } },
              "users": { "type": "integer" },
              "dslimit": { "type": "integer" },
              "fslimit": { "type": "integer" },
              "iolimit": { "type": "integer" },
              "dsslimit": { "type": "integer" },
              "fulltext": { "type": "boolean" },
              "interval": { "type": "integer" },
              "transfer": { "type": "integer" },
              "operations": { "type": "integer" }
            }
          },
          "features": { "type": "object" },
          "zone": { "type": "string" },
          "teams": {
            "type": "array",
            "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "subject": { "type": "string" },
          "read": { "type": "string", "format": "date-time" },
          "created": { "type": "string", "format": "date-time" },
          "type": { "type": "integer" }
        }
      },
      "NotificationAll": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "subject": { "type": "string" },
              "read": { "type": "string", "format": "date-time" },
              "created": { "type": "string", "format": "date-time" },
              "type": { "type": "integer" }
            }
          },
          { "type": "object", "properties": { "body": { "type": "string" } } }
        ]
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "accountName": { "type": "string" },
          "accountLabel": { "type": "string" },
          "packageName": { "type": "string" },
          "expire": { "type": "string", "format": "date-time" },
          "metadata": {
            "type": "object",
            "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
          },
          "teamId": { "type": "integer" },
          "theme": { "type": "string", "format": "color" },
          "upgradeable": { "type": "boolean" },
          "scopesCnt": { "type": "integer" },
          "scoped": { "type": "boolean" },
          "accountType": { "type": "string" },
          "editable": { "type": "boolean" },
          "uid": { "type": "string" }
        }
      },
      "ConnectionAll": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "name": { "type": "string" },
              "accountName": { "type": "string" },
              "accountLabel": { "type": "string" },
              "packageName": { "type": "string" },
              "expire": { "type": "string", "format": "date-time" },
              "metadata": {
                "type": "object",
                "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
              },
              "teamId": { "type": "integer" },
              "theme": { "type": "string", "format": "color" },
              "upgradeable": { "type": "boolean" },
              "scopesCnt": { "type": "integer" },
              "scoped": { "type": "boolean" },
              "accountType": { "type": "string" },
              "editable": { "type": "boolean" },
              "uid": { "type": "string" }
            }
          },
          {
            "type": "object",
            "properties": {
              "scopes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "account": { "type": "string" } }
                }
              }
            }
          }
        ]
      },
      "Scenario": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "teamId": { "type": "integer" },
          "hookId": { "type": "integer" },
          "deviceId": { "type": "integer" },
          "deviceScope": { "type": "string" },
          "concept": { "type": "boolean" },
          "description": { "type": "string" },
          "folderId": { "type": "integer" },
          "isinvalid": { "type": "boolean" },
          "islinked": { "type": "boolean" },
          "islocked": { "type": "boolean" },
          "isPaused": { "type": "boolean" },
          "usedPackages": { "type": "array", "items": { "type": "string" } },
          "lastEdit": { "type": "string", "format": "date-time" },
          "scheduling": { "type": "object", "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } } },
          "iswaiting": { "type": "boolean" },
          "dlqCount": { "type": "integer" }
        }
      },
      "ScenarioTrigger": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "udid": { "type": "string" },
          "scope": { "type": "string" },
          "queueCount": { "type": "integer" },
          "queueLimit": { "type": "integer" },
          "typeName": { "type": "string" },
          "type": { "type": "string" },
          "url": { "type": "string", "format": "uri" }
        }
      },
      "ScenarioLog": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "imtId": { "type": "string" },
          "type": { "type": "string" },
          "authorId": { "type": "integer" },
          "duration": { "type": "integer" },
          "operations": { "type": "integer" },
          "transfer": { "type": "integer" },
          "teamId": { "type": "integer" },
          "instant": { "type": "boolean" },
          "timestamp": { "type": "string", "format": "date-time" },
          "status": { "type": "integer" },
          "organizationId": { "type": "integer" },
          "@kindId": { "type": "integer" }
        }
      },
      "ScenarioFolder": {
        "type": "object",
        "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "scenariosTotal": { "type": "integer" } }
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "teamId": { "type": "integer" },
          "teamName": { "type": "string" },
          "organizationId": { "type": "string" },
          "description": { "type": "string" },
          "usedApps": { "type": "array", "items": { "type": "string" } },
          "public": { "type": "boolean" },
          "published": { "type": "string", "format": "date-time" },
          "approved": { "type": "string", "format": "date-time" },
          "approvedId": { "type": "integer" },
          "requestedApproval": { "type": "boolean" },
          "publishedId": { "type": "integer" },
          "publicUrl": { "type": "string" },
          "approvedName": { "type": "string" },
          "publishedName": { "type": "string" }
        }
      },
      "TemplatePublic": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "url": { "type": "string" },
          "usedApps": { "type": "array", "items": { "type": "string" } },
          "usage": { "type": "integer" }
        }
      },
      "SdkApp": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "label": { "type": "string" },
          "version": { "type": "integer" },
          "beta": { "type": "boolean" }
        }
      },
      "SdkAppDetail": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "label": { "type": "string" },
          "description": { "type": "string" },
          "version": { "type": "integer" },
          "beta": { "type": "boolean" },
          "theme": { "type": "string", "format": "color" },
          "language": { "type": "string" },
          "public": { "type": "boolean" },
          "approved": { "type": "boolean" },
          "global": { "type": "boolean" },
          "countries": { "type": "null" },
          "created": { "type": "string", "format": "date-time" },
          "manifestVersion": { "type": "integer" }
        }
      },
      "SdkAppReview": {
        "type": "object",
        "properties": {
          "contactName": { "type": "string" },
          "contactEmail": { "type": "string", "format": "email" },
          "reviewerName": { "type": "string" },
          "reviewerEmail": { "type": "string", "format": "email" },
          "codeStatus": { "type": "string" },
          "testStatus": { "type": "string" },
          "docsStatus": { "type": "string" }
        }
      },
      "SdkAppReviewForm": {
        "type": "object",
        "properties": {
          "config": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "label": { "type": "string" },
                "type": { "type": "string" },
                "required": { "type": "boolean" },
                "spec": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                  }
                }
              }
            }
          },
          "values": { "type": "object", "properties": { "testingScenarios": { "type": "object" } } }
        }
      },
      "Scheduling": {
        "type": "object",
        "description": "The scheduling details.",
        "properties": {
          "type": { "type": "string", "enum": ["immediately", "indefinitely", "once", "daily", "weekly", "monthly", "yearly"] },
          "interval": { "type": "integer", "minimum": 0 },
          "date": { "type": "string", "format": "date-time" },
          "between": { "type": "array", "items": { "type": "string", "format": "date-time" } },
          "time": { "type": "string", "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$" },
          "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
          "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } },
          "restrict": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "time": {
                  "type": "array",
                  "items": { "type": "string", "nullable": true, "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$" }
                },
                "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } }
              }
            }
          }
        }
      },
      "Controller": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "maxLenght": 120, "minLength": 1 },
          "description": { "type": "string", "maxLength": 240, "minLength": 0 },
          "idSequence": { "type": "integer" },
          "modules": { "type": "object" }
        }
      }
    },
    "parameters": {
      "PgSortBy": {
        "name": "pg[sortBy]",
        "in": "query",
        "schema": { "type": "string" },
        "description": "The value that will be used to sort returned entities by."
      },
      "PgSortById": {
        "name": "pg[sortBy]",
        "in": "query",
        "schema": { "type": "string", "enum": ["id"] },
        "description": "The value that will be used to sort returned entities by."
      },
      "PgSortByName": {
        "name": "pg[sortBy]",
        "in": "query",
        "schema": { "type": "string", "enum": ["name"] },
        "description": "The value that will be used to sort returned entities by."
      },
      "PgOffset": {
        "name": "pg[offset]",
        "in": "query",
        "schema": { "type": "integer" },
        "description": "The numeric value of entities you want to skip before getting entities you need.",
        "example": 10
      },
      "PgSortDir": {
        "name": "pg[sortDir]",
        "in": "query",
        "schema": { "type": "string", "enum": ["asc", "desc"] },
        "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
        "example": "asc"
      },
      "PgLimit": {
        "name": "pg[limit]",
        "in": "query",
        "schema": { "type": "integer" },
        "description": "The numeric value of maximum entities to return.",
        "example": 10000
      },
      "TemplateId": {
        "name": "templateId",
        "in": "path",
        "schema": { "type": "integer" },
        "required": true,
        "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
        "example": 164
      },
      "TemplateUrl": {
        "name": "templateUrl",
        "in": "path",
        "schema": { "type": "string" },
        "required": true,
        "description": "The unique URL of the public (approved) template consisting of the template ID and name. It can be retrieved from the `/templates/public` endpoint.",
        "example": "16-multiple-apps-template-example"
      },
      "TemplatePublicId": {
        "name": "templatePublicId",
        "in": "query",
        "schema": { "type": "integer" },
        "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
        "example": 18
      },
      "TemplateUsedApps": {
        "name": "usedApps[]",
        "in": "query",
        "schema": { "type": "array", "items": { "type": "string" } },
        "example": ["postgres"],
        "description": "The array with the text IDs of the apps used in the templates. This parameter allows you to get only the templates containing specific apps."
      },
      "ConnectionId": {
        "name": "connectionId",
        "in": "path",
        "schema": { "type": "integer" },
        "required": true,
        "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
        "example": 1
      },
      "HookId": {
        "name": "hookId",
        "in": "path",
        "schema": { "type": "integer" },
        "required": true,
        "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
        "example": 654
      },
      "ImtZoneId": {
        "name": "imtZoneId",
        "in": "query",
        "schema": { "type": "integer" },
        "description": "The unique numeric ID of the Integromat zone. This parameter is required to retrieve notifications from the Integromat Next version. In other cases, it can be ignored. The IDs of the zones can be obtained from the `/enum/imt-zones` endpoint.",
        "example": 2
      }
    }
  },
  "security": [{ "cookie": [] }, { "token": ["organization:read"] }],
  "tags": [
    { "name": "Auth" },
    { "name": "Agents" },
    {
      "name": "Connections",
      "description": "For most apps, it is necessary to create a connection, through which Integromat will communicate with the given third-party service according to the settings of a specific scenario. The following endpoints allow you to create and manage connections."
    },
    { "name": "Data Stores" },
    { "name": "Data Stores > Data" },
    {
      "name": "Data Structures",
      "description": "Data structures define the format of the data being transferred to the Integromat platform. For instance, they are widely used by the Data stores component. The following endpoints allow you to create and manage data structures."
    },
    { "name": "Devices" },
    { "name": "Devices > Incomings" },
    { "name": "Devices > Outgoing" },
    { "name": "Incomplete executions" },
    { "name": "Enums" },
    {
      "name": "Hooks",
      "description": "Hooks refers to the webhooks and mailhooks available in the various apps in the Integromat interface. They notify you whenever a certain change occurs in the connected app or service, such as sending an HTTP request or an email. The following endpoints allow you to create and manage hooks."
    },
    { "name": "Hooks > Incomings" },
    { "name": "Keys" },
    {
      "name": "Notifications",
      "description": "The Notifications feature keeps you informed about problems in your scenarios and keep you up to date when it comes to the new features and improvements in Integromat. The following endpoints allow you to manage the notifications."
    },
    { "name": "Oauth", "description": "experimental" },
    { "name": "Organizations" },
    { "name": "Organizations > User organization roles" },
    { "name": "Remote procedures" },
    { "name": "Scenarios" },
    { "name": "Scenarios > Logs" },
    { "name": "Scenarios > Blueprints" },
    { "name": "Scenarios > Consumptions" },
    { "name": "Scenarios Folders" },
    { "name": "SDK Apps" },
    { "name": "SDK Apps > Invites" },
    { "name": "SDK Apps > Modules" },
    { "name": "SDK Apps > RPCs" },
    { "name": "SDK Apps > Functions" },
    { "name": "SDK Apps > Connections" },
    { "name": "SDK Apps > Webhooks" },
    { "name": "Teams" },
    { "name": "Teams > User team roles" },
    {
      "name": "Templates",
      "description": "The Templates feature allows you to create and use templates as a starting point for your Integromat scenarios. By default, Integromat offers hundreds of templates containing the scenarios of most-used apps. The following endpoints allow you to create and manage templates."
    },
    { "name": "Hooks > Incomings" },
    {
      "name": "Templates > Public",
      "description": "The following endpoints focus on the public (approved) templates that are available to every user regardless of the organization and team."
    },
    { "name": "Users" },
    { "name": "Users > Me" },
    { "name": "Users > Me > API Tokens" },
    { "name": "Users > User team roles" },
    { "name": "Users > User team notifications" },
    { "name": "Users > User organization roles" },
    { "name": "Users > Roles" },
    { "name": "Users > Unread notifications" },
    { "name": "Users > User email preferences - Mailhub" }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log in",
        "description": "Logs a user in by passing the user's email and password in the request body. It does not work with an API token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string", "format": "email" }, "password": { "type": "string", "format": "password" } },
                "required": ["email", "password"]
              },
              "example": { "email": "test@integromat.cloud", "password": "test" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "userId": { "type": "integer" } } },
                "example": { "userId": 1 }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out",
        "description": "Logs the currently logged-in user out. It does not work with an API token.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } }, "example": { "ok": 1 } }
            }
          }
        }
      }
    },
    "/sso/authorize": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authorize URL",
        "description": "experimental",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "redirect": { "type": "string" } }, "required": ["redirect"] },
              "example": { "redirect": "/" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "authorizeUrl": { "type": "string", "format": "uri" } } },
                "example": {
                  "authorizeUrl": "https://sso.example.com/authorize?response_type=code&client_id=mock.integromat.cloud&redirect_uri=https%3A%2F%2Fmock.integromat.cloud%2Fsso%2Foauth&state=c72e0f91265beae1cf7f&scope=mock.connect"
                }
              }
            }
          }
        }
      }
    },
    "/sso/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "OAuth login",
        "description": "experimental",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "code": { "type": "string" }, "state": { "type": "string" } },
                "required": ["code", "state"]
              },
              "example": { "code": "966d7b84db750a3a297341fff8e33f07cb47b420", "state": "c72e0f91265beae1cf7f" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "redirect": { "type": "string" } } },
                "example": { "redirect": "/" }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "get": {
        "tags": ["Agents"],
        "summary": "List Agents",
        "description": "Retrieve a list of available agents for the given team.",
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "required": true, "example": 1 },
          { "name": "service", "in": "query", "schema": { "type": "string" }, "example": "bond" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "agents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": { "id": { "type": "string", "format": "uuid" }, "name": { "type": "string" } }
                      }
                    }
                  },
                  "examples": { "default": { "agents": [{ "id": "560bdca3-5b2d-4d22-9095-6539e535d007", "name": "James Bond" }] } }
                }
              }
            }
          }
        },
        "security": [{ "token": ["connections:read"] }]
      }
    },
    "/connections": {
      "get": {
        "tags": ["Connections"],
        "summary": "List connections",
        "description": "Retrieves a collection of all connections for a team with a given ID. Returned connections are sorted by the name, with the most recently created connections appearing first.",
        "security": [{ "token": ["connections:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the team whose connections will be retrieved.",
            "example": 1
          },
          {
            "name": "type[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } },
            "description": "This parameter allows you to specify the type of the connections to return details for. The connection type is defined in the `accountName` property and you can get it from the `\\connections\\{connectionId}` endpoint.",
            "example": "openweathermap"
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "accountName",
                  "accountLabel",
                  "packageName",
                  "expire",
                  "metadata",
                  "teamId",
                  "theme",
                  "upgradeable",
                  "scopesCnt",
                  "scoped",
                  "accountType",
                  "editable",
                  "uid"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to check if all retrieved connections are upgradeable.",
            "examples": {
              "default": {
                "value": [
                  "id",
                  "name",
                  "accountName",
                  "accountLabel",
                  "packageName",
                  "expire",
                  "metadata",
                  "teamId",
                  "theme",
                  "upgradeable",
                  "scopesCnt",
                  "scoped",
                  "accountType",
                  "editable",
                  "uid"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connections": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "accountName": { "type": "string" },
                          "accountLabel": { "type": "string" },
                          "packageName": { "type": "string" },
                          "expire": { "type": "string", "format": "date-time" },
                          "metadata": {
                            "type": "object",
                            "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
                          },
                          "teamId": { "type": "integer" },
                          "theme": { "type": "string", "format": "color" },
                          "upgradeable": { "type": "boolean" },
                          "scopesCnt": { "type": "integer" },
                          "scoped": { "type": "boolean" },
                          "accountType": { "type": "string" },
                          "editable": { "type": "boolean" },
                          "uid": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "List connections",
                    "value": {
                      "connections": [
                        {
                          "id": 2,
                          "name": "My OpenWeatherMap connection",
                          "accountName": "openweathermap",
                          "accountLabel": null,
                          "packageName": "openweathermap",
                          "expire": null,
                          "metadata": null,
                          "companyId": 3,
                          "theme": "#d26c22",
                          "upgradeable": false,
                          "scopes": 0,
                          "scoped": true,
                          "accountType": "basic",
                          "editable": false,
                          "uid": "123k4j239j"
                        },
                        {
                          "id": 15,
                          "name": "My OpenWeatherMap connection2",
                          "accountName": "openweathermap",
                          "accountLabel": null,
                          "packageName": "openweathermap",
                          "expire": null,
                          "metadata": null,
                          "companyId": 3,
                          "theme": "#d26c22",
                          "upgradeable": false,
                          "scopes": 0,
                          "scoped": true,
                          "accountType": "basic",
                          "editable": false,
                          "uid": "agad8bf8v9"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Connections"],
        "summary": "Create connection",
        "description": "Creates a new connection with parameters passed in the request body. As the response, it returns all details of the created connection.",
        "security": [{ "token": ["connections:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountName": { "type": "string" },
                  "accountType": { "type": "string" },
                  "scopes": { "type": "array", "items": { "type": "string" } }
                },
                "additionalProperties": { "type": ["number", "string", "object", "array"] }
              },
              "example": {
                "accountName": "Slack Test",
                "accountType": "slack",
                "clientId": 123456,
                "clientSecret": "secret",
                "scopes": ["chat:write"]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the team whose connections will be retrieved.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connection": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "accountName": { "type": "string" },
                        "accountLabel": { "type": "string" },
                        "packageName": { "type": "string" },
                        "expire": { "type": "string", "format": "date-time" },
                        "metadata": {
                          "type": "object",
                          "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
                        },
                        "teamId": { "type": "integer" },
                        "theme": { "type": "string", "format": "color" },
                        "upgradeable": { "type": "boolean" },
                        "scopesCnt": { "type": "integer" },
                        "scoped": { "type": "boolean" },
                        "accountType": { "type": "string" },
                        "editable": { "type": "boolean" },
                        "uid": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Create Slack connection",
                    "value": {
                      "connection": {
                        "id": 90,
                        "name": "Slack test",
                        "accountName": "slack",
                        "accountLabel": "Slack",
                        "packageName": null,
                        "expire": null,
                        "metadata": { "value": "Integromat User", "type": "string" },
                        "teamId": 2,
                        "theme": "#4a154b",
                        "upgradeable": false,
                        "scopes": 0,
                        "scoped": true,
                        "accountType": "oauth",
                        "editable": false,
                        "uid": 3243125312
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/{connectionId}": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get connection details",
        "description": "Retrieves details of a connection with a given ID.",
        "security": [{ "token": ["connections:read"] }],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "accountName",
                  "accountLabel",
                  "packageName",
                  "expire",
                  "metadata",
                  "teamId",
                  "theme",
                  "upgradeable",
                  "scopesCnt",
                  "scoped",
                  "accountType",
                  "editable",
                  "uid",
                  "scopes"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the scopes for a given connection.",
            "examples": {
              "default": {
                "value": [
                  "id",
                  "name",
                  "accountName",
                  "accountLabel",
                  "packageName",
                  "expire",
                  "metadata",
                  "teamId",
                  "theme",
                  "upgradeable",
                  "scopesCnt",
                  "scoped",
                  "accountType",
                  "editable",
                  "uid",
                  "scopes"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connection": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "name": { "type": "string" },
                            "accountName": { "type": "string" },
                            "accountLabel": { "type": "string" },
                            "packageName": { "type": "string" },
                            "expire": { "type": "string", "format": "date-time" },
                            "metadata": {
                              "type": "object",
                              "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
                            },
                            "teamId": { "type": "integer" },
                            "theme": { "type": "string", "format": "color" },
                            "upgradeable": { "type": "boolean" },
                            "scopesCnt": { "type": "integer" },
                            "scoped": { "type": "boolean" },
                            "accountType": { "type": "string" },
                            "editable": { "type": "boolean" },
                            "uid": { "type": "string" }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "scopes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "account": { "type": "string" } }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Get connection details",
                    "value": {
                      "connection": {
                        "id": 93,
                        "name": "Google",
                        "accountName": "google",
                        "accountLabel": "Google",
                        "packageName": null,
                        "expire": null,
                        "metadata": { "value": "tom@example.com", "type": "email" },
                        "teamId": 4,
                        "theme": "#fecd5f",
                        "upgradeable": false,
                        "scopesCnt": 5,
                        "scoped": true,
                        "accountType": "oauth",
                        "editable": false,
                        "uid": 123456,
                        "scopes": [
                          {
                            "id": "https://www.googleapis.com/auth/userinfo.email",
                            "name": "View user's email address",
                            "account": "google"
                          },
                          { "id": "https://mail.google.com/", "name": "Access to Gmail.", "account": "google" },
                          { "id": "openid", "account": "google" },
                          { "id": "https://www.googleapis.com/auth/spreadsheets", "account": "google" },
                          { "id": "https://www.googleapis.com/auth/drive", "name": "Access to Google Drive.", "account": "google" }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Connections"],
        "summary": "Update connection",
        "description": "Updates a connection with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated connection including properties that were not changed.",
        "security": [{ "token": ["connections:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" } }, "additionalProperties": false },
              "example": { "name": "New Name" }
            }
          }
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "accountName",
                  "accountLabel",
                  "packageName",
                  "expire",
                  "metadata",
                  "teamId",
                  "theme",
                  "upgradeable",
                  "scopesCnt",
                  "scoped",
                  "accountType",
                  "editable",
                  "uid"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the expiration of the updated connection.",
            "examples": {
              "default": [
                "id",
                "name",
                "accountName",
                "accountLabel",
                "packageName",
                "expire",
                "metadata",
                "teamId",
                "theme",
                "upgradeable",
                "scopesCnt",
                "scoped",
                "accountType",
                "editable",
                "uid"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connection": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "accountName": { "type": "string" },
                        "accountLabel": { "type": "string" },
                        "packageName": { "type": "string" },
                        "expire": { "type": "string", "format": "date-time" },
                        "metadata": {
                          "type": "object",
                          "properties": { "value": { "type": "string" }, "type": { "type": "string", "enum": ["string", "email"] } }
                        },
                        "teamId": { "type": "integer" },
                        "theme": { "type": "string", "format": "color" },
                        "upgradeable": { "type": "boolean" },
                        "scopesCnt": { "type": "integer" },
                        "scoped": { "type": "boolean" },
                        "accountType": { "type": "string" },
                        "editable": { "type": "boolean" },
                        "uid": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Update connection",
                    "value": {
                      "connection": {
                        "id": 93,
                        "name": "New Name",
                        "accountName": "imap",
                        "accountLabel": "Others (IMAP)",
                        "packageName": null,
                        "expire": null,
                        "metadata": { "value": "tom@example.com", "type": "email" },
                        "teamId": 4,
                        "theme": "#eb5768",
                        "upgradeable": false,
                        "scopesCnt": 0,
                        "scoped": true,
                        "accountType": "basic",
                        "editable": true,
                        "uid": 123456
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Connections"],
        "summary": "Delete connection",
        "description": "Deletes a connection with a given ID and returns the ID as the response.",
        "security": [{ "token": ["connections:write"] }],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          },
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion if a connection is included in at least one scenario. Confirmation is required because the scenario will stop working without the connection. If the parameter is not sent or is set to `false` an error code is returned and the resource is not deleted.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "connection": { "type": "integer" } } },
                "examples": { "default": { "summary": "Delete connection with ID 1", "value": { "connection": 1 } } }
              }
            }
          }
        }
      }
    },
    "/connections/{connectionId}/test": {
      "post": {
        "tags": ["Connections"],
        "summary": "Verify connection",
        "description": "Sets the verification status by passing the *verified* property in the request body. It returns the confirmation if the connection is verified (true) or not (false).",
        "security": [{ "token": ["connections:write"] }],
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "verified": { "type": "boolean" } } },
                "examples": { "default": { "summary": "Connection verified", "value": { "verified": true } } }
              }
            }
          }
        }
      }
    },
    "/connections/{connectionId}/scoped": {
      "post": {
        "tags": ["Connections"],
        "summary": "Verify if connection is scoped",
        "description": "Verifies if a scope for a given connection is set. It returns the information if the connection is scoped (true) or not (false).",
        "security": [{ "token": ["connections:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The array with the IDs of the scopes for a given connection. The scope ID of a specific connection can be retrieved from the `\\connections\\{connectionId}` endpoint.",
                "properties": { "scope": { "type": "array", "items": { "type": "string" }, "required": true } }
              },
              "example": { "scope": ["https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/drive"] }
            }
          }
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "connection": { "type": "object", "properties": { "scoped": { "type": "boolean" } } } }
                },
                "examples": { "default": { "summary": "Not scoped connection", "value": { "connection": { "scoped": false } } } }
              }
            }
          }
        }
      }
    },
    "/connections/{connectionId}/set-data": {
      "post": {
        "tags": ["Connections"],
        "summary": "Set connection data",
        "description": "Sets data for a connection with a given ID. Data differ depending on the connection type. It returns the confirmation if the connection was changed (true) or not (false).",
        "security": [{ "token": ["connections:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The set of data may be different for each connection type so there are no predefined body properties to use. Please see the request examples for more details.",
                "additionalProperties": { "type": ["number", "string", "object", "array"] }
              },
              "examples": {
                "oauth": {
                  "summary": "OAuth connection data",
                  "value": { "accessToken": "asdf98FDF9HasdfFDsdafasHBB", "refreshToken": "8h9dHDJojnldkndDFJIVND" }
                },
                "email": {
                  "summary": "Email connection data",
                  "value": {
                    "provider": "other",
                    "imapHost": "imap.gmail.com",
                    "imapPort": 993,
                    "imapSecureConnection": true,
                    "imapUsername": "test@test.cz",
                    "imapPassword": "test",
                    "imapRejectUnauthorized": true,
                    "imapCa": "",
                    "imapExplicitTLS": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the connection. It can be retrieved from the `/connections` endpoint.",
            "example": 1
          },
          {
            "name": "reauthorize",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "The reauthorization status. If set to **false**, it will show the *Reauthorize* button next to the connection in the Integromat interface. Scenarios containing connections that need reauthorization may not be fully functional.",
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": { "default": { "summary": "Data changed", "value": { "changed": true } } }
              }
            }
          }
        }
      }
    },
    "/data-stores": {
      "get": {
        "tags": ["Data Stores"],
        "summary": "List data stores",
        "description": "Retrieves a collection of all data stores for a team with a given ID. Returned data stores are sorted by name, with the most recently created data stores appearing first.",
        "security": [{ "token": ["datastores:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the team related to the data store.",
            "example": 212,
            "required": true
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["id", "name", "teamId", "records", "size", "maxSize", "datastructureId"] }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you can retrieve only the IDs of data stores for a team with a given ID. Besides, this parameter enables you to get more details than can be retrieved from the main request with only the teamId parameter.",
            "examples": { "default": ["id", "name", "records", "size", "maxSize", "teamId"] }
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string", "enum": ["name"] },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStores": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint."
                          },
                          "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                          "records": { "type": "integer", "description": "The number of rows containing data in the data store." },
                          "size": { "type": "string", "description": "The size that the data store occupies (defined in bytes)." },
                          "maxSize": { "type": "string", "description": "The maximum size of the data store (defined in bytes)." },
                          "teamId": {
                            "type": "integer",
                            "description": "The unique numeric ID of the team whose data stores will be retrieved."
                          },
                          "datastructureId": {
                            "type": "integer",
                            "description": "The unique numeric ID of the data structure related to the data store."
                          }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "dataStores": [
                      { "id": 136, "name": "Invoices", "records": 0, "size": "0", "maxSize": "1048576", "teamId": 212 },
                      { "id": 137, "name": "Invoices 2", "records": 0, "size": "0", "maxSize": "1048576", "teamId": 212 }
                    ],
                    "pg": { "sortBy": "name", "limit": 10000, "sortDir": "asc", "offset": 0 }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data Stores"],
        "summary": "Create data store",
        "description": "Creates a new data store with parameters passed in the request body. As the response, it returns all details of the created data store.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                  "teamId": { "type": "integer", "description": "The data store name. The name does not need to be unique." },
                  "datastructureId": {
                    "type": "integer",
                    "description": "The unique numeric ID of the data structure included in the data store. All data structures IDs for a given team can be retrieved from the `/data-structures` endpoint."
                  },
                  "maxSizeMB": { "type": "integer", "description": "The maximum size of the data store (defined in MB)." }
                },
                "required": ["name", "teamId", "datastructureId", "maxSizeMB"]
              },
              "example": { "name": "Customers", "teamId": 212, "datastructureId": 178, "maxSizeMB": 1 }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStore": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint."
                        },
                        "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                        "records": { "type": "integer", "description": "The number of rows containing data in the data store." },
                        "size": { "type": "string", "description": "The size that the data store occupies (defined in bytes)." },
                        "maxSize": { "type": "string", "description": "The maximum size of the data store (defined in bytes)." },
                        "teamId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the team whose data stores will be retrieved."
                        },
                        "datastructureId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data structure related to the data store."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "dataStore": {
                      "id": 137,
                      "name": "Customers",
                      "teamId": 212,
                      "datastructureId": 178,
                      "records": 0,
                      "size": "0",
                      "maxSize": "1048576"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data Stores"],
        "summary": "Delete data store",
        "description": "Deletes a data store with a given ID and returns the ID as the response.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "type": "object", "properties": { "ids": { "type": "array", "items": { "type": "integer" } } }, "required": ["ids"] },
                  {
                    "type": "object",
                    "properties": { "exceptIds": { "type": "array", "items": { "type": "integer" } }, "all": { "type": "boolean" } },
                    "required": ["all"]
                  }
                ]
              },
              "example": { "ids": [137] }
            }
          }
        },
        "parameters": [
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion if a data store is included in at least one scenario. Confirmation is required because the scenario will stop working without the data store. If the parameter is not sent or is set to `false` an error code is returned and the resource is not deleted.",
            "example": true
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the team whose data stores will be retrieved.",
            "example": 212
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "dataStores": { "type": "array", "items": { "type": "integer" } } } },
                "examples": { "default": { "dataStores": [137] } }
              }
            }
          }
        }
      },
      "components": {
        "sortables": {
          "name": "pg[sortBy]",
          "in": "query",
          "schema": { "type": "string", "enum": ["name"] },
          "description": "The value that will be used to sort returned entities by."
        }
      }
    },
    "/data-stores/{dataStoreId}": {
      "get": {
        "tags": ["Data Stores"],
        "summary": "Get data store details",
        "description": "Retrieves details of a data store with a given ID.",
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["id", "name", "teamId", "records", "size", "maxSize", "datastructureId"] }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you can retrieve only the IDs of data stores for a team with a given ID. Besides, this parameter enables you to get more details than can be retrieved from the main request with only the teamId parameter.",
            "examples": { "default": ["id", "name", "records", "size", "maxSize", "teamId"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStore": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint."
                        },
                        "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                        "records": { "type": "integer", "description": "The number of rows containing data in the data store." },
                        "size": { "type": "string", "description": "The size that the data store occupies (defined in bytes)." },
                        "maxSize": { "type": "string", "description": "The maximum size of the data store (defined in bytes)." },
                        "teamId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the team whose data stores will be retrieved."
                        },
                        "datastructureId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data structure related to the data store."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "dataStore": { "id": 137, "name": "Customers", "records": "0", "size": "0", "maxSize": "1048576", "teamId": 212 }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Data Stores"],
        "summary": "Update data store",
        "description": "Updates properties of a data store with a given ID in a team with a given ID by passing new values in the request body. This endpoint cannot be used to update data included in the data store - for managing data use the `/data-stores/{dataStoreId}/data` endpoints. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated data store including properties that were not changed.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                  "datastructureId": {
                    "type": "integer",
                    "description": "The unique numeric ID of the data structure included in the data store. All data structures IDs for a given team can be retrieved from the `/data-structures` endpoint."
                  },
                  "maxSizeMB": { "type": "integer", "description": "The maximum size of the data store (defined in MB)." }
                }
              },
              "example": { "name": "Data store 2", "datastructureId": 9, "maxSizeMB": 3 }
            }
          }
        },
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the team related to the data store.",
            "example": 212,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStore": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint."
                        },
                        "name": { "type": "string", "description": "The data store name. The name does not need to be unique." },
                        "records": { "type": "integer", "description": "The number of rows containing data in the data store." },
                        "size": { "type": "string", "description": "The size that the data store occupies (defined in bytes)." },
                        "maxSize": { "type": "string", "description": "The maximum size of the data store (defined in bytes)." },
                        "teamId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the team whose data stores will be retrieved."
                        },
                        "datastructureId": {
                          "type": "integer",
                          "description": "The unique numeric ID of the data structure related to the data store."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "dataStore": {
                      "id": 137,
                      "name": "Invoices 2",
                      "teamId": 212,
                      "datastructureId": 178,
                      "records": 0,
                      "size": "0",
                      "maxSize": "1048576"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "dataStoreId": {
          "name": "dataStoreId",
          "in": "path",
          "schema": { "type": "integer" },
          "required": true,
          "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
          "example": 137
        },
        "teamId": {
          "name": "teamId",
          "in": "query",
          "schema": { "type": "integer" },
          "description": "The unique numeric ID of the team whose data stores will be retrieved.",
          "example": 212
        },
        "teamIdRequired": {
          "name": "teamId",
          "in": "query",
          "schema": { "type": "integer" },
          "description": "The unique numeric ID of the team related to the data store.",
          "example": 212,
          "required": true
        },
        "cols": {
          "name": "cols[]",
          "in": "query",
          "schema": {
            "type": "array",
            "items": { "type": "string", "enum": ["id", "name", "teamId", "records", "size", "maxSize", "datastructureId"] }
          },
          "description": "This parameter allows you to specify the group of values to return. For instance, you can retrieve only the IDs of data stores for a team with a given ID. Besides, this parameter enables you to get more details than can be retrieved from the main request with only the teamId parameter.",
          "examples": { "default": ["id", "name", "records", "size", "maxSize", "teamId"] }
        }
      }
    },
    "/data-stores/{dataStoreId}/data": {
      "get": {
        "tags": ["Data Stores > Data"],
        "summary": "List data store records",
        "description": "Retrieves a list of the records from a data store with a given ID.",
        "security": [{ "token": ["datastores:read"] }],
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer", "maxValue": 100, "default": 10 },
            "description": "The numeric value of maximum entities to return."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "records": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "key": { "type": "string" }, "data": { "type": "object" } } }
                    },
                    "count": { "type": "integer" },
                    "spec": { "type": "array", "items": { "type": "object" } },
                    "pg": { "type": "object", "properties": { "limit": { "type": "integer" }, "offset": { "type": "integer" } } }
                  }
                },
                "examples": {
                  "default": {
                    "records": [
                      { "key": "8f7162828bc0", "data": { "price": 123 } },
                      { "key": "d92fb3bc0eb4", "data": { "price": 456 } }
                    ],
                    "spec": [{ "name": "price", "label": "Price", "type": "number", "default": null, "required": true }],
                    "strict": false,
                    "count": 2,
                    "pg": { "limit": 10, "offset": 0 }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data Stores > Data"],
        "summary": "Create data store record",
        "description": "Creates a new record in a data store with a given ID and returns all record details.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The unique key of the data store record. If no key is provided, it will be automatically generated."
                  },
                  "data": {
                    "type": "object",
                    "description": "The data of the data store record. The structure strictly depends on the included data structure. If no data is provided, in response the values will be set to null."
                  }
                }
              },
              "example": { "key": "2f8cbb2f8cbb", "data": { "price": 500 } }
            }
          }
        },
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "key": { "type": "string" }, "data": { "type": "object" } } },
                "examples": { "default": { "key": "2f8cbb2f8cbb", "data": { "price": 500 } } }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data Stores > Data"],
        "summary": "Delete data store records",
        "description": "Deletes a given set of records from a data store with a given ID.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "The array of record keys to delete.",
                    "properties": { "ids": { "type": "array", "items": { "type": "string" } } },
                    "required": ["ids"]
                  },
                  {
                    "type": "object",
                    "description": "This parameter allows to delete all records without defining all keys but also gives the possibility to exclude from deleting records with the specified keys.",
                    "properties": { "exceptIds": { "type": "array", "items": { "type": "string" } }, "all": { "type": "boolean" } },
                    "required": ["all"]
                  }
                ]
              },
              "example": { "exceptKeys": ["2f8cbb2f8cbb"], "all": true }
            }
          }
        },
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion of records in case all records are deleted at once. If in such case the parameter is not sent or is set to `false` an error code is returned and the resource is not deleted.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "keys": { "type": "array", "items": { "type": "string" } } } },
                "examples": { "default": { "keys": ["8f7162828bc0", "d92fb3bc0eb4"] } }
              }
            }
          }
        }
      },
      "components": {
        "limit": {
          "name": "pg[limit]",
          "in": "query",
          "schema": { "type": "integer", "maxValue": 100, "default": 10 },
          "description": "The numeric value of maximum entities to return."
        }
      }
    },
    "/data-stores/{dataStoreId}/data/{dataStoreKeyRecord}": {
      "put": {
        "tags": ["Data Stores > Data"],
        "summary": "Update entire data store record",
        "description": "Updates a data store record with a given key by passing new values in the request body. It replaces the entire resource with the new values. As the response, it returns all details of the updated data.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" }, "examples": { "default": { "price": 600 } } } }
        },
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "dataStoreRecordKey",
            "in": "path",
            "schema": { "type": "string" },
            "required": true,
            "description": "The key of the data store record. It can be retrieved from the `/data-stores/{dataStoreId}/data` endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "key": { "type": "string" }, "data": { "type": "object" } } },
                "examples": { "default": { "key": "2f8cbb2f8cbb", "data": { "price": 600 } } }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Data Stores > Data"],
        "summary": "Update data store record details",
        "description": "Updates a data store record with a given key by passing new values in the request body. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated data including properties that were not changed.",
        "security": [{ "token": ["datastores:write"] }],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" }, "examples": { "default": { "price": 600 } } } }
        },
        "parameters": [
          {
            "name": "dataStoreId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data store. It can be retrieved from the `/data-stores` endpoint.",
            "example": 137
          },
          {
            "name": "dataStoreRecordKey",
            "in": "path",
            "schema": { "type": "string" },
            "required": true,
            "description": "The key of the data store record. It can be retrieved from the `/data-stores/{dataStoreId}/data` endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "key": { "type": "string" }, "data": { "type": "object" } } },
                "examples": { "default": { "key": "2f8cbb2f8cbb", "data": { "price": 600 } } }
              }
            }
          }
        }
      },
      "components": {
        "dataStoreRecordKey": {
          "name": "dataStoreRecordKey",
          "in": "path",
          "schema": { "type": "string" },
          "required": true,
          "description": "The key of the data store record. It can be retrieved from the `/data-stores/{dataStoreId}/data` endpoint."
        }
      }
    },
    "/data-structures": {
      "get": {
        "tags": ["Data Structures"],
        "summary": "List data structures",
        "description": "Retrieves a collection of all data structures for a team with a given ID. Returned data structures are sorted by name, with the most recently created data structures appearing first.",
        "security": [{ "token": ["udts:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the team whose data structures will be retrieved.",
            "examples": { "ID": { "value": "123" } }
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["id", "name", "teamId", "spec", "strict"] } },
            "description": "This parameter allows you to specify the group of values to return. For instance, you can retrieve only the IDs of data structures for a team with a given ID. Besides, this parameter enables you to get more details than can be retrieved from the main request with only the teamId parameter, such as the data structure specification and whether the strict option is enabled.",
            "examples": { "default": { "value": [] }, "all": { "value": ["id", "name", "teamId", "spec", "strict"] } }
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string", "enum": ["name"] },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStructures": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "name": { "type": "string", "minLength": 1, "maxLength": 128 },
                          "strict": { "type": "boolean" },
                          "spec": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "description": "Boolean property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["boolean"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "required": { "type": "boolean" },
                                    "default": { "type": "boolean" }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "String property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["text"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "required": { "type": "boolean" },
                                    "default": { "type": "string" },
                                    "multiline": { "type": "boolean" }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "Number property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["number"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "required": { "type": "boolean" },
                                    "default": { "type": "number" }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "Date property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["date"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "Binary data property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["buffer"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "required": { "type": "boolean" },
                                    "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "Collection property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["collection"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                                    "sequence": { "type": "boolean" }
                                  },
                                  "required": ["name", "type"]
                                },
                                {
                                  "type": "object",
                                  "description": "Array property",
                                  "properties": {
                                    "type": { "type": "string", "enum": ["array"] },
                                    "name": { "type": "string" },
                                    "label": { "type": "string" },
                                    "spec": { "type": "object", "description": "DataStructureSpec object" },
                                    "sequence": { "type": "boolean" }
                                  },
                                  "required": ["name", "type"]
                                }
                              ]
                            }
                          }
                        },
                        "required": ["id", "teamId", "name", "strict", "spec"]
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "value": {
                      "dataStructures": [
                        { "id": 9, "name": "Data structure 1", "teamId": 1 },
                        { "id": 1, "name": "Data structure 2", "teamId": 1 }
                      ],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    }
                  },
                  "all": {
                    "value": {
                      "dataStructures": [
                        {
                          "id": 9,
                          "name": "Data structure 1",
                          "teamId": 1,
                          "spec": [
                            { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                            { "type": "number", "name": "num", "label": "Number field", "default": "1,", "required": false }
                          ],
                          "strict": true
                        },
                        {
                          "id": 1,
                          "name": "Data structure 2",
                          "teamId": 1,
                          "spec": [{ "type": "date", "name": "dt", "label": "Date field" }],
                          "strict": false
                        }
                      ],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data Structures"],
        "summary": "Create data structure",
        "description": "Creates a new data structure with parameters passed in the request body. As the response, it returns all details of the created data structure including its full specification.",
        "security": [{ "token": ["udts:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": {
                    "type": "integer",
                    "description": "The unique numeric ID of the team in which a data structure will be created."
                  },
                  "name": {
                    "type": "string",
                    "description": "The data structure name. The name does not need to be unique.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "strict": {
                    "type": "boolean",
                    "description": "Refers to the \"Strict\" option available for data structures in the Integromat platform interface. If set to **true**, the data structure will be compared to the structure of the payload and if the payload contains extra items not specified in the data structure, the payload will be rejected."
                  },
                  "spec": {
                    "type": "array",
                    "description": "Defines the data structure specifications including all related options. The specification structure depends on the chosen data types.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Boolean property",
                          "properties": {
                            "type": { "type": "string", "enum": ["boolean"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "String property",
                          "properties": {
                            "type": { "type": "string", "enum": ["text"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "string" },
                            "multiline": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Number property",
                          "properties": {
                            "type": { "type": "string", "enum": ["number"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "number" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Date property",
                          "properties": {
                            "type": { "type": "string", "enum": ["date"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Binary data property",
                          "properties": {
                            "type": { "type": "string", "enum": ["buffer"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Collection property",
                          "properties": {
                            "type": { "type": "string", "enum": ["collection"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                            "sequence": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Array property",
                          "properties": {
                            "type": { "type": "string", "enum": ["array"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "spec": { "type": "object", "description": "DataStructureSpec object" },
                            "sequence": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        }
                      ]
                    }
                  }
                },
                "required": ["teamId", "name", "strict", "spec"]
              },
              "example": {
                "teamId": 1,
                "name": "Data structure 1",
                "strict": true,
                "spec": [
                  { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                  { "type": "number", "name": "num", "label": "Number field", "default": "1,", "required": false }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStructure": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "name": { "type": "string", "minLength": 1, "maxLength": 128 },
                        "strict": { "type": "boolean" },
                        "spec": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "description": "Boolean property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["boolean"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "String property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["text"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "string" },
                                  "multiline": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Number property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["number"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "number" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Date property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["date"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Binary data property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["buffer"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Collection property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["collection"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Array property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["array"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "object", "description": "DataStructureSpec object" },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              }
                            ]
                          }
                        }
                      },
                      "required": ["id", "teamId", "name", "strict", "spec"]
                    }
                  }
                },
                "example": {
                  "dataStructure": {
                    "id": 9,
                    "name": "Data structure 1",
                    "teamId": 1,
                    "spec": [
                      { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                      { "type": "number", "name": "num", "label": "Number field", "default": "1,", "required": false }
                    ],
                    "strict": true
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "dataStructureIdRequired": {
          "name": "dataStructureId",
          "in": "path",
          "schema": { "type": "integer" },
          "required": true,
          "description": "The unique numeric ID of the data structure. It can be retrieved from the `/data-structures` endpoint.",
          "example": 1
        }
      }
    },
    "/data-structures/{dataStructureId}": {
      "patch": {
        "tags": ["Data Structures"],
        "summary": "Update data structure",
        "description": "Updates a data structure with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated data structure including properties that were not changed.",
        "security": [{ "token": ["udts:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The unique numeric ID of the team in which a data structure will be created.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "strict": {
                    "type": "boolean",
                    "description": "Refers to the \"Strict\" option available for data structures in the Integromat user interface. If set to **true**, the data structure will be compared to the structure of the payload and if the payload contains extra items not specified in the data structure, the payload will be rejected."
                  },
                  "spec": {
                    "type": "array",
                    "description": "Defines the data structure specifications including all related options. The specification structure depends on the chosen data types. All properties correspond to the options visible in the Integromat interface.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Boolean property",
                          "properties": {
                            "type": { "type": "string", "enum": ["boolean"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "String property",
                          "properties": {
                            "type": { "type": "string", "enum": ["text"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "string" },
                            "multiline": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Number property",
                          "properties": {
                            "type": { "type": "string", "enum": ["number"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "default": { "type": "number" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Date property",
                          "properties": {
                            "type": { "type": "string", "enum": ["date"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Binary data property",
                          "properties": {
                            "type": { "type": "string", "enum": ["buffer"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "required": { "type": "boolean" },
                            "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Collection property",
                          "properties": {
                            "type": { "type": "string", "enum": ["collection"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                            "sequence": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        },
                        {
                          "type": "object",
                          "description": "Array property",
                          "properties": {
                            "type": { "type": "string", "enum": ["array"] },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "spec": { "type": "object", "description": "DataStructureSpec object" },
                            "sequence": { "type": "boolean" }
                          },
                          "required": ["name", "type"]
                        }
                      ]
                    }
                  }
                }
              },
              "example": {
                "name": "Data structure 1",
                "spec": [
                  { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                  { "type": "number", "name": "num", "label": "Number field", "default": "2,", "required": false }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "dataStructureId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data structure. It can be retrieved from the `/data-structures` endpoint.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStructure": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "name": { "type": "string", "minLength": 1, "maxLength": 128 },
                        "strict": { "type": "boolean" },
                        "spec": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "description": "Boolean property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["boolean"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "String property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["text"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "string" },
                                  "multiline": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Number property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["number"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "number" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Date property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["date"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Binary data property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["buffer"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Collection property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["collection"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Array property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["array"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "object", "description": "DataStructureSpec object" },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              }
                            ]
                          }
                        }
                      },
                      "required": ["id", "teamId", "name", "strict", "spec"]
                    }
                  }
                },
                "example": {
                  "dataStructure": {
                    "id": 9,
                    "name": "Data structure 1",
                    "teamId": 1,
                    "spec": [
                      { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                      { "type": "number", "name": "num", "label": "Number field", "default": "2,", "required": false }
                    ],
                    "strict": true
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data Structures"],
        "summary": "Delete data structure",
        "description": "Deletes a data structure with a given ID and returns the ID as the response.",
        "security": [{ "token": ["udts:write"] }],
        "parameters": [
          {
            "name": "dataStructureId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data structure. It can be retrieved from the `/data-structures` endpoint.",
            "example": 1
          },
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion if a data structure is included in at least one scenario. Confirmation is required because the scenario will stop working without the data structure. If the parameter is not sent or is set to `false` an error code is returned and the resource is not deleted.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "dataStructure": { "type": "integer" } } },
                "example": { "dataStructure": 1 }
              }
            }
          }
        }
      }
    },
    "/data-structures/{dataStructureId}/clone": {
      "post": {
        "tags": ["Data Structures"],
        "summary": "Clone data structure",
        "description": "Creates a clone of the data structure with a given ID in the original or specified team. As the response, it returns all details of the cloned data structure including its full specification.",
        "security": [{ "token": ["udts:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The cloned data structure name. The name does not need to be unique.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "targetTeamId": {
                    "type": "integer",
                    "description": "The team in which the cloned data structure will be saved. If the target team is not specified, the cloned data structure will be saved in the original team."
                  }
                },
                "required": ["name"]
              },
              "example": { "name": "Cloned data structure", "targetTeamId": 2 }
            }
          }
        },
        "parameters": [
          {
            "name": "dataStructureId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the data structure. It can be retrieved from the `/data-structures` endpoint.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dataStructure": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "name": { "type": "string", "minLength": 1, "maxLength": 128 },
                        "strict": { "type": "boolean" },
                        "spec": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "description": "Boolean property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["boolean"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "String property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["text"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "string" },
                                  "multiline": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Number property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["number"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "default": { "type": "number" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Date property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["date"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Binary data property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["buffer"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "required": { "type": "boolean" },
                                  "codepage": { "type": "string", "enum": ["binary", "utf8"] }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Collection property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["collection"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "array", "items": { "type": "object", "description": "DataStructureSpec object" } },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              },
                              {
                                "type": "object",
                                "description": "Array property",
                                "properties": {
                                  "type": { "type": "string", "enum": ["array"] },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "spec": { "type": "object", "description": "DataStructureSpec object" },
                                  "sequence": { "type": "boolean" }
                                },
                                "required": ["name", "type"]
                              }
                            ]
                          }
                        }
                      },
                      "required": ["id", "teamId", "name", "strict", "spec"]
                    },
                    "differentTeam": { "type": "boolean" }
                  }
                },
                "examples": {
                  "clone": {
                    "summary": "Clone to another team",
                    "value": {
                      "dataStructure": {
                        "id": 2,
                        "name": "Cloned data structure",
                        "teamId": 2,
                        "spec": [
                          { "type": "text", "name": "txt", "label": "Text field", "default": "default string", "required": true },
                          { "type": "number", "name": "num", "label": "Number field", "default": "1,", "required": false }
                        ],
                        "strict": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": ["Devices"],
        "summary": "List",
        "description": "Get a list of devices of a given team.",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "required": true, "example": "1" },
          {
            "name": "assigned",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "true = devices with scenarioId; false = devices without scenarioId - this filter only affects the trigger scope",
            "example": "true"
          },
          {
            "name": "viewForScenarioId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "Devices assigned to the scenario and not assigned devices. If this parameter is set assigned parameter is ignored.",
            "example": "4"
          },
          {
            "name": "scope[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["call", "scanner"] } },
            "example": "call"
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "teamId", "udid", "scope", "info", "queueCount", "queueLimit", "scenarioId"]
              }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "devices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "udid": { "type": "string" },
                          "scope": { "type": "array", "items": { "type": "string" } },
                          "info": { "type": "object" },
                          "queueCount": { "type": "integer" },
                          "queueLimit": { "type": "integer" },
                          "scenarioId": { "type": "integer" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "devices": [
                    {
                      "id": 2,
                      "name": "Phone",
                      "teamId": 2,
                      "udid": "XboVPMTfgtwBNjRr7AGPe9X4AdRZhkaF",
                      "scope": ["call", "scaner"],
                      "info": null,
                      "queueCount": 0,
                      "queueLimit": 10000,
                      "scenarioId": null
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Detail",
        "description": "The ID can be id or udid.",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "inspector", "in": "query", "schema": { "type": "integer" }, "example": "1" },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "teamId", "udid", "scope", "info", "queueCount", "queueLimit", "scenarioId"]
              }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "device": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "udid": { "type": "string" },
                        "scope": { "type": "array", "items": { "type": "string" } },
                        "info": { "type": "object" },
                        "queueCount": { "type": "integer" },
                        "queueLimit": { "type": "integer" },
                        "scenarioId": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "device": {
                    "id": 2,
                    "name": "Phone",
                    "teamId": 2,
                    "udid": "XboVPMTfgtwBNjRr7AGPe9X4AdRZhkaF",
                    "scope": ["call", "scaner"],
                    "info": null,
                    "queueCount": 0,
                    "queueLimit": 10000,
                    "scenarioId": null
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Devices"],
        "summary": "Partial update",
        "description": "Update a device",
        "security": [{ "token": ["devices:write"] }],
        "requestBody": { "content": { "application/json": { "schema": { "type": "object" }, "example": { "name": "Android phone" } } } },
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "teamId", "udid", "scope", "info", "queueCount", "queueLimit", "scenarioId"]
              }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "device": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "udid": { "type": "string" },
                        "scope": { "type": "array", "items": { "type": "string" } },
                        "info": { "type": "object" },
                        "queueCount": { "type": "integer" },
                        "queueLimit": { "type": "integer" },
                        "scenarioId": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "device": {
                    "id": 2,
                    "name": "Android phone",
                    "teamId": 2,
                    "udid": "XboVPMTfgtwBNjRr7AGPe9X4AdRZhkaF",
                    "scope": ["call", "scaner"],
                    "info": null,
                    "queueCount": 0,
                    "queueLimit": 10000,
                    "scenarioId": null
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Devices"],
        "summary": "Delete",
        "description": "Errors:<br />\r\nIM004 - Confirmation required (error with metadata) - needs confirmation<br />\r\nIM405 - Device can't be deleted because it contains messages in queue (error with metadata) - needs confirmation<br />\r\nIM005 - Device is locked by a running scenario and thus can't be deleted",
        "security": [{ "token": ["devices:write"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 2 },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "device": { "type": "integer" } } },
                "example": { "device": 2 }
              }
            }
          }
        }
      }
    },
    "/devices/request": {
      "post": {
        "tags": ["Devices"],
        "summary": "Create request",
        "description": "Required scope: devices:write",
        "security": [{ "token": ["devices:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" }, "teamId": { "type": "integer" } } },
              "example": { "name": "Phone", "teamId": 1 }
            }
          }
        },
        "parameters": [{ "name": "inspector", "in": "query", "schema": { "type": "integer" }, "example": "1" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "createDeviceRequest": {
                      "type": "object",
                      "properties": { "udid": { "type": "string" }, "inspector": { "type": "boolean" } }
                    }
                  }
                },
                "example": { "createDeviceRequest": { "udid": "k1KqeAVIYA5Rq5vduiU3mUfbGD4vhTfH", "inspector": true } }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}/incomings": {
      "get": {
        "tags": ["Devices > Incomings"],
        "summary": "List",
        "description": "Required scope: devices:read",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "string" }, "example": "new_sms" },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "scope": { "type": "string" },
                          "size": { "type": "integer" },
                          "created": { "type": "string", "format": "date-time" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "incomings": [
                    { "id": "27c4879e5fae4d78b0d371f59187fa93", "scope": "new_sms", "size": 1, "created": "2021-01-26T06:55:58.803Z" }
                  ],
                  "pg": { "sortBy": "created", "limit": 10000, "sortDir": "asc", "offset": 0 }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Devices > Incomings"],
        "summary": "Delete",
        "description": "\"ids\" and \"all\" can no be used together<br />\r\n\"ids\" or \"all\" has to be set<br />\r\n\"exceptIds\" is possible to use only with \"all\"<br />\r\nIt could happen, that some incoming messages are deleted and others not. In this case, the API returns a successful status code, and the response additionally contains an error object with a error description.",
        "security": [{ "token": ["devices:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": { "type": "array", "items": { "type": "string" } },
                  "exceptIds": { "type": "array", "items": { "type": "string" } },
                  "all": { "type": "boolean" }
                }
              },
              "example": { "ids": [], "exceptIds": [], "all": true }
            }
          }
        },
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomings": { "type": "array", "items": { "type": "string" } },
                    "error": { "type": "object", "properties": { "name": { "type": "string" }, "message": { "type": "string" } } }
                  }
                },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": {
                      "incomings": [
                        "4ff11b6d24e24fa9add17d11a8143578",
                        "167193ab06d34b879346c69aebc8f5c1",
                        "d1efa5318a034d36ad7cbeac543573cf",
                        "29d9a7410dff494ab739036f6c332335"
                      ]
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": { "ids": { "type": "array" }, "exceptIds": { "type": "array" }, "all": { "type": "boolean" } }
                            },
                            "example": { "ids": [], "exceptIds": [], "all": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  },
                  "delete-with-error": {
                    "summary": "Delete with error",
                    "value": {
                      "incomings": ["02731358e5ab4022aff040015a1f1a57", "dcf18b685e5c4095b9ee24cea09146d3"],
                      "error": {
                        "name": "APIError",
                        "message": "Some of the incoming messages could not be deleted because they are being processed right now."
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "ids": { "type": "array", "items": { "type": "string" } },
                                "exceptIds": { "type": "array" },
                                "all": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "ids": [
                                "dcf18b685e5c4095b9ee24cea09146d3",
                                "4f5bdd7f-dc36-4699-9df8-317b53456b13",
                                "02731358-e5ab-4022-aff0-40015a1f1a57"
                              ],
                              "exceptIds": [],
                              "all": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}/incomings/{incomingId}": {
      "get": {
        "tags": ["Devices > Incomings"],
        "summary": "Detail",
        "description": "Required scope: devices:read",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "incomingId", "in": "path", "schema": { "type": "string" }, "required": true }
        ]
      }
    },
    "/devices/{deviceId}/incomings/stats": {
      "get": {
        "tags": ["Devices > Incomings"],
        "summary": "Stats",
        "description": "Required scope: devices:read",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "string" }, "example": "new_sms" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomingStat": {
                      "type": "object",
                      "properties": { "queue": { "type": "integer" }, "limit": { "type": "integer" }, "enabled": { "type": "boolean" } }
                    }
                  }
                },
                "example": { "incomingStat": { "queue": 1, "limit": 10000, "enabled": true } }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}/outgoings": {
      "get": {
        "tags": ["Devices > Outgoing"],
        "summary": "List",
        "description": "Required scope: devices:read",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "string" }, "example": "new_sms" },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outgoings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "scope": { "type": "string" },
                          "size": { "type": "integer" },
                          "created": { "type": "string", "format": "date-time" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "outgoings": [
                    { "id": "ce2ab2eca9874a8b874f5deb6e22d475", "scope": "new_sms", "size": 1, "created": "2021-01-12T15:08:36.732Z" }
                  ],
                  "pg": { "sortBy": "created", "limit": 10000, "sortDir": "asc", "offset": 0 }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Devices > Outgoing"],
        "summary": "Delete",
        "description": "\"ids\" and \"all\" can no be used together<br />\r\n\"ids\" or \"all\" has to be set<br />\r\n\"exceptIds\" is possible to use only with \"all\"<br />\r\nIt could happen, that some incoming messages are deleted and others not. In this case, the API returns a successful status code, and the response additionally contains an error object with a error description.",
        "security": [{ "token": ["devices:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": { "type": "array", "items": { "type": "string" } },
                  "exceptIds": { "type": "array", "items": { "type": "string" } },
                  "all": { "type": "boolean" }
                }
              },
              "example": { "ids": [], "exceptIds": [], "all": true }
            }
          }
        },
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outgoings": { "type": "array", "items": { "type": "string" } },
                    "error": { "type": "object", "properties": { "name": { "type": "string" }, "message": { "type": "string" } } }
                  }
                },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": {
                      "outgoings": [
                        "4ff11b6d24e24fa9add17d11a8143578",
                        "167193ab06d34b879346c69aebc8f5c1",
                        "d1efa5318a034d36ad7cbeac543573cf",
                        "29d9a7410dff494ab739036f6c332335"
                      ]
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": { "ids": { "type": "array" }, "exceptIds": { "type": "array" }, "all": { "type": "boolean" } }
                            },
                            "example": { "ids": [], "exceptIds": [], "all": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  },
                  "delete-with-error": {
                    "summary": "Delete with error",
                    "value": {
                      "outgoings": ["02731358e5ab4022aff040015a1f1a57", "dcf18b685e5c4095b9ee24cea09146d3"],
                      "error": {
                        "name": "APIError",
                        "message": "Some of the outgoings messages could not be deleted because they are being processed right now."
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "ids": { "type": "array", "items": { "type": "string" } },
                                "exceptIds": { "type": "array" },
                                "all": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "ids": [
                                "dcf18b685e5c4095b9ee24cea09146d3",
                                "4f5bdd7f-dc36-4699-9df8-317b53456b13",
                                "02731358-e5ab-4022-aff0-40015a1f1a57"
                              ],
                              "exceptIds": [],
                              "all": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/{deviceId}/outgoings/{outgoingId}": {
      "get": {
        "tags": ["Devices > Outgoing"],
        "summary": "Detail",
        "description": "Required scope: devices:read",
        "security": [{ "token": ["devices:read"] }],
        "parameters": [
          { "name": "deviceId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "outgoingId", "in": "path", "schema": { "type": "string" }, "required": true }
        ]
      }
    },
    "/dlqs": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "List",
        "description": "List incomplete executions of a scenario.",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [{ "name": "scenarioId", "in": "query", "schema": { "type": "integer" }, "required": true, "example": 4 }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dlqs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "reason": { "type": "string" },
                          "created": { "type": "string", "format": "date-time" },
                          "size": { "type": "integer" },
                          "resolved": { "type": "boolean" },
                          "retry": { "type": "boolean" },
                          "attempts": { "type": "integer" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "dlqs": [
                        {
                          "id": "ada87173334b44d1907270064edbd7dd",
                          "reason": "IP address is not valid.",
                          "created": "2019-11-04T10:52:57.260Z",
                          "size": 5,
                          "resolved": false,
                          "retry": true,
                          "attempts": 1
                        },
                        {
                          "id": "c29c4bf027c74bfc848e1803bf764447",
                          "reason": "IP address is not valid.",
                          "created": "2019-11-04T10:52:12.276Z",
                          "size": 5,
                          "resolved": false,
                          "retry": true,
                          "attempts": 0
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "query", "schema": { "type": "string" }, "example": "4" },
                        { "name": "pg['limit']", "in": "query", "schema": { "type": "string" } },
                        { "name": "pg['offset']", "in": "query", "schema": { "type": "string" } },
                        { "name": "pg['sortBy']", "in": "query", "schema": { "type": "string" } },
                        { "name": "pg['sortDir']", "in": "query", "schema": { "type": "string" } },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Incomplete executions"],
        "summary": "Delete",
        "description": "\"ids\" and \"all\" can no be used together<br />\r\n\"ids\" or \"all\" has to be set<br />\r\n\"exceptIds\" is possible to use only with \"all\"<br />\r\nif \"all\" is used the query parameter \"scenarioId\" must be set<br />\r\nIt could happen, that some executions are deleted and others not. In this case, the API returns a successful status code, and the response additionally contains an error object with a error description.",
        "security": [{ "token": ["dlqs:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": { "type": "array", "items": { "type": "string" } },
                  "exceptIds": { "type": "array", "items": { "type": "string" } },
                  "all": { "type": "boolean" }
                }
              },
              "example": { "ids": ["85354fed3c804ec3a137b9ceb9dc9256", "3b8badf2afd7447eb4340c24d1706b83"], "exceptIds": [], "all": false }
            }
          }
        },
        "parameters": [
          { "name": "scenarioId", "in": "query", "schema": { "type": "integer" }, "example": 4 },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "dlqs": { "type": "array", "items": { "type": "string" } } } },
                "examples": {
                  "delete-with-error": {
                    "summary": "Delete with error",
                    "value": {
                      "dlqs": ["2f2eb8de489a4e059518b212f5388bf3"],
                      "error": {
                        "name": "APIError",
                        "message": "Some of the executions could not be deleted because they are being processed right now.",
                        "stack": "APIError: Some of the executions could not be deleted because they are being processed right now.\n  at deleteDlqMulti (C:\\integromat-repo\\imt-web-api\\lib\\controllers\\dlqs.js:162:16)\n  at processTicksAndRejections (internal/process/task_queues.js:93:5)"
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "ids": { "type": "array", "items": { "type": "string" } },
                                "exceptIds": { "type": "array" },
                                "all": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "ids": ["85354fed3c804ec3a137b9ceb9dc9256", "2f2eb8de489a4e059518b212f5388bf3"],
                              "exceptIds": [],
                              "all": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "scenarioId", "in": "query", "schema": { "type": "string" }, "example": "4" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "delete": {
                    "summary": "Delete",
                    "value": { "dlqs": ["f140d39b5c9c4c72b3bc4f3b7aa467de", "74232267212a431ebab728158575ef65"] },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "ids": { "type": "array" },
                                "exceptIds": { "type": "array", "items": { "type": "string" } },
                                "all": { "type": "boolean" }
                              }
                            },
                            "example": { "ids": [], "exceptIds": ["85354fed3c804ec3a137b9ceb9dc9256"], "all": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "scenarioId", "in": "query", "schema": { "type": "string" }, "example": "4" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dlqs/{dlqId}": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "Item",
        "description": "Get a detail of an incomplete execution.",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [
          { "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true, "example": "a07e16f2ad134bf49cf83a00aa95c0a5" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dlq": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "scenarioId": { "type": "integer" },
                        "scenarioName": { "type": "string" },
                        "companyId": { "type": "integer" },
                        "companyName": { "type": "string" },
                        "resolved": { "type": "boolean" },
                        "deleted": { "type": "boolean" },
                        "index": { "type": "integer" },
                        "created": { "type": "string", "format": "date-time" },
                        "executionId": { "type": "string" },
                        "retry": { "type": "boolean" },
                        "attempts": { "type": "integer" },
                        "size": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "dlq": {
                    "id": "a07e16f2ad134bf49cf83a00aa95c0a5",
                    "scenarioId": 3,
                    "scenarioName": "DLQS test",
                    "companyId": 1,
                    "companyName": "My Lab",
                    "resolved": false,
                    "deleted": false,
                    "index": 49,
                    "created": "2019-11-26T09:57:10.039Z",
                    "executionId": "55602700-e840-45bf-b18c-0aef214dd967",
                    "retry": false,
                    "attempts": 2,
                    "size": 21
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Incomplete executions"],
        "summary": "Partial update",
        "description": "",
        "security": [{ "token": ["dlqs:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "blueprint": { "type": "string" }, "failer": { "type": "integer" } } },
              "example": {
                "blueprint": "{\"name\":\"Integration of failing scenario\",\"flow\":[{\"id\":1,\"module\":\"http:ActionSendData\",\"version\":3,\"parameters\":{\"handleErrors\":false},\"mapper\":{\"ca\":\"\",\"qs\":[],\"url\":\"https://local.integromat.cloud/api/not-existing-page\",\"gzip\":true,\"method\":\"get\",\"headers\":[],\"timeout\":\"\",\"authPass\":\"\",\"authUser\":\"\",\"bodyType\":\"\",\"shareCookies\":false,\"parseResponse\":false,\"followRedirect\":true,\"useQuerystring\":false,\"rejectUnauthorized\":true},\"metadata\":{\"designer\":{\"x\":0,\"y\":0},\"restore\":{\"qs\":{\"mode\":\"chose\",\"items\":[]},\"method\":{\"mode\":\"chose\",\"label\":\"GET\"},\"headers\":{\"mode\":\"chose\",\"items\":[]},\"bodyType\":{\"label\":\"\"}},\"parameters\":[{\"name\":\"handleErrors\",\"type\":\"boolean\",\"label\":\"Evaluate all states as errors (except for 2xx and 3xx )\",\"required\":true}],\"expect\":[{\"name\":\"url\",\"type\":\"url\",\"label\":\"URL\",\"required\":true},{\"name\":\"method\",\"type\":\"select\",\"label\":\"Method\",\"required\":true,\"validate\":{\"enum\":[\"get\",\"head\",\"post\",\"put\",\"patch\",\"delete\"]}},{\"name\":\"headers\",\"spec\":[{\"name\":\"name\",\"type\":\"text\",\"label\":\"Name\",\"required\":true},{\"name\":\"value\",\"type\":\"text\",\"label\":\"Value\"}],\"type\":\"array\",\"label\":\"Headers\",\"labels\":{\"add\":\"Add a header\",\"edit\":\"Edit a header\"}},{\"name\":\"qs\",\"spec\":[{\"name\":\"name\",\"type\":\"text\",\"label\":\"Name\",\"required\":true},{\"name\":\"value\",\"type\":\"text\",\"label\":\"Value\"}],\"type\":\"array\",\"label\":\"Query String\",\"labels\":{\"add\":\"Add parameter\",\"edit\":\"Edit parameter\"}},{\"name\":\"bodyType\",\"type\":\"select\",\"label\":\"Body type\",\"validate\":{\"enum\":[\"raw\",\"x_www_form_urlencoded\",\"multipart_form_data\"]}},{\"name\":\"parseResponse\",\"type\":\"boolean\",\"label\":\"Parse response\",\"required\":true},{\"name\":\"authUser\",\"type\":\"text\",\"label\":\"User name\"},{\"name\":\"authPass\",\"type\":\"password\",\"label\":\"Password\"},{\"name\":\"timeout\",\"type\":\"uinteger\",\"label\":\"Timeout\",\"validate\":{\"max\":300,\"min\":1}},{\"name\":\"shareCookies\",\"type\":\"boolean\",\"label\":\"Share cookies with other HTTP modules\",\"required\":true},{\"name\":\"ca\",\"type\":\"cert\",\"label\":\"Self-signed certificate\",\"multiline\":true},{\"name\":\"rejectUnauthorized\",\"type\":\"boolean\",\"label\":\"Reject connections that are using unverified (self-signed) certificates\",\"required\":true},{\"name\":\"followRedirect\",\"type\":\"boolean\",\"label\":\"Follow redirect\",\"required\":true},{\"name\":\"useQuerystring\",\"type\":\"boolean\",\"label\":\"Disable serialization of multiple same query string keys as arrays\",\"required\":true},{\"name\":\"gzip\",\"type\":\"boolean\",\"label\":\"Request compressed content\",\"required\":true}]},\"onerror\":[{\"id\":2,\"module\":\"builtin:Break\",\"version\":1,\"parameters\":{},\"mapper\":{\"count\":\"3\",\"retry\":true,\"interval\":\"1\"},\"metadata\":{\"designer\":{\"x\":300,\"y\":0},\"restore\":{\"retry\":{\"mode\":\"chose\"}},\"expect\":[{\"name\":\"retry\",\"type\":\"boolean\",\"label\":\"Automatically complete execution\",\"required\":true},{\"name\":\"count\",\"type\":\"uinteger\",\"label\":\"Number of attempts\",\"required\":true},{\"name\":\"interval\",\"type\":\"uinteger\",\"label\":\"Interval between attempts\",\"required\":true}]}}]}],\"metadata\":{\"version\":1,\"scenario\":{\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"roundtrips\":1,\"maxErrors\":3}}}",
                "failer": 1
              }
            }
          }
        },
        "parameters": [{ "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dlq": {
                      "type": "object",
                      "properties": {
                        "failer": { "type": "integer" },
                        "blueprint": {
                          "type": "object",
                          "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                          "properties": {
                            "flow": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "mapper": {
                                    "type": "object",
                                    "properties": {
                                      "ca": { "type": "string" },
                                      "qs": { "type": "array" },
                                      "url": { "type": "string", "format": "uri" },
                                      "gzip": { "type": "boolean" },
                                      "method": { "type": "string" },
                                      "headers": { "type": "array" },
                                      "timeout": { "type": "string" },
                                      "authPass": { "type": "string" },
                                      "authUser": { "type": "string" },
                                      "bodyType": { "type": "string" },
                                      "shareCookies": { "type": "boolean" },
                                      "parseResponse": { "type": "boolean" },
                                      "followRedirect": { "type": "boolean" },
                                      "useQuerystring": { "type": "boolean" },
                                      "rejectUnauthorized": { "type": "boolean" }
                                    }
                                  },
                                  "module": { "type": "string", "format": "uri" },
                                  "onerror": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "integer" },
                                        "mapper": {
                                          "type": "object",
                                          "properties": {
                                            "count": { "type": "string", "format": "utc-millisec" },
                                            "retry": { "type": "boolean" },
                                            "interval": { "type": "string", "format": "utc-millisec" }
                                          }
                                        },
                                        "module": { "type": "string", "format": "uri" },
                                        "version": { "type": "integer" },
                                        "metadata": {
                                          "type": "object",
                                          "properties": {
                                            "expect": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": { "type": "string" },
                                                  "type": { "type": "string" },
                                                  "label": { "type": "string" },
                                                  "required": { "type": "boolean" }
                                                }
                                              }
                                            },
                                            "restore": {
                                              "type": "object",
                                              "properties": {
                                                "retry": { "type": "object", "properties": { "mode": { "type": "string" } } }
                                              }
                                            },
                                            "designer": {
                                              "type": "object",
                                              "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                            }
                                          }
                                        },
                                        "parameters": { "type": "object" }
                                      }
                                    }
                                  },
                                  "version": { "type": "integer" },
                                  "metadata": {
                                    "type": "object",
                                    "properties": {
                                      "expect": { "type": "array", "items": { "type": "object" } },
                                      "restore": {
                                        "type": "object",
                                        "properties": {
                                          "qs": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "method": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                        }
                                      },
                                      "designer": {
                                        "type": "object",
                                        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                      },
                                      "parameters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "type": { "type": "string" },
                                            "label": { "type": "string" },
                                            "required": { "type": "boolean" }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                                }
                              }
                            },
                            "name": { "type": "string" },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "version": { "type": "integer" },
                                "scenario": {
                                  "type": "object",
                                  "properties": {
                                    "maxErrors": { "type": "integer" },
                                    "autoCommit": { "type": "boolean" },
                                    "roundtrips": { "type": "integer" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "dlq": {
                    "failer": 1,
                    "blueprint": {
                      "flow": [
                        {
                          "id": 1,
                          "mapper": {
                            "ca": "",
                            "qs": [],
                            "url": "https://local.integromat.cloud/api/not-existing-page",
                            "gzip": true,
                            "method": "get",
                            "headers": [],
                            "timeout": "",
                            "authPass": "",
                            "authUser": "",
                            "bodyType": "",
                            "shareCookies": false,
                            "parseResponse": false,
                            "followRedirect": true,
                            "useQuerystring": false,
                            "rejectUnauthorized": true
                          },
                          "module": "http:ActionSendData",
                          "onerror": [
                            {
                              "id": 2,
                              "mapper": { "count": "3", "retry": true, "interval": "1" },
                              "module": "builtin:Break",
                              "version": 1,
                              "metadata": {
                                "expect": [
                                  { "name": "retry", "type": "boolean", "label": "Automatically complete execution", "required": true },
                                  { "name": "count", "type": "uinteger", "label": "Number of attempts", "required": true },
                                  { "name": "interval", "type": "uinteger", "label": "Interval between attempts", "required": true }
                                ],
                                "restore": { "retry": { "mode": "chose" } },
                                "designer": { "x": 300, "y": 0 }
                              },
                              "parameters": {}
                            }
                          ],
                          "version": 3,
                          "metadata": {
                            "expect": [
                              { "name": "url", "type": "url", "label": "URL", "required": true },
                              {
                                "name": "method",
                                "type": "select",
                                "label": "Method",
                                "required": true,
                                "validate": { "enum": ["get", "head", "post", "put", "patch", "delete"] }
                              },
                              {
                                "name": "headers",
                                "spec": [
                                  { "name": "name", "type": "text", "label": "Name", "required": true },
                                  { "name": "value", "type": "text", "label": "Value" }
                                ],
                                "type": "array",
                                "label": "Headers",
                                "labels": { "add": "Add a header", "edit": "Edit a header" }
                              },
                              {
                                "name": "qs",
                                "spec": [
                                  { "name": "name", "type": "text", "label": "Name", "required": true },
                                  { "name": "value", "type": "text", "label": "Value" }
                                ],
                                "type": "array",
                                "label": "Query String",
                                "labels": { "add": "Add parameter", "edit": "Edit parameter" }
                              },
                              {
                                "name": "bodyType",
                                "type": "select",
                                "label": "Body type",
                                "validate": { "enum": ["raw", "x_www_form_urlencoded", "multipart_form_data"] }
                              },
                              { "name": "parseResponse", "type": "boolean", "label": "Parse response", "required": true },
                              { "name": "authUser", "type": "text", "label": "User name" },
                              { "name": "authPass", "type": "password", "label": "Password" },
                              { "name": "timeout", "type": "uinteger", "label": "Timeout", "validate": { "max": 300, "min": 1 } },
                              {
                                "name": "shareCookies",
                                "type": "boolean",
                                "label": "Share cookies with other HTTP modules",
                                "required": true
                              },
                              { "name": "ca", "type": "cert", "label": "Self-signed certificate", "multiline": true },
                              {
                                "name": "rejectUnauthorized",
                                "type": "boolean",
                                "label": "Reject connections that are using unverified (self-signed) certificates",
                                "required": true
                              },
                              { "name": "followRedirect", "type": "boolean", "label": "Follow redirect", "required": true },
                              {
                                "name": "useQuerystring",
                                "type": "boolean",
                                "label": "Disable serialization of multiple same query string keys as arrays",
                                "required": true
                              },
                              { "name": "gzip", "type": "boolean", "label": "Request compressed content", "required": true }
                            ],
                            "restore": {
                              "qs": { "mode": "chose", "items": [] },
                              "method": { "mode": "chose", "label": "GET" },
                              "headers": { "mode": "chose", "items": [] },
                              "bodyType": { "label": "" }
                            },
                            "designer": { "x": 0, "y": 0 },
                            "parameters": [
                              {
                                "name": "handleErrors",
                                "type": "boolean",
                                "label": "Evaluate all states as errors (except for 2xx and 3xx )",
                                "required": true
                              }
                            ]
                          },
                          "parameters": { "handleErrors": false }
                        }
                      ],
                      "name": "Integration of failing scenario",
                      "metadata": { "version": 1, "scenario": { "maxErrors": 3, "autoCommit": true, "roundtrips": 1 } }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Incomplete executions"],
        "summary": "Delete - deprecated",
        "deprecated": true,
        "description": "Required scope: datastores:write",
        "security": [{ "token": ["dlqs:write"] }],
        "parameters": [{ "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "dlq": { "type": "string" } } },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": { "dlq": "ada87173334b44d1907270064edbd7dd" },
                    "originalRequest": {
                      "parameters": [
                        { "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dlqs/{dlqId}/blueprint": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "Blueprint",
        "description": "",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [{ "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "string" },
                    "response": {
                      "type": "object",
                      "properties": {
                        "blueprint": {
                          "type": "object",
                          "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                          "properties": {
                            "flow": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "mapper": {
                                    "type": "object",
                                    "properties": {
                                      "ca": { "type": "string" },
                                      "qs": { "type": "array" },
                                      "url": { "type": "string", "format": "uri" },
                                      "gzip": { "type": "boolean" },
                                      "method": { "type": "string" },
                                      "headers": { "type": "array" },
                                      "timeout": { "type": "string" },
                                      "authPass": { "type": "string" },
                                      "authUser": { "type": "string" },
                                      "bodyType": { "type": "string" },
                                      "shareCookies": { "type": "boolean" },
                                      "parseResponse": { "type": "boolean" },
                                      "followRedirect": { "type": "boolean" },
                                      "useQuerystring": { "type": "boolean" },
                                      "rejectUnauthorized": { "type": "boolean" }
                                    }
                                  },
                                  "module": { "type": "string", "format": "uri" },
                                  "onerror": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "integer" },
                                        "mapper": {
                                          "type": "object",
                                          "properties": {
                                            "count": { "type": "string", "format": "utc-millisec" },
                                            "retry": { "type": "boolean" },
                                            "interval": { "type": "string", "format": "utc-millisec" }
                                          }
                                        },
                                        "module": { "type": "string", "format": "uri" },
                                        "version": { "type": "integer" },
                                        "metadata": {
                                          "type": "object",
                                          "properties": {
                                            "expect": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": { "type": "string" },
                                                  "type": { "type": "string" },
                                                  "label": { "type": "string" },
                                                  "required": { "type": "boolean" }
                                                }
                                              }
                                            },
                                            "restore": {
                                              "type": "object",
                                              "properties": {
                                                "retry": { "type": "object", "properties": { "mode": { "type": "string" } } }
                                              }
                                            },
                                            "designer": {
                                              "type": "object",
                                              "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                            }
                                          }
                                        },
                                        "parameters": { "type": "object" }
                                      }
                                    }
                                  },
                                  "version": { "type": "integer" },
                                  "metadata": {
                                    "type": "object",
                                    "properties": {
                                      "expect": { "type": "array", "items": { "type": "object" } },
                                      "restore": {
                                        "type": "object",
                                        "properties": {
                                          "qs": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "method": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                        }
                                      },
                                      "designer": {
                                        "type": "object",
                                        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                      },
                                      "parameters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "type": { "type": "string" },
                                            "label": { "type": "string" },
                                            "required": { "type": "boolean" }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                                }
                              }
                            },
                            "name": { "type": "string" },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "version": { "type": "integer" },
                                "scenario": {
                                  "type": "object",
                                  "properties": {
                                    "maxErrors": { "type": "integer" },
                                    "autoCommit": { "type": "boolean" },
                                    "roundtrips": { "type": "integer" }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "company": { "type": "integer" },
                        "idSequence": { "type": "integer" },
                        "reason": { "type": "string" }
                      }
                    }
                  }
                },
                "example": {
                  "code": "OK",
                  "response": {
                    "blueprint": {
                      "flow": [
                        {
                          "id": 1,
                          "mapper": {
                            "ca": "",
                            "qs": [],
                            "url": "https://local.integromat.cloud/api/not-existing-page",
                            "gzip": true,
                            "method": "get",
                            "headers": [],
                            "timeout": "",
                            "authPass": "",
                            "authUser": "",
                            "bodyType": "",
                            "shareCookies": false,
                            "parseResponse": false,
                            "followRedirect": true,
                            "useQuerystring": false,
                            "rejectUnauthorized": true
                          },
                          "module": "http:ActionSendData",
                          "onerror": [
                            {
                              "id": 2,
                              "mapper": { "count": "3", "retry": true, "interval": "1" },
                              "module": "builtin:Break",
                              "version": 1,
                              "metadata": {
                                "expect": [
                                  { "name": "retry", "type": "boolean", "label": "Automatically complete execution", "required": true },
                                  { "name": "count", "type": "uinteger", "label": "Number of attempts", "required": true },
                                  { "name": "interval", "type": "uinteger", "label": "Interval between attempts", "required": true }
                                ],
                                "restore": { "retry": { "mode": "chose" } },
                                "designer": { "x": 300, "y": 0 }
                              },
                              "parameters": {}
                            }
                          ],
                          "version": 3,
                          "metadata": {
                            "expect": [
                              { "name": "url", "type": "url", "label": "URL", "required": true },
                              {
                                "name": "method",
                                "type": "select",
                                "label": "Method",
                                "required": true,
                                "validate": { "enum": ["get", "head", "post", "put", "patch", "delete"] }
                              },
                              {
                                "name": "headers",
                                "spec": [
                                  { "name": "name", "type": "text", "label": "Name", "required": true },
                                  { "name": "value", "type": "text", "label": "Value" }
                                ],
                                "type": "array",
                                "label": "Headers",
                                "labels": { "add": "Add a header", "edit": "Edit a header" }
                              },
                              {
                                "name": "qs",
                                "spec": [
                                  { "name": "name", "type": "text", "label": "Name", "required": true },
                                  { "name": "value", "type": "text", "label": "Value" }
                                ],
                                "type": "array",
                                "label": "Query String",
                                "labels": { "add": "Add parameter", "edit": "Edit parameter" }
                              },
                              {
                                "name": "bodyType",
                                "type": "select",
                                "label": "Body type",
                                "validate": { "enum": ["raw", "x_www_form_urlencoded", "multipart_form_data"] }
                              },
                              { "name": "parseResponse", "type": "boolean", "label": "Parse response", "required": true },
                              { "name": "authUser", "type": "text", "label": "User name" },
                              { "name": "authPass", "type": "password", "label": "Password" },
                              { "name": "timeout", "type": "uinteger", "label": "Timeout", "validate": { "max": 300, "min": 1 } },
                              {
                                "name": "shareCookies",
                                "type": "boolean",
                                "label": "Share cookies with other HTTP modules",
                                "required": true
                              },
                              { "name": "ca", "type": "cert", "label": "Self-signed certificate", "multiline": true },
                              {
                                "name": "rejectUnauthorized",
                                "type": "boolean",
                                "label": "Reject connections that are using unverified (self-signed) certificates",
                                "required": true
                              },
                              { "name": "followRedirect", "type": "boolean", "label": "Follow redirect", "required": true },
                              {
                                "name": "useQuerystring",
                                "type": "boolean",
                                "label": "Disable serialization of multiple same query string keys as arrays",
                                "required": true
                              },
                              { "name": "gzip", "type": "boolean", "label": "Request compressed content", "required": true }
                            ],
                            "restore": {
                              "qs": { "mode": "chose", "items": [] },
                              "method": { "mode": "chose", "label": "GET" },
                              "headers": { "mode": "chose", "items": [] },
                              "bodyType": { "label": "" }
                            },
                            "designer": { "x": 0, "y": 0 },
                            "parameters": [
                              {
                                "name": "handleErrors",
                                "type": "boolean",
                                "label": "Evaluate all states as errors (except for 2xx and 3xx )",
                                "required": true
                              }
                            ]
                          },
                          "parameters": { "handleErrors": false }
                        }
                      ],
                      "name": "Integration of failing scenario",
                      "metadata": { "user": { "id": 1 }, "version": 1, "scenario": { "maxErrors": 3, "autoCommit": true, "roundtrips": 1 } }
                    },
                    "company": 1,
                    "idSequence": 3,
                    "reason": "IP address is not valid."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dlqs/{dlqId}/bundle": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "Bundle",
        "description": "",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [{ "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "code": { "type": "string" }, "response": { "type": "object" } } },
                "example": {
                  "code": "OK",
                  "response": {
                    "1": { "error": { "type": "InvalidConfigurationError", "message": "IP address is not valid." } },
                    "3": { "value": "bla bladlas\ndlasd" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dlqs/{dlqId}/logs": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "List logs",
        "description": "allowed sort by columns: imtId<br />",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [
          { "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "status", "in": "query", "schema": { "type": "integer", "enum": [1, 2, 3] }, "description": "", "example": 3 },
          { "name": "from", "in": "query", "schema": { "type": "integer", "format": "timestamp" }, "example": "1548975600000" },
          { "name": "to", "in": "query", "schema": { "type": "integer", "format": "timestamp" }, "example": "1574782119387" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dlqLogs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "imtId": { "type": "string" },
                          "duration": { "type": "integer" },
                          "transfer": { "type": "integer" },
                          "operations": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "id": { "type": "string" },
                          "type": { "type": "string" },
                          "authorId": { "type": "string" },
                          "timestamp": { "type": "string", "format": "date-time" },
                          "status": { "type": "integer" },
                          "instant": { "type": "boolean" },
                          "organizationId": { "type": "integer" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "dlqLogs": [
                    {
                      "imtId": "1574777797796_dlq.a07e16f2ad134bf49cf83a00aa95c0a5.manual.f241ee9b0d344964a5ce54356b9ed98e",
                      "duration": 728,
                      "transfer": 0,
                      "operations": 1,
                      "teamId": 1,
                      "id": "f241ee9b0d344964a5ce54356b9ed98e",
                      "type": "manual",
                      "authorId": null,
                      "timestamp": "2019-11-26T14:16:37.796Z",
                      "status": 3
                    },
                    {
                      "imtId": "1574777795371_dlq.a07e16f2ad134bf49cf83a00aa95c0a5.manual.7f65bad83eb74c899a70c76794d8afc3",
                      "duration": 795,
                      "transfer": 0,
                      "operations": 1,
                      "teamId": 1,
                      "id": "7f65bad83eb74c899a70c76794d8afc3",
                      "type": "manual",
                      "authorId": null,
                      "timestamp": "2019-11-26T14:16:35.371Z",
                      "status": 3
                    }
                  ],
                  "pg": { "sortBy": "imtId", "sortDir": "desc", "limit": 50, "offset": 0 }
                }
              }
            }
          }
        }
      }
    },
    "/dlqs/{dlqId}/logs/{executionDlqId}": {
      "get": {
        "tags": ["Incomplete executions"],
        "summary": "Execution log",
        "description": "allowed sort by columns: imtId",
        "security": [{ "token": ["dlqs:read"] }],
        "parameters": [
          { "name": "dlqId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "executionDlqId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dlqLog": {
                      "type": "object",
                      "properties": {
                        "imtId": { "type": "string" },
                        "duration": { "type": "integer" },
                        "transfer": { "type": "integer" },
                        "operations": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "id": { "type": "string" },
                        "type": { "type": "string" },
                        "authorId": { "type": "string" },
                        "timestamp": { "type": "string", "format": "date-time" },
                        "status": { "type": "integer" },
                        "instant": { "type": "boolean" },
                        "organizationId": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "dlqLog": {
                    "imtId": "1594117724361_dlq.00946714d6dd4a4cb091fe5435a8d197.manual.28a4794e85894c80a483777d6958160f",
                    "duration": 1353,
                    "operations": 1,
                    "transfer": 87,
                    "organizationId": 1,
                    "teamId": 1,
                    "id": "28a4794e85894c80a483777d6958160f",
                    "type": "manual",
                    "authorId": null,
                    "instant": false,
                    "timestamp": "2020-07-07T10:28:44.361Z",
                    "status": 3
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enums/module-types": {
      "get": {
        "tags": ["Enums"],
        "summary": "Module Types",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "moduleTypes": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "moduleTypes": [
                    { "id": 2, "name": "transformer" },
                    { "id": 3, "name": "router" },
                    { "id": 5, "name": "listener" },
                    { "id": 6, "name": "feeder" },
                    { "id": 7, "name": "aggregator" },
                    { "id": 8, "name": "directive" },
                    { "id": 1, "name": "trigger" },
                    { "id": 4, "name": "action" },
                    { "id": 9, "name": "search" },
                    { "id": 10, "name": "instant" },
                    { "id": 11, "name": "responder" },
                    { "id": 12, "name": "universal" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/timezones": {
      "get": {
        "tags": ["Enums"],
        "summary": "Timezones",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timezones": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "code": { "type": "string" },
                          "offset": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "timezones": [
                    { "id": 226, "name": "(GMT-11:00) Pacific/Niue", "code": "Pacific/Niue", "offset": "-1100" },
                    { "id": 27, "name": "(GMT-11:00) Pacific/Pago_Pago", "code": "Pacific/Pago_Pago", "offset": "-1100" },
                    { "id": 328, "name": "(GMT-10:00) America/Adak", "code": "America/Adak", "offset": "-1000" },
                    { "id": 329, "name": "(GMT-10:00) Pacific/Honolulu", "code": "Pacific/Honolulu", "offset": "-1000" },
                    { "id": 101, "name": "(GMT-10:00) Pacific/Rarotonga", "code": "Pacific/Rarotonga", "offset": "-1000" },
                    { "id": 231, "name": "(GMT-10:00) Pacific/Tahiti", "code": "Pacific/Tahiti", "offset": "-1000" },
                    { "id": 232, "name": "(GMT-09:30) Pacific/Marquesas", "code": "Pacific/Marquesas", "offset": "-0930" },
                    { "id": 323, "name": "(GMT-09:00) America/Anchorage", "code": "America/Anchorage", "offset": "-0900" },
                    { "id": 324, "name": "(GMT-09:00) America/Juneau", "code": "America/Juneau", "offset": "-0900" },
                    { "id": 327, "name": "(GMT-09:00) America/Nome", "code": "America/Nome", "offset": "-0900" },
                    { "id": 325, "name": "(GMT-09:00) America/Sitka", "code": "America/Sitka", "offset": "-0900" },
                    { "id": 326, "name": "(GMT-09:00) America/Yakutat", "code": "America/Yakutat", "offset": "-0900" },
                    { "id": 233, "name": "(GMT-09:00) Pacific/Gambier", "code": "Pacific/Gambier", "offset": "-0900" },
                    { "id": 97, "name": "(GMT-08:00) America/Dawson", "code": "America/Dawson", "offset": "-0800" },
                    { "id": 321, "name": "(GMT-08:00) America/Los_Angeles", "code": "America/Los_Angeles", "offset": "-0800" },
                    { "id": 322, "name": "(GMT-08:00) America/Metlakatla", "code": "America/Metlakatla", "offset": "-0800" },
                    { "id": 212, "name": "(GMT-08:00) America/Santa_Isabel", "code": "America/Santa_Isabel", "offset": "-0800" },
                    { "id": 211, "name": "(GMT-08:00) America/Tijuana", "code": "America/Tijuana", "offset": "-0800" },
                    { "id": 95, "name": "(GMT-08:00) America/Vancouver", "code": "America/Vancouver", "offset": "-0800" },
                    { "id": 96, "name": "(GMT-08:00) America/Whitehorse", "code": "America/Whitehorse", "offset": "-0800" },
                    { "id": 240, "name": "(GMT-08:00) Pacific/Pitcairn", "code": "Pacific/Pitcairn", "offset": "-0800" },
                    { "id": 319, "name": "(GMT-07:00) America/Boise", "code": "America/Boise", "offset": "-0700" },
                    { "id": 89, "name": "(GMT-07:00) America/Cambridge_Bay", "code": "America/Cambridge_Bay", "offset": "-0700" },
                    { "id": 208, "name": "(GMT-07:00) America/Chihuahua", "code": "America/Chihuahua", "offset": "-0700" },
                    { "id": 92, "name": "(GMT-07:00) America/Creston", "code": "America/Creston", "offset": "-0700" },
                    { "id": 93, "name": "(GMT-07:00) America/Dawson_Creek", "code": "America/Dawson_Creek", "offset": "-0700" },
                    { "id": 318, "name": "(GMT-07:00) America/Denver", "code": "America/Denver", "offset": "-0700" },
                    { "id": 88, "name": "(GMT-07:00) America/Edmonton", "code": "America/Edmonton", "offset": "-0700" },
                    { "id": 94, "name": "(GMT-07:00) America/Fort_Nelson", "code": "America/Fort_Nelson", "offset": "-0700" },
                    { "id": 210, "name": "(GMT-07:00) America/Hermosillo", "code": "America/Hermosillo", "offset": "-0700" },
                    { "id": 91, "name": "(GMT-07:00) America/Inuvik", "code": "America/Inuvik", "offset": "-0700" },
                    { "id": 207, "name": "(GMT-07:00) America/Mazatlan", "code": "America/Mazatlan", "offset": "-0700" },
                    { "id": 209, "name": "(GMT-07:00) America/Ojinaga", "code": "America/Ojinaga", "offset": "-0700" },
                    { "id": 320, "name": "(GMT-07:00) America/Phoenix", "code": "America/Phoenix", "offset": "-0700" },
                    { "id": 90, "name": "(GMT-07:00) America/Yellowknife", "code": "America/Yellowknife", "offset": "-0700" },
                    { "id": 213, "name": "(GMT-06:00) America/Bahia_Banderas", "code": "America/Bahia_Banderas", "offset": "-0600" },
                    { "id": 69, "name": "(GMT-06:00) America/Belize", "code": "America/Belize", "offset": "-0600" },
                    { "id": 203, "name": "(GMT-06:00) America/Cancun", "code": "America/Cancun", "offset": "-0600" },
                    { "id": 311, "name": "(GMT-06:00) America/Chicago", "code": "America/Chicago", "offset": "-0600" },
                    { "id": 107, "name": "(GMT-06:00) America/Costa_Rica", "code": "America/Costa_Rica", "offset": "-0600" },
                    { "id": 281, "name": "(GMT-06:00) America/El_Salvador", "code": "America/El_Salvador", "offset": "-0600" },
                    { "id": 145, "name": "(GMT-06:00) America/Guatemala", "code": "America/Guatemala", "offset": "-0600" },
                    { "id": 313, "name": "(GMT-06:00) America/Indiana/Knox", "code": "America/Indiana/Knox", "offset": "-0600" },
                    { "id": 312, "name": "(GMT-06:00) America/Indiana/Tell_City", "code": "America/Indiana/Tell_City", "offset": "-0600" },
                    { "id": 221, "name": "(GMT-06:00) America/Managua", "code": "America/Managua", "offset": "-0600" },
                    { "id": 206, "name": "(GMT-06:00) America/Matamoros", "code": "America/Matamoros", "offset": "-0600" },
                    { "id": 314, "name": "(GMT-06:00) America/Menominee", "code": "America/Menominee", "offset": "-0600" },
                    { "id": 204, "name": "(GMT-06:00) America/Merida", "code": "America/Merida", "offset": "-0600" },
                    { "id": 202, "name": "(GMT-06:00) America/Mexico_City", "code": "America/Mexico_City", "offset": "-0600" },
                    { "id": 205, "name": "(GMT-06:00) America/Monterrey", "code": "America/Monterrey", "offset": "-0600" },
                    {
                      "id": 317,
                      "name": "(GMT-06:00) America/North_Dakota/Beulah",
                      "code": "America/North_Dakota/Beulah",
                      "offset": "-0600"
                    },
                    {
                      "id": 315,
                      "name": "(GMT-06:00) America/North_Dakota/Center",
                      "code": "America/North_Dakota/Center",
                      "offset": "-0600"
                    },
                    {
                      "id": 316,
                      "name": "(GMT-06:00) America/North_Dakota/New_Salem",
                      "code": "America/North_Dakota/New_Salem",
                      "offset": "-0600"
                    },
                    { "id": 85, "name": "(GMT-06:00) America/Rainy_River", "code": "America/Rainy_River", "offset": "-0600" },
                    { "id": 83, "name": "(GMT-06:00) America/Rankin_Inlet", "code": "America/Rankin_Inlet", "offset": "-0600" },
                    { "id": 86, "name": "(GMT-06:00) America/Regina", "code": "America/Regina", "offset": "-0600" },
                    { "id": 81, "name": "(GMT-06:00) America/Resolute", "code": "America/Resolute", "offset": "-0600" },
                    { "id": 87, "name": "(GMT-06:00) America/Swift_Current", "code": "America/Swift_Current", "offset": "-0600" },
                    { "id": 150, "name": "(GMT-06:00) America/Tegucigalpa", "code": "America/Tegucigalpa", "offset": "-0600" },
                    { "id": 84, "name": "(GMT-06:00) America/Winnipeg", "code": "America/Winnipeg", "offset": "-0600" },
                    { "id": 103, "name": "(GMT-06:00) Pacific/Easter", "code": "Pacific/Easter", "offset": "-0600" },
                    { "id": 119, "name": "(GMT-06:00) Pacific/Galapagos", "code": "Pacific/Galapagos", "offset": "-0600" },
                    { "id": 82, "name": "(GMT-05:00) America/Atikokan", "code": "America/Atikokan", "offset": "-0500" },
                    { "id": 106, "name": "(GMT-05:00) America/Bogota", "code": "America/Bogota", "offset": "-0500" },
                    { "id": 175, "name": "(GMT-05:00) America/Cayman", "code": "America/Cayman", "offset": "-0500" },
                    { "id": 302, "name": "(GMT-05:00) America/Detroit", "code": "America/Detroit", "offset": "-0500" },
                    { "id": 64, "name": "(GMT-05:00) America/Eirunepe", "code": "America/Eirunepe", "offset": "-0500" },
                    { "id": 283, "name": "(GMT-05:00) America/Grand_Turk", "code": "America/Grand_Turk", "offset": "-0500" },
                    { "id": 118, "name": "(GMT-05:00) America/Guayaquil", "code": "America/Guayaquil", "offset": "-0500" },
                    { "id": 108, "name": "(GMT-05:00) America/Havana", "code": "America/Havana", "offset": "-0500" },
                    {
                      "id": 305,
                      "name": "(GMT-05:00) America/Indiana/Indianapolis",
                      "code": "America/Indiana/Indianapolis",
                      "offset": "-0500"
                    },
                    { "id": 308, "name": "(GMT-05:00) America/Indiana/Marengo", "code": "America/Indiana/Marengo", "offset": "-0500" },
                    {
                      "id": 309,
                      "name": "(GMT-05:00) America/Indiana/Petersburg",
                      "code": "America/Indiana/Petersburg",
                      "offset": "-0500"
                    },
                    { "id": 310, "name": "(GMT-05:00) America/Indiana/Vevay", "code": "America/Indiana/Vevay", "offset": "-0500" },
                    { "id": 306, "name": "(GMT-05:00) America/Indiana/Vincennes", "code": "America/Indiana/Vincennes", "offset": "-0500" },
                    { "id": 307, "name": "(GMT-05:00) America/Indiana/Winamac", "code": "America/Indiana/Winamac", "offset": "-0500" },
                    { "id": 79, "name": "(GMT-05:00) America/Iqaluit", "code": "America/Iqaluit", "offset": "-0500" },
                    { "id": 165, "name": "(GMT-05:00) America/Jamaica", "code": "America/Jamaica", "offset": "-0500" },
                    {
                      "id": 303,
                      "name": "(GMT-05:00) America/Kentucky/Louisville",
                      "code": "America/Kentucky/Louisville",
                      "offset": "-0500"
                    },
                    {
                      "id": 304,
                      "name": "(GMT-05:00) America/Kentucky/Monticello",
                      "code": "America/Kentucky/Monticello",
                      "offset": "-0500"
                    },
                    { "id": 230, "name": "(GMT-05:00) America/Lima", "code": "America/Lima", "offset": "-0500" },
                    { "id": 66, "name": "(GMT-05:00) America/Nassau", "code": "America/Nassau", "offset": "-0500" },
                    { "id": 301, "name": "(GMT-05:00) America/New_York", "code": "America/New_York", "offset": "-0500" },
                    { "id": 77, "name": "(GMT-05:00) America/Nipigon", "code": "America/Nipigon", "offset": "-0500" },
                    { "id": 229, "name": "(GMT-05:00) America/Panama", "code": "America/Panama", "offset": "-0500" },
                    { "id": 80, "name": "(GMT-05:00) America/Pangnirtung", "code": "America/Pangnirtung", "offset": "-0500" },
                    { "id": 151, "name": "(GMT-05:00) America/Port-au-Prince", "code": "America/Port-au-Prince", "offset": "-0500" },
                    { "id": 65, "name": "(GMT-05:00) America/Rio_Branco", "code": "America/Rio_Branco", "offset": "-0500" },
                    { "id": 78, "name": "(GMT-05:00) America/Thunder_Bay", "code": "America/Thunder_Bay", "offset": "-0500" },
                    { "id": 76, "name": "(GMT-05:00) America/Toronto", "code": "America/Toronto", "offset": "-0500" },
                    { "id": 333, "name": "(GMT-04:30) America/Caracas", "code": "America/Caracas", "offset": "-0430" },
                    { "id": 248, "name": "(GMT-04:00) America/Asuncion", "code": "America/Asuncion", "offset": "-0400" },
                    { "id": 43, "name": "(GMT-04:00) America/Barbados", "code": "America/Barbados", "offset": "-0400" },
                    { "id": 75, "name": "(GMT-04:00) America/Blanc-Sablon", "code": "America/Blanc-Sablon", "offset": "-0400" },
                    { "id": 62, "name": "(GMT-04:00) America/Boa_Vista", "code": "America/Boa_Vista", "offset": "-0400" },
                    { "id": 58, "name": "(GMT-04:00) America/Campo_Grande", "code": "America/Campo_Grande", "offset": "-0400" },
                    { "id": 59, "name": "(GMT-04:00) America/Cuiaba", "code": "America/Cuiaba", "offset": "-0400" },
                    { "id": 110, "name": "(GMT-04:00) America/Curacao", "code": "America/Curacao", "offset": "-0400" },
                    { "id": 72, "name": "(GMT-04:00) America/Glace_Bay", "code": "America/Glace_Bay", "offset": "-0400" },
                    { "id": 74, "name": "(GMT-04:00) America/Goose_Bay", "code": "America/Goose_Bay", "offset": "-0400" },
                    { "id": 148, "name": "(GMT-04:00) America/Guyana", "code": "America/Guyana", "offset": "-0400" },
                    { "id": 71, "name": "(GMT-04:00) America/Halifax", "code": "America/Halifax", "offset": "-0400" },
                    { "id": 49, "name": "(GMT-04:00) America/La_Paz", "code": "America/La_Paz", "offset": "-0400" },
                    { "id": 63, "name": "(GMT-04:00) America/Manaus", "code": "America/Manaus", "offset": "-0400" },
                    { "id": 198, "name": "(GMT-04:00) America/Martinique", "code": "America/Martinique", "offset": "-0400" },
                    { "id": 73, "name": "(GMT-04:00) America/Moncton", "code": "America/Moncton", "offset": "-0400" },
                    { "id": 294, "name": "(GMT-04:00) America/Port_of_Spain", "code": "America/Port_of_Spain", "offset": "-0400" },
                    { "id": 61, "name": "(GMT-04:00) America/Porto_Velho", "code": "America/Porto_Velho", "offset": "-0400" },
                    { "id": 241, "name": "(GMT-04:00) America/Puerto_Rico", "code": "America/Puerto_Rico", "offset": "-0400" },
                    { "id": 116, "name": "(GMT-04:00) America/Santo_Domingo", "code": "America/Santo_Domingo", "offset": "-0400" },
                    { "id": 142, "name": "(GMT-04:00) America/Thule", "code": "America/Thule", "offset": "-0400" },
                    { "id": 7, "name": "(GMT-04:00) Antarctica/Palmer", "code": "Antarctica/Palmer", "offset": "-0400" },
                    { "id": 47, "name": "(GMT-04:00) Atlantic/Bermuda", "code": "Atlantic/Bermuda", "offset": "-0400" },
                    { "id": 70, "name": "(GMT-03:30) America/St_Johns", "code": "America/St_Johns", "offset": "-0330" },
                    { "id": 54, "name": "(GMT-03:00) America/Araguaina", "code": "America/Araguaina", "offset": "-0300" },
                    {
                      "id": 15,
                      "name": "(GMT-03:00) America/Argentina/Buenos_Aires",
                      "code": "America/Argentina/Buenos_Aires",
                      "offset": "-0300"
                    },
                    {
                      "id": 20,
                      "name": "(GMT-03:00) America/Argentina/Catamarca",
                      "code": "America/Argentina/Catamarca",
                      "offset": "-0300"
                    },
                    { "id": 16, "name": "(GMT-03:00) America/Argentina/Cordoba", "code": "America/Argentina/Cordoba", "offset": "-0300" },
                    { "id": 18, "name": "(GMT-03:00) America/Argentina/Jujuy", "code": "America/Argentina/Jujuy", "offset": "-0300" },
                    { "id": 21, "name": "(GMT-03:00) America/Argentina/La_Rioja", "code": "America/Argentina/La_Rioja", "offset": "-0300" },
                    { "id": 23, "name": "(GMT-03:00) America/Argentina/Mendoza", "code": "America/Argentina/Mendoza", "offset": "-0300" },
                    {
                      "id": 25,
                      "name": "(GMT-03:00) America/Argentina/Rio_Gallegos",
                      "code": "America/Argentina/Rio_Gallegos",
                      "offset": "-0300"
                    },
                    { "id": 17, "name": "(GMT-03:00) America/Argentina/Salta", "code": "America/Argentina/Salta", "offset": "-0300" },
                    { "id": 22, "name": "(GMT-03:00) America/Argentina/San_Juan", "code": "America/Argentina/San_Juan", "offset": "-0300" },
                    { "id": 24, "name": "(GMT-03:00) America/Argentina/San_Luis", "code": "America/Argentina/San_Luis", "offset": "-0300" },
                    { "id": 19, "name": "(GMT-03:00) America/Argentina/Tucuman", "code": "America/Argentina/Tucuman", "offset": "-0300" },
                    { "id": 26, "name": "(GMT-03:00) America/Argentina/Ushuaia", "code": "America/Argentina/Ushuaia", "offset": "-0300" },
                    { "id": 56, "name": "(GMT-03:00) America/Bahia", "code": "America/Bahia", "offset": "-0300" },
                    { "id": 51, "name": "(GMT-03:00) America/Belem", "code": "America/Belem", "offset": "-0300" },
                    { "id": 136, "name": "(GMT-03:00) America/Cayenne", "code": "America/Cayenne", "offset": "-0300" },
                    { "id": 52, "name": "(GMT-03:00) America/Fortaleza", "code": "America/Fortaleza", "offset": "-0300" },
                    { "id": 139, "name": "(GMT-03:00) America/Godthab", "code": "America/Godthab", "offset": "-0300" },
                    { "id": 55, "name": "(GMT-03:00) America/Maceio", "code": "America/Maceio", "offset": "-0300" },
                    { "id": 239, "name": "(GMT-03:00) America/Miquelon", "code": "America/Miquelon", "offset": "-0300" },
                    { "id": 330, "name": "(GMT-03:00) America/Montevideo", "code": "America/Montevideo", "offset": "-0300" },
                    { "id": 280, "name": "(GMT-03:00) America/Paramaribo", "code": "America/Paramaribo", "offset": "-0300" },
                    { "id": 53, "name": "(GMT-03:00) America/Recife", "code": "America/Recife", "offset": "-0300" },
                    { "id": 60, "name": "(GMT-03:00) America/Santarem", "code": "America/Santarem", "offset": "-0300" },
                    { "id": 102, "name": "(GMT-03:00) America/Santiago", "code": "America/Santiago", "offset": "-0300" },
                    { "id": 57, "name": "(GMT-03:00) America/Sao_Paulo", "code": "America/Sao_Paulo", "offset": "-0300" },
                    { "id": 6, "name": "(GMT-03:00) Antarctica/Rothera", "code": "Antarctica/Rothera", "offset": "-0300" },
                    { "id": 128, "name": "(GMT-03:00) Atlantic/Stanley", "code": "Atlantic/Stanley", "offset": "-0300" },
                    { "id": 50, "name": "(GMT-02:00) America/Noronha", "code": "America/Noronha", "offset": "-0200" },
                    { "id": 144, "name": "(GMT-02:00) Atlantic/South_Georgia", "code": "Atlantic/South_Georgia", "offset": "-0200" },
                    { "id": 141, "name": "(GMT-01:00) America/Scoresbysund", "code": "America/Scoresbysund", "offset": "-0100" },
                    { "id": 246, "name": "(GMT-01:00) Atlantic/Azores", "code": "Atlantic/Azores", "offset": "-0100" },
                    { "id": 109, "name": "(GMT-01:00) Atlantic/Cape_Verde", "code": "Atlantic/Cape_Verde", "offset": "-0100" },
                    { "id": 100, "name": "(GMT+00:00) Africa/Abidjan", "code": "Africa/Abidjan", "offset": "+0000" },
                    { "id": 137, "name": "(GMT+00:00) Africa/Accra", "code": "Africa/Accra", "offset": "+0000" },
                    { "id": 147, "name": "(GMT+00:00) Africa/Bissau", "code": "Africa/Bissau", "offset": "+0000" },
                    { "id": 188, "name": "(GMT+00:00) Africa/Casablanca", "code": "Africa/Casablanca", "offset": "+0000" },
                    { "id": 122, "name": "(GMT+00:00) Africa/El_Aaiun", "code": "Africa/El_Aaiun", "offset": "+0000" },
                    { "id": 183, "name": "(GMT+00:00) Africa/Monrovia", "code": "Africa/Monrovia", "offset": "+0000" },
                    { "id": 140, "name": "(GMT+00:00) America/Danmarkshavn", "code": "America/Danmarkshavn", "offset": "+0000" },
                    { "id": 14, "name": "(GMT+00:00) Antarctica/Troll", "code": "Antarctica/Troll", "offset": "+0000" },
                    { "id": 125, "name": "(GMT+00:00) Atlantic/Canary", "code": "Atlantic/Canary", "offset": "+0000" },
                    { "id": 132, "name": "(GMT+00:00) Atlantic/Faroe", "code": "Atlantic/Faroe", "offset": "+0000" },
                    { "id": 245, "name": "(GMT+00:00) Atlantic/Madeira", "code": "Atlantic/Madeira", "offset": "+0000" },
                    { "id": 163, "name": "(GMT+00:00) Atlantic/Reykjavik", "code": "Atlantic/Reykjavik", "offset": "+0000" },
                    { "id": 157, "name": "(GMT+00:00) Europe/Dublin", "code": "Europe/Dublin", "offset": "+0000" },
                    { "id": 244, "name": "(GMT+00:00) Europe/Lisbon", "code": "Europe/Lisbon", "offset": "+0000" },
                    { "id": 134, "name": "(GMT+00:00) Europe/London", "code": "Europe/London", "offset": "+0000" },
                    { "id": 117, "name": "(GMT+01:00) Africa/Algiers", "code": "Africa/Algiers", "offset": "+0100" },
                    { "id": 124, "name": "(GMT+01:00) Africa/Ceuta", "code": "Africa/Ceuta", "offset": "+0100" },
                    { "id": 220, "name": "(GMT+01:00) Africa/Lagos", "code": "Africa/Lagos", "offset": "+0100" },
                    { "id": 284, "name": "(GMT+01:00) Africa/Ndjamena", "code": "Africa/Ndjamena", "offset": "+0100" },
                    { "id": 291, "name": "(GMT+01:00) Africa/Tunis", "code": "Africa/Tunis", "offset": "+0100" },
                    { "id": 217, "name": "(GMT+01:00) Africa/Windhoek", "code": "Africa/Windhoek", "offset": "+0100" },
                    { "id": 222, "name": "(GMT+01:00) Europe/Amsterdam", "code": "Europe/Amsterdam", "offset": "+0100" },
                    { "id": 1, "name": "(GMT+01:00) Europe/Andorra", "code": "Europe/Andorra", "offset": "+0100" },
                    { "id": 252, "name": "(GMT+01:00) Europe/Belgrade", "code": "Europe/Belgrade", "offset": "+0100" },
                    { "id": 114, "name": "(GMT+01:00) Europe/Berlin", "code": "Europe/Berlin", "offset": "+0100" },
                    { "id": 45, "name": "(GMT+01:00) Europe/Brussels", "code": "Europe/Brussels", "offset": "+0100" },
                    { "id": 152, "name": "(GMT+01:00) Europe/Budapest", "code": "Europe/Budapest", "offset": "+0100" },
                    { "id": 115, "name": "(GMT+01:00) Europe/Copenhagen", "code": "Europe/Copenhagen", "offset": "+0100" },
                    { "id": 138, "name": "(GMT+01:00) Europe/Gibraltar", "code": "Europe/Gibraltar", "offset": "+0100" },
                    { "id": 185, "name": "(GMT+01:00) Europe/Luxembourg", "code": "Europe/Luxembourg", "offset": "+0100" },
                    { "id": 123, "name": "(GMT+01:00) Europe/Madrid", "code": "Europe/Madrid", "offset": "+0100" },
                    { "id": 199, "name": "(GMT+01:00) Europe/Malta", "code": "Europe/Malta", "offset": "+0100" },
                    { "id": 189, "name": "(GMT+01:00) Europe/Monaco", "code": "Europe/Monaco", "offset": "+0100" },
                    { "id": 223, "name": "(GMT+01:00) Europe/Oslo", "code": "Europe/Oslo", "offset": "+0100" },
                    { "id": 133, "name": "(GMT+01:00) Europe/Paris", "code": "Europe/Paris", "offset": "+0100" },
                    { "id": 113, "name": "(GMT+01:00) Europe/Prague", "code": "Europe/Prague", "offset": "+0100" },
                    { "id": 164, "name": "(GMT+01:00) Europe/Rome", "code": "Europe/Rome", "offset": "+0100" },
                    { "id": 278, "name": "(GMT+01:00) Europe/Stockholm", "code": "Europe/Stockholm", "offset": "+0100" },
                    { "id": 4, "name": "(GMT+01:00) Europe/Tirane", "code": "Europe/Tirane", "offset": "+0100" },
                    { "id": 28, "name": "(GMT+01:00) Europe/Vienna", "code": "Europe/Vienna", "offset": "+0100" },
                    { "id": 238, "name": "(GMT+01:00) Europe/Warsaw", "code": "Europe/Warsaw", "offset": "+0100" },
                    { "id": 99, "name": "(GMT+01:00) Europe/Zurich", "code": "Europe/Zurich", "offset": "+0100" },
                    { "id": 121, "name": "(GMT+02:00) Africa/Cairo", "code": "Africa/Cairo", "offset": "+0200" },
                    { "id": 338, "name": "(GMT+02:00) Africa/Johannesburg", "code": "Africa/Johannesburg", "offset": "+0200" },
                    { "id": 216, "name": "(GMT+02:00) Africa/Maputo", "code": "Africa/Maputo", "offset": "+0200" },
                    { "id": 187, "name": "(GMT+02:00) Africa/Tripoli", "code": "Africa/Tripoli", "offset": "+0200" },
                    { "id": 166, "name": "(GMT+02:00) Asia/Amman", "code": "Asia/Amman", "offset": "+0200" },
                    { "id": 181, "name": "(GMT+02:00) Asia/Beirut", "code": "Asia/Beirut", "offset": "+0200" },
                    { "id": 282, "name": "(GMT+02:00) Asia/Damascus", "code": "Asia/Damascus", "offset": "+0200" },
                    { "id": 242, "name": "(GMT+02:00) Asia/Gaza", "code": "Asia/Gaza", "offset": "+0200" },
                    { "id": 243, "name": "(GMT+02:00) Asia/Hebron", "code": "Asia/Hebron", "offset": "+0200" },
                    { "id": 158, "name": "(GMT+02:00) Asia/Jerusalem", "code": "Asia/Jerusalem", "offset": "+0200" },
                    { "id": 112, "name": "(GMT+02:00) Asia/Nicosia", "code": "Asia/Nicosia", "offset": "+0200" },
                    { "id": 143, "name": "(GMT+02:00) Europe/Athens", "code": "Europe/Athens", "offset": "+0200" },
                    { "id": 251, "name": "(GMT+02:00) Europe/Bucharest", "code": "Europe/Bucharest", "offset": "+0200" },
                    { "id": 190, "name": "(GMT+02:00) Europe/Chisinau", "code": "Europe/Chisinau", "offset": "+0200" },
                    { "id": 126, "name": "(GMT+02:00) Europe/Helsinki", "code": "Europe/Helsinki", "offset": "+0200" },
                    { "id": 293, "name": "(GMT+02:00) Europe/Istanbul", "code": "Europe/Istanbul", "offset": "+0200" },
                    { "id": 253, "name": "(GMT+02:00) Europe/Kaliningrad", "code": "Europe/Kaliningrad", "offset": "+0200" },
                    { "id": 297, "name": "(GMT+02:00) Europe/Kiev", "code": "Europe/Kiev", "offset": "+0200" },
                    { "id": 186, "name": "(GMT+02:00) Europe/Riga", "code": "Europe/Riga", "offset": "+0200" },
                    { "id": 46, "name": "(GMT+02:00) Europe/Sofia", "code": "Europe/Sofia", "offset": "+0200" },
                    { "id": 120, "name": "(GMT+02:00) Europe/Tallinn", "code": "Europe/Tallinn", "offset": "+0200" },
                    { "id": 298, "name": "(GMT+02:00) Europe/Uzhgorod", "code": "Europe/Uzhgorod", "offset": "+0200" },
                    { "id": 184, "name": "(GMT+02:00) Europe/Vilnius", "code": "Europe/Vilnius", "offset": "+0200" },
                    { "id": 299, "name": "(GMT+02:00) Europe/Zaporozhye", "code": "Europe/Zaporozhye", "offset": "+0200" },
                    { "id": 277, "name": "(GMT+03:00) Africa/Khartoum", "code": "Africa/Khartoum", "offset": "+0300" },
                    { "id": 168, "name": "(GMT+03:00) Africa/Nairobi", "code": "Africa/Nairobi", "offset": "+0300" },
                    { "id": 13, "name": "(GMT+03:00) Antarctica/Syowa", "code": "Antarctica/Syowa", "offset": "+0300" },
                    { "id": 161, "name": "(GMT+03:00) Asia/Baghdad", "code": "Asia/Baghdad", "offset": "+0300" },
                    { "id": 249, "name": "(GMT+03:00) Asia/Qatar", "code": "Asia/Qatar", "offset": "+0300" },
                    { "id": 274, "name": "(GMT+03:00) Asia/Riyadh", "code": "Asia/Riyadh", "offset": "+0300" },
                    { "id": 68, "name": "(GMT+03:00) Europe/Minsk", "code": "Europe/Minsk", "offset": "+0300" },
                    { "id": 254, "name": "(GMT+03:00) Europe/Moscow", "code": "Europe/Moscow", "offset": "+0300" },
                    { "id": 255, "name": "(GMT+03:00) Europe/Simferopol", "code": "Europe/Simferopol", "offset": "+0300" },
                    { "id": 256, "name": "(GMT+03:00) Europe/Volgograd", "code": "Europe/Volgograd", "offset": "+0300" },
                    { "id": 162, "name": "(GMT+03:30) Asia/Tehran", "code": "Asia/Tehran", "offset": "+0330" },
                    { "id": 42, "name": "(GMT+04:00) Asia/Baku", "code": "Asia/Baku", "offset": "+0400" },
                    { "id": 2, "name": "(GMT+04:00) Asia/Dubai", "code": "Asia/Dubai", "offset": "+0400" },
                    { "id": 135, "name": "(GMT+04:00) Asia/Tbilisi", "code": "Asia/Tbilisi", "offset": "+0400" },
                    { "id": 5, "name": "(GMT+04:00) Asia/Yerevan", "code": "Asia/Yerevan", "offset": "+0400" },
                    { "id": 257, "name": "(GMT+04:00) Europe/Samara", "code": "Europe/Samara", "offset": "+0400" },
                    { "id": 276, "name": "(GMT+04:00) Indian/Mahe", "code": "Indian/Mahe", "offset": "+0400" },
                    { "id": 200, "name": "(GMT+04:00) Indian/Mauritius", "code": "Indian/Mauritius", "offset": "+0400" },
                    { "id": 250, "name": "(GMT+04:00) Indian/Reunion", "code": "Indian/Reunion", "offset": "+0400" },
                    { "id": 3, "name": "(GMT+04:30) Asia/Kabul", "code": "Asia/Kabul", "offset": "+0430" },
                    { "id": 9, "name": "(GMT+05:00) Antarctica/Davis", "code": "Antarctica/Davis", "offset": "+0500" },
                    { "id": 8, "name": "(GMT+05:00) Antarctica/Mawson", "code": "Antarctica/Mawson", "offset": "+0500" },
                    { "id": 179, "name": "(GMT+05:00) Asia/Aqtau", "code": "Asia/Aqtau", "offset": "+0500" },
                    { "id": 178, "name": "(GMT+05:00) Asia/Aqtobe", "code": "Asia/Aqtobe", "offset": "+0500" },
                    { "id": 290, "name": "(GMT+05:00) Asia/Ashgabat", "code": "Asia/Ashgabat", "offset": "+0500" },
                    { "id": 287, "name": "(GMT+05:00) Asia/Dushanbe", "code": "Asia/Dushanbe", "offset": "+0500" },
                    { "id": 237, "name": "(GMT+05:00) Asia/Karachi", "code": "Asia/Karachi", "offset": "+0500" },
                    { "id": 180, "name": "(GMT+05:00) Asia/Oral", "code": "Asia/Oral", "offset": "+0500" },
                    { "id": 331, "name": "(GMT+05:00) Asia/Samarkand", "code": "Asia/Samarkand", "offset": "+0500" },
                    { "id": 332, "name": "(GMT+05:00) Asia/Tashkent", "code": "Asia/Tashkent", "offset": "+0500" },
                    { "id": 258, "name": "(GMT+05:00) Asia/Yekaterinburg", "code": "Asia/Yekaterinburg", "offset": "+0500" },
                    { "id": 285, "name": "(GMT+05:00) Indian/Kerguelen", "code": "Indian/Kerguelen", "offset": "+0500" },
                    { "id": 201, "name": "(GMT+05:00) Indian/Maldives", "code": "Indian/Maldives", "offset": "+0500" },
                    { "id": 182, "name": "(GMT+05:30) Asia/Colombo", "code": "Asia/Colombo", "offset": "+0530" },
                    { "id": 159, "name": "(GMT+05:30) Asia/Kolkata", "code": "Asia/Kolkata", "offset": "+0530" },
                    { "id": 224, "name": "(GMT+05:45) Asia/Kathmandu", "code": "Asia/Kathmandu", "offset": "+0545" },
                    { "id": 11, "name": "(GMT+06:00) Antarctica/Vostok", "code": "Antarctica/Vostok", "offset": "+0600" },
                    { "id": 176, "name": "(GMT+06:00) Asia/Almaty", "code": "Asia/Almaty", "offset": "+0600" },
                    { "id": 169, "name": "(GMT+06:00) Asia/Bishkek", "code": "Asia/Bishkek", "offset": "+0600" },
                    { "id": 44, "name": "(GMT+06:00) Asia/Dhaka", "code": "Asia/Dhaka", "offset": "+0600" },
                    { "id": 260, "name": "(GMT+06:00) Asia/Novosibirsk", "code": "Asia/Novosibirsk", "offset": "+0600" },
                    { "id": 259, "name": "(GMT+06:00) Asia/Omsk", "code": "Asia/Omsk", "offset": "+0600" },
                    { "id": 177, "name": "(GMT+06:00) Asia/Qyzylorda", "code": "Asia/Qyzylorda", "offset": "+0600" },
                    { "id": 67, "name": "(GMT+06:00) Asia/Thimphu", "code": "Asia/Thimphu", "offset": "+0600" },
                    { "id": 160, "name": "(GMT+06:00) Indian/Chagos", "code": "Indian/Chagos", "offset": "+0600" },
                    { "id": 193, "name": "(GMT+06:30) Asia/Rangoon", "code": "Asia/Rangoon", "offset": "+0630" },
                    { "id": 98, "name": "(GMT+06:30) Indian/Cocos", "code": "Indian/Cocos", "offset": "+0630" },
                    { "id": 286, "name": "(GMT+07:00) Asia/Bangkok", "code": "Asia/Bangkok", "offset": "+0700" },
                    { "id": 334, "name": "(GMT+07:00) Asia/Ho_Chi_Minh", "code": "Asia/Ho_Chi_Minh", "offset": "+0700" },
                    { "id": 195, "name": "(GMT+07:00) Asia/Hovd", "code": "Asia/Hovd", "offset": "+0700" },
                    { "id": 153, "name": "(GMT+07:00) Asia/Jakarta", "code": "Asia/Jakarta", "offset": "+0700" },
                    { "id": 262, "name": "(GMT+07:00) Asia/Krasnoyarsk", "code": "Asia/Krasnoyarsk", "offset": "+0700" },
                    { "id": 261, "name": "(GMT+07:00) Asia/Novokuznetsk", "code": "Asia/Novokuznetsk", "offset": "+0700" },
                    { "id": 154, "name": "(GMT+07:00) Asia/Pontianak", "code": "Asia/Pontianak", "offset": "+0700" },
                    { "id": 111, "name": "(GMT+07:00) Indian/Christmas", "code": "Indian/Christmas", "offset": "+0700" },
                    { "id": 48, "name": "(GMT+08:00) Asia/Brunei", "code": "Asia/Brunei", "offset": 800 },
                    { "id": 264, "name": "(GMT+08:00) Asia/Chita", "code": "Asia/Chita", "offset": 800 },
                    { "id": 196, "name": "(GMT+08:00) Asia/Choibalsan", "code": "Asia/Choibalsan", "offset": 800 },
                    { "id": 149, "name": "(GMT+08:00) Asia/Hong_Kong", "code": "Asia/Hong_Kong", "offset": 800 },
                    { "id": 263, "name": "(GMT+08:00) Asia/Irkutsk", "code": "Asia/Irkutsk", "offset": 800 },
                    { "id": 214, "name": "(GMT+08:00) Asia/Kuala_Lumpur", "code": "Asia/Kuala_Lumpur", "offset": 800 },
                    { "id": 215, "name": "(GMT+08:00) Asia/Kuching", "code": "Asia/Kuching", "offset": 800 },
                    { "id": 197, "name": "(GMT+08:00) Asia/Macau", "code": "Asia/Macau", "offset": 800 },
                    { "id": 155, "name": "(GMT+08:00) Asia/Makassar", "code": "Asia/Makassar", "offset": 800 },
                    { "id": 236, "name": "(GMT+08:00) Asia/Manila", "code": "Asia/Manila", "offset": 800 },
                    { "id": 104, "name": "(GMT+08:00) Asia/Shanghai", "code": "Asia/Shanghai", "offset": 800 },
                    { "id": 279, "name": "(GMT+08:00) Asia/Singapore", "code": "Asia/Singapore", "offset": 800 },
                    { "id": 296, "name": "(GMT+08:00) Asia/Taipei", "code": "Asia/Taipei", "offset": 800 },
                    { "id": 194, "name": "(GMT+08:00) Asia/Ulaanbaatar", "code": "Asia/Ulaanbaatar", "offset": 800 },
                    { "id": 105, "name": "(GMT+08:00) Asia/Urumqi", "code": "Asia/Urumqi", "offset": 800 },
                    { "id": 40, "name": "(GMT+08:00) Australia/Perth", "code": "Australia/Perth", "offset": 800 },
                    { "id": 173, "name": "(GMT+08:30) Asia/Pyongyang", "code": "Asia/Pyongyang", "offset": 830 },
                    { "id": 41, "name": "(GMT+08:45) Australia/Eucla", "code": "Australia/Eucla", "offset": 845 },
                    { "id": 289, "name": "(GMT+09:00) Asia/Dili", "code": "Asia/Dili", "offset": 900 },
                    { "id": 156, "name": "(GMT+09:00) Asia/Jayapura", "code": "Asia/Jayapura", "offset": 900 },
                    { "id": 266, "name": "(GMT+09:00) Asia/Khandyga", "code": "Asia/Khandyga", "offset": 900 },
                    { "id": 174, "name": "(GMT+09:00) Asia/Seoul", "code": "Asia/Seoul", "offset": 900 },
                    { "id": 167, "name": "(GMT+09:00) Asia/Tokyo", "code": "Asia/Tokyo", "offset": 900 },
                    { "id": 265, "name": "(GMT+09:00) Asia/Yakutsk", "code": "Asia/Yakutsk", "offset": 900 },
                    { "id": 247, "name": "(GMT+09:00) Pacific/Palau", "code": "Pacific/Palau", "offset": 900 },
                    { "id": 38, "name": "(GMT+09:30) Australia/Adelaide", "code": "Australia/Adelaide", "offset": 930 },
                    { "id": 35, "name": "(GMT+09:30) Australia/Broken_Hill", "code": "Australia/Broken_Hill", "offset": 930 },
                    { "id": 39, "name": "(GMT+09:30) Australia/Darwin", "code": "Australia/Darwin", "offset": 930 },
                    { "id": 12, "name": "(GMT+10:00) Antarctica/DumontDUrville", "code": "Antarctica/DumontDUrville", "offset": "+1000" },
                    { "id": 270, "name": "(GMT+10:00) Asia/Magadan", "code": "Asia/Magadan", "offset": "+1000" },
                    { "id": 269, "name": "(GMT+10:00) Asia/Ust-Nera", "code": "Asia/Ust-Nera", "offset": "+1000" },
                    { "id": 267, "name": "(GMT+10:00) Asia/Vladivostok", "code": "Asia/Vladivostok", "offset": "+1000" },
                    { "id": 36, "name": "(GMT+10:00) Australia/Brisbane", "code": "Australia/Brisbane", "offset": "+1000" },
                    { "id": 32, "name": "(GMT+10:00) Australia/Currie", "code": "Australia/Currie", "offset": "+1000" },
                    { "id": 31, "name": "(GMT+10:00) Australia/Hobart", "code": "Australia/Hobart", "offset": "+1000" },
                    { "id": 37, "name": "(GMT+10:00) Australia/Lindeman", "code": "Australia/Lindeman", "offset": "+1000" },
                    { "id": 33, "name": "(GMT+10:00) Australia/Melbourne", "code": "Australia/Melbourne", "offset": "+1000" },
                    { "id": 34, "name": "(GMT+10:00) Australia/Sydney", "code": "Australia/Sydney", "offset": "+1000" },
                    { "id": 129, "name": "(GMT+10:00) Pacific/Chuuk", "code": "Pacific/Chuuk", "offset": "+1000" },
                    { "id": 146, "name": "(GMT+10:00) Pacific/Guam", "code": "Pacific/Guam", "offset": "+1000" },
                    { "id": 234, "name": "(GMT+10:00) Pacific/Port_Moresby", "code": "Pacific/Port_Moresby", "offset": "+1000" },
                    { "id": 29, "name": "(GMT+10:30) Australia/Lord_Howe", "code": "Australia/Lord_Howe", "offset": "+1030" },
                    { "id": 10, "name": "(GMT+11:00) Antarctica/Casey", "code": "Antarctica/Casey", "offset": "+1100" },
                    { "id": 30, "name": "(GMT+11:00) Antarctica/Macquarie", "code": "Antarctica/Macquarie", "offset": "+1100" },
                    { "id": 268, "name": "(GMT+11:00) Asia/Sakhalin", "code": "Asia/Sakhalin", "offset": "+1100" },
                    { "id": 271, "name": "(GMT+11:00) Asia/Srednekolymsk", "code": "Asia/Srednekolymsk", "offset": "+1100" },
                    { "id": 235, "name": "(GMT+11:00) Pacific/Bougainville", "code": "Pacific/Bougainville", "offset": "+1100" },
                    { "id": 335, "name": "(GMT+11:00) Pacific/Efate", "code": "Pacific/Efate", "offset": "+1100" },
                    { "id": 275, "name": "(GMT+11:00) Pacific/Guadalcanal", "code": "Pacific/Guadalcanal", "offset": "+1100" },
                    { "id": 131, "name": "(GMT+11:00) Pacific/Kosrae", "code": "Pacific/Kosrae", "offset": "+1100" },
                    { "id": 218, "name": "(GMT+11:00) Pacific/Noumea", "code": "Pacific/Noumea", "offset": "+1100" },
                    { "id": 130, "name": "(GMT+11:00) Pacific/Pohnpei", "code": "Pacific/Pohnpei", "offset": "+1100" },
                    { "id": 219, "name": "(GMT+11:30) Pacific/Norfolk", "code": "Pacific/Norfolk", "offset": "+1130" },
                    { "id": 273, "name": "(GMT+12:00) Asia/Anadyr", "code": "Asia/Anadyr", "offset": "+1200" },
                    { "id": 272, "name": "(GMT+12:00) Asia/Kamchatka", "code": "Asia/Kamchatka", "offset": "+1200" },
                    { "id": 227, "name": "(GMT+12:00) Pacific/Auckland", "code": "Pacific/Auckland", "offset": "+1200" },
                    { "id": 127, "name": "(GMT+12:00) Pacific/Fiji", "code": "Pacific/Fiji", "offset": "+1200" },
                    { "id": 295, "name": "(GMT+12:00) Pacific/Funafuti", "code": "Pacific/Funafuti", "offset": "+1200" },
                    { "id": 192, "name": "(GMT+12:00) Pacific/Kwajalein", "code": "Pacific/Kwajalein", "offset": "+1200" },
                    { "id": 191, "name": "(GMT+12:00) Pacific/Majuro", "code": "Pacific/Majuro", "offset": "+1200" },
                    { "id": 225, "name": "(GMT+12:00) Pacific/Nauru", "code": "Pacific/Nauru", "offset": "+1200" },
                    { "id": 170, "name": "(GMT+12:00) Pacific/Tarawa", "code": "Pacific/Tarawa", "offset": "+1200" },
                    { "id": 300, "name": "(GMT+12:00) Pacific/Wake", "code": "Pacific/Wake", "offset": "+1200" },
                    { "id": 336, "name": "(GMT+12:00) Pacific/Wallis", "code": "Pacific/Wallis", "offset": "+1200" },
                    { "id": 228, "name": "(GMT+12:45) Pacific/Chatham", "code": "Pacific/Chatham", "offset": "+1245" },
                    { "id": 337, "name": "(GMT+13:00) Pacific/Apia", "code": "Pacific/Apia", "offset": "+1300" },
                    { "id": 171, "name": "(GMT+13:00) Pacific/Enderbury", "code": "Pacific/Enderbury", "offset": "+1300" },
                    { "id": 288, "name": "(GMT+13:00) Pacific/Fakaofo", "code": "Pacific/Fakaofo", "offset": "+1300" },
                    { "id": 292, "name": "(GMT+13:00) Pacific/Tongatapu", "code": "Pacific/Tongatapu", "offset": "+1300" },
                    { "id": 172, "name": "(GMT+14:00) Pacific/Kiritimati", "code": "Pacific/Kiritimati", "offset": "+1400" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/countries": {
      "get": {
        "tags": ["Enums"],
        "summary": "Countries",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "countries": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "countries": [
                    { "id": 4, "name": "Afghanistan" },
                    { "id": 5, "name": "Åland Islands" },
                    { "id": 6, "name": "Albania" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/locales": {
      "get": {
        "tags": ["Enums"],
        "summary": "Locales",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locales": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "code": { "type": "string" },
                          "angularCode": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "locales": [
                    { "id": 1, "name": "Afrikaans", "code": "af", "angularCode": "af" },
                    { "id": 96, "name": "Albanian", "code": "sq", "angularCode": "sq" },
                    { "id": 8, "name": "Arabic", "code": "ar", "angularCode": "ar" },
                    { "id": 2, "name": "Arabic (Algeria)", "code": "ar-dz", "angularCode": "ar-DZ" },
                    { "id": 3, "name": "Arabic (Kuwait)", "code": "ar-kw", "angularCode": "ar-KW" },
                    { "id": 4, "name": "Arabic (Libya)", "code": "ar-ly", "angularCode": "ar-LY" },
                    { "id": 5, "name": "Arabic (Morocco)", "code": "ar-ma", "angularCode": "ar-MA" },
                    { "id": 6, "name": "Arabic (Saudi Arabia)", "code": "ar-sa", "angularCode": "ar-SA" },
                    { "id": 7, "name": "Arabic (Tunisia)", "code": "ar-tn", "angularCode": "ar-TN" },
                    { "id": 54, "name": "Armenian (Armenia)", "code": "hy-am", "angularCode": "hy" },
                    { "id": 9, "name": "Azerbaijani", "code": "az", "angularCode": "az" },
                    { "id": 12, "name": "Bambara", "code": "bm", "angularCode": "bm" },
                    { "id": 38, "name": "Basque", "code": "eu", "angularCode": "eu" },
                    { "id": 10, "name": "Belarusian", "code": "be", "angularCode": "be" },
                    { "id": 13, "name": "Bengali", "code": "bn", "angularCode": "bn" },
                    { "id": 16, "name": "Bosnian", "code": "bs", "angularCode": "bs" },
                    { "id": 11, "name": "Bulgarian", "code": "bg", "angularCode": "bg" },
                    { "id": 79, "name": "Burmese", "code": "my", "angularCode": "my" },
                    { "id": 17, "name": "Catalan", "code": "ca", "angularCode": "ca" },
                    { "id": 112, "name": "Central Morocco Tamazight", "code": "tzm", "angularCode": "tzm" },
                    { "id": 111, "name": "Central Morocco Tamazight (Latin)", "code": "tzm-latn", "angularCode": "tzm" },
                    { "id": 121, "name": "Chinese - China", "code": "zh-cn", "angularCode": "zh-Hans" },
                    { "id": 122, "name": "Chinese - Hong Kong SAR", "code": "zh-hk", "angularCode": "zh-Hant-HK" },
                    { "id": 123, "name": "Chinese - Taiwan", "code": "zh-tw", "angularCode": "zh-Hant" },
                    { "id": 52, "name": "Croatian", "code": "hr", "angularCode": "hr" },
                    { "id": 18, "name": "Czech", "code": "cs", "angularCode": "cs" },
                    { "id": 21, "name": "Danish", "code": "da", "angularCode": "da" },
                    { "id": 25, "name": "Divehi", "code": "dv", "angularCode": "en-US" },
                    { "id": 83, "name": "Dutch", "code": "nl", "angularCode": "nl" },
                    { "id": 82, "name": "Dutch (Belgium)", "code": "nl-be", "angularCode": "nl-BE" },
                    { "id": 27, "name": "English (Australia)", "code": "en-au", "angularCode": "en-AU" },
                    { "id": 28, "name": "English (Canada)", "code": "en-ca", "angularCode": "en-CA" },
                    { "id": 30, "name": "English (Ireland)", "code": "en-ie", "angularCode": "en-IE" },
                    { "id": 32, "name": "English (New Zealand)", "code": "en-nz", "angularCode": "en-NZ" },
                    { "id": 29, "name": "English (United Kingdom)", "code": "en-gb", "angularCode": "en-GB" },
                    { "id": 19, "name": "English (United States)", "code": "en-us", "angularCode": "en-US" },
                    { "id": 33, "name": "Esperanto", "code": "eo", "angularCode": "eo" },
                    { "id": 37, "name": "Estonian", "code": "et", "angularCode": "et" },
                    { "id": 41, "name": "Faroese", "code": "fo", "angularCode": "fo" },
                    { "id": 40, "name": "Finnish", "code": "fi", "angularCode": "fi" },
                    { "id": 44, "name": "French", "code": "fr", "angularCode": "fr" },
                    { "id": 42, "name": "French (Canada)", "code": "fr-ca", "angularCode": "fr-CA" },
                    { "id": 43, "name": "French (Switzerland)", "code": "fr-ch", "angularCode": "fr-CH" },
                    { "id": 46, "name": "Gaelic", "code": "gd", "angularCode": "gd" },
                    { "id": 47, "name": "Galician", "code": "gl", "angularCode": "gl" },
                    { "id": 60, "name": "Georgian", "code": "ka", "angularCode": "ka" },
                    { "id": 24, "name": "German", "code": "de", "angularCode": "de" },
                    { "id": 22, "name": "German (Austria)", "code": "de-at", "angularCode": "de-AT" },
                    { "id": 23, "name": "German (Switzerland)", "code": "de-ch", "angularCode": "de-CH" },
                    { "id": 26, "name": "Greek", "code": "el", "angularCode": "el" },
                    { "id": 49, "name": "Gujarati", "code": "gu", "angularCode": "gu" },
                    { "id": 50, "name": "Hebrew", "code": "he", "angularCode": "he" },
                    { "id": 51, "name": "Hindi", "code": "hi", "angularCode": "hi" },
                    { "id": 53, "name": "Hungarian", "code": "hu", "angularCode": "hu" },
                    { "id": 56, "name": "Icelandic", "code": "is", "angularCode": "is" },
                    { "id": 55, "name": "Indonesian", "code": "id", "angularCode": "id" },
                    { "id": 57, "name": "Italian", "code": "it", "angularCode": "it" },
                    { "id": 58, "name": "Japanese", "code": "ja", "angularCode": "ja" },
                    { "id": 63, "name": "Kannada", "code": "kn", "angularCode": "kn" },
                    { "id": 61, "name": "Kazakh", "code": "kk", "angularCode": "kk" },
                    { "id": 62, "name": "Khmer", "code": "km", "angularCode": "km" },
                    { "id": 64, "name": "Korean", "code": "ko", "angularCode": "ko" },
                    { "id": 67, "name": "Lao", "code": "lo", "angularCode": "lo" },
                    { "id": 69, "name": "Latvian", "code": "lv", "angularCode": "lv" },
                    { "id": 68, "name": "Lithuanian", "code": "lt", "angularCode": "lt" },
                    { "id": 72, "name": "Macedonian", "code": "mk", "angularCode": "mk" },
                    { "id": 77, "name": "Malay", "code": "ms", "angularCode": "ms" },
                    { "id": 73, "name": "Malayalam", "code": "ml", "angularCode": "ml" },
                    { "id": 76, "name": "Malay (Malaysia)", "code": "ms-my", "angularCode": "ms" },
                    { "id": 78, "name": "Maltese", "code": "mt", "angularCode": "mt" },
                    { "id": 75, "name": "Marathi", "code": "mr", "angularCode": "mr" },
                    { "id": 71, "name": "Maroi", "code": "mi", "angularCode": "mi" },
                    { "id": 74, "name": "Mongolian", "code": "mn", "angularCode": "mn" },
                    { "id": 81, "name": "Nepali", "code": "ne", "angularCode": "ne" },
                    { "id": 80, "name": "Norwegian Bokmål", "code": "nb", "angularCode": "nb" },
                    { "id": 84, "name": "Norwegian Nynorsk", "code": "nn", "angularCode": "nn" },
                    { "id": 39, "name": "Persian", "code": "fa", "angularCode": "fa" },
                    { "id": 86, "name": "Polish", "code": "pl", "angularCode": "pl" },
                    { "id": 88, "name": "Portuguese", "code": "pt", "angularCode": "pt" },
                    { "id": 87, "name": "Portuguese (Brazil)", "code": "pt-br", "angularCode": "pt" },
                    { "id": 85, "name": "Punjabi", "code": "pa", "angularCode": "pa" },
                    { "id": 89, "name": "Romanian", "code": "ro", "angularCode": "ro" },
                    { "id": 90, "name": "Russian", "code": "ru", "angularCode": "ru" },
                    { "id": 98, "name": "Serbian", "code": "sr", "angularCode": "sr" },
                    { "id": 97, "name": "Serbian (Cyrillic)", "code": "sr-cyrl", "angularCode": "sr-Cyrl" },
                    { "id": 91, "name": "Sindhi", "code": "sd", "angularCode": "sd" },
                    { "id": 93, "name": "Sinhala", "code": "si", "angularCode": "si" },
                    { "id": 94, "name": "Slovak", "code": "sk", "angularCode": "sk" },
                    { "id": 95, "name": "Slovenian", "code": "sl", "angularCode": "sl" },
                    { "id": 36, "name": "Spanish", "code": "es", "angularCode": "es" },
                    { "id": 34, "name": "Spanish (Dominican Republic)", "code": "es-do", "angularCode": "es-DO" },
                    { "id": 35, "name": "Spanish (United States)", "code": "es-us", "angularCode": "es-US" },
                    { "id": 101, "name": "Swahili", "code": "sw", "angularCode": "sw" },
                    { "id": 100, "name": "Swedish", "code": "sv", "angularCode": "sv" },
                    { "id": 105, "name": "Tajik", "code": "tg", "angularCode": "tg" },
                    { "id": 102, "name": "Tamil", "code": "ta", "angularCode": "ta" },
                    { "id": 103, "name": "Telugu", "code": "te", "angularCode": "te" },
                    { "id": 106, "name": "Thai", "code": "th", "angularCode": "th" },
                    { "id": 14, "name": "Tibetan", "code": "bo", "angularCode": "bo" },
                    { "id": 109, "name": "Turkish", "code": "tr", "angularCode": "tr" },
                    { "id": 114, "name": "Ukrainian", "code": "uk", "angularCode": "uk" },
                    { "id": 115, "name": "Urdu", "code": "ur", "angularCode": "ur" },
                    { "id": 117, "name": "Uzbek", "code": "uz", "angularCode": "uz" },
                    { "id": 116, "name": "Uzbek (Latin)", "code": "uz-latn", "angularCode": "uz-Latn" },
                    { "id": 118, "name": "Vietnamese", "code": "vi", "angularCode": "vi" },
                    { "id": 20, "name": "Welsh", "code": "cy", "angularCode": "cy" },
                    { "id": 120, "name": "Yoruba", "code": "yo", "angularCode": "yo" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/languages": {
      "get": {
        "tags": ["Enums"],
        "summary": "Languages",
        "parameters": [{ "name": "localized", "in": "query", "schema": { "type": "boolean" }, "example": "true" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "languages": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "code": { "type": "string" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "languages": [
                    { "code": "ab", "name": "Abkhazian" },
                    { "code": "aa", "name": "Afar" },
                    { "code": "af", "name": "Afrikaans" },
                    { "code": "ak", "name": "Akan" },
                    { "code": "sq", "name": "Albanian" },
                    { "code": "am", "name": "Amharic" },
                    { "code": "ar", "name": "Arabic" },
                    { "code": "an", "name": "Aragonese" },
                    { "code": "hy", "name": "Armenian" },
                    { "code": "as", "name": "Assamese" },
                    { "code": "av", "name": "Avaric" },
                    { "code": "ae", "name": "Avestan" },
                    { "code": "ay", "name": "Aymara" },
                    { "code": "az", "name": "Azerbaijani" },
                    { "code": "bm", "name": "Bambara" },
                    { "code": "ba", "name": "Bashkir" },
                    { "code": "eu", "name": "Basque" },
                    { "code": "be", "name": "Belarusian" },
                    { "code": "bn", "name": "Bengali" },
                    { "code": "bh", "name": "Bihari languages" },
                    { "code": "bi", "name": "Bislama" },
                    { "code": "nb", "name": "Bokmål, Norwegian; Norwegian Bokmål" },
                    { "code": "bs", "name": "Bosnian" },
                    { "code": "br", "name": "Breton" },
                    { "code": "bg", "name": "Bulgarian" },
                    { "code": "my", "name": "Burmese" },
                    { "code": "ca", "name": "Catalan; Valencian" },
                    { "code": "km", "name": "Central Khmer" },
                    { "code": "ch", "name": "Chamorro" },
                    { "code": "ce", "name": "Chechen" },
                    { "code": "ny", "name": "Chichewa; Chewa; Nyanja" },
                    { "code": "zh", "name": "Chinese" },
                    { "code": "cu", "name": "Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic" },
                    { "code": "cv", "name": "Chuvash" },
                    { "code": "kw", "name": "Cornish" },
                    { "code": "co", "name": "Corsican" },
                    { "code": "cr", "name": "Cree" },
                    { "code": "hr", "name": "Croatian" },
                    { "code": "cs", "name": "Czech" },
                    { "code": "da", "name": "Danish" },
                    { "code": "dv", "name": "Divehi; Dhivehi; Maldivian" },
                    { "code": "nl", "name": "Dutch; Flemish" },
                    { "code": "dz", "name": "Dzongkha" },
                    { "code": "en", "name": "English" },
                    { "code": "eo", "name": "Esperanto" },
                    { "code": "et", "name": "Estonian" },
                    { "code": "ee", "name": "Ewe" },
                    { "code": "fo", "name": "Faroese" },
                    { "code": "fj", "name": "Fijian" },
                    { "code": "fi", "name": "Finnish" },
                    { "code": "fr", "name": "French" },
                    { "code": "ff", "name": "Fulah" },
                    { "code": "gd", "name": "Gaelic; Scottish Gaelic" },
                    { "code": "gl", "name": "Galician" },
                    { "code": "lg", "name": "Ganda" },
                    { "code": "ka", "name": "Georgian" },
                    { "code": "de", "name": "German" },
                    { "code": "el", "name": "Greek, Modern (1453-)" },
                    { "code": "gn", "name": "Guarani" },
                    { "code": "gu", "name": "Gujarati" },
                    { "code": "ht", "name": "Haitian; Haitian Creole" },
                    { "code": "ha", "name": "Hausa" },
                    { "code": "he", "name": "Hebrew" },
                    { "code": "hz", "name": "Herero" },
                    { "code": "hi", "name": "Hindi" },
                    { "code": "ho", "name": "Hiri Motu" },
                    { "code": "hu", "name": "Hungarian" },
                    { "code": "is", "name": "Icelandic" },
                    { "code": "io", "name": "Ido" },
                    { "code": "ig", "name": "Igbo" },
                    { "code": "id", "name": "Indonesian" },
                    { "code": "ia", "name": "Interlingua (International Auxiliary Language Association)" },
                    { "code": "ie", "name": "Interlingue; Occidental" },
                    { "code": "iu", "name": "Inuktitut" },
                    { "code": "ik", "name": "Inupiaq" },
                    { "code": "ga", "name": "Irish" },
                    { "code": "it", "name": "Italian" },
                    { "code": "ja", "name": "Japanese" },
                    { "code": "jv", "name": "Javanese" },
                    { "code": "kl", "name": "Kalaallisut; Greenlandic" },
                    { "code": "kn", "name": "Kannada" },
                    { "code": "kr", "name": "Kanuri" },
                    { "code": "ks", "name": "Kashmiri" },
                    { "code": "kk", "name": "Kazakh" },
                    { "code": "ki", "name": "Kikuyu; Gikuyu" },
                    { "code": "rw", "name": "Kinyarwanda" },
                    { "code": "ky", "name": "Kirghiz; Kyrgyz" },
                    { "code": "kv", "name": "Komi" },
                    { "code": "kg", "name": "Kongo" },
                    { "code": "ko", "name": "Korean" },
                    { "code": "kj", "name": "Kuanyama; Kwanyama" },
                    { "code": "ku", "name": "Kurdish" },
                    { "code": "lo", "name": "Lao" },
                    { "code": "la", "name": "Latin" },
                    { "code": "lv", "name": "Latvian" },
                    { "code": "li", "name": "Limburgan; Limburger; Limburgish" },
                    { "code": "ln", "name": "Lingala" },
                    { "code": "lt", "name": "Lithuanian" },
                    { "code": "lu", "name": "Luba-Katanga" },
                    { "code": "lb", "name": "Luxembourgish; Letzeburgesch" },
                    { "code": "mk", "name": "Macedonian" },
                    { "code": "mg", "name": "Malagasy" },
                    { "code": "ms", "name": "Malay" },
                    { "code": "ml", "name": "Malayalam" },
                    { "code": "mt", "name": "Maltese" },
                    { "code": "gv", "name": "Manx" },
                    { "code": "mi", "name": "Maori" },
                    { "code": "mr", "name": "Marathi" },
                    { "code": "mh", "name": "Marshallese" },
                    { "code": "mn", "name": "Mongolian" },
                    { "code": "na", "name": "Nauru" },
                    { "code": "nv", "name": "Navajo; Navaho" },
                    { "code": "nd", "name": "Ndebele, North; North Ndebele" },
                    { "code": "nr", "name": "Ndebele, South; South Ndebele" },
                    { "code": "ng", "name": "Ndonga" },
                    { "code": "ne", "name": "Nepali" },
                    { "code": "se", "name": "Northern Sami" },
                    { "code": "no", "name": "Norwegian" },
                    { "code": "nn", "name": "Norwegian Nynorsk; Nynorsk, Norwegian" },
                    { "code": "oc", "name": "Occitan (post 1500); Provençal" },
                    { "code": "oj", "name": "Ojibwa" },
                    { "code": "or", "name": "Oriya" },
                    { "code": "om", "name": "Oromo" },
                    { "code": "os", "name": "Ossetian; Ossetic" },
                    { "code": "pi", "name": "Pali" },
                    { "code": "pa", "name": "Panjabi; Punjabi" },
                    { "code": "fa", "name": "Persian" },
                    { "code": "pl", "name": "Polish" },
                    { "code": "pt", "name": "Portuguese" },
                    { "code": "ps", "name": "Pushto; Pashto" },
                    { "code": "qu", "name": "Quechua" },
                    { "code": "ro", "name": "Romanian; Moldavian; Moldovan" },
                    { "code": "rm", "name": "Romansh" },
                    { "code": "rn", "name": "Rundi" },
                    { "code": "ru", "name": "Russian" },
                    { "code": "sm", "name": "Samoan" },
                    { "code": "sg", "name": "Sango" },
                    { "code": "sa", "name": "Sanskrit" },
                    { "code": "sc", "name": "Sardinian" },
                    { "code": "sr", "name": "Serbian" },
                    { "code": "sn", "name": "Shona" },
                    { "code": "ii", "name": "Sichuan Yi; Nuosu" },
                    { "code": "sd", "name": "Sindhi" },
                    { "code": "si", "name": "Sinhala; Sinhalese" },
                    { "code": "sk", "name": "Slovak" },
                    { "code": "sl", "name": "Slovenian" },
                    { "code": "so", "name": "Somali" },
                    { "code": "st", "name": "Sotho, Southern" },
                    { "code": "es", "name": "Spanish; Castilian" },
                    { "code": "su", "name": "Sundanese" },
                    { "code": "sw", "name": "Swahili" },
                    { "code": "ss", "name": "Swati" },
                    { "code": "sv", "name": "Swedish" },
                    { "code": "tl", "name": "Tagalog" },
                    { "code": "ty", "name": "Tahitian" },
                    { "code": "tg", "name": "Tajik" },
                    { "code": "ta", "name": "Tamil" },
                    { "code": "tt", "name": "Tatar" },
                    { "code": "te", "name": "Telugu" },
                    { "code": "th", "name": "Thai" },
                    { "code": "bo", "name": "Tibetan" },
                    { "code": "ti", "name": "Tigrinya" },
                    { "code": "to", "name": "Tonga (Tonga Islands)" },
                    { "code": "ts", "name": "Tsonga" },
                    { "code": "tn", "name": "Tswana" },
                    { "code": "tr", "name": "Turkish" },
                    { "code": "tk", "name": "Turkmen" },
                    { "code": "tw", "name": "Twi" },
                    { "code": "ug", "name": "Uighur; Uyghur" },
                    { "code": "uk", "name": "Ukrainian" },
                    { "code": "ur", "name": "Urdu" },
                    { "code": "uz", "name": "Uzbek" },
                    { "code": "ve", "name": "Venda" },
                    { "code": "vi", "name": "Vietnamese" },
                    { "code": "vo", "name": "Volapük" },
                    { "code": "wa", "name": "Walloon" },
                    { "code": "cy", "name": "Welsh" },
                    { "code": "fy", "name": "Western Frisian" },
                    { "code": "wo", "name": "Wolof" },
                    { "code": "xh", "name": "Xhosa" },
                    { "code": "yi", "name": "Yiddish" },
                    { "code": "yo", "name": "Yoruba" },
                    { "code": "za", "name": "Zhuang; Chuang" },
                    { "code": "zu", "name": "Zulu" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/user-features": {
      "get": {
        "tags": ["Enums"],
        "summary": "User features",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userFeatures": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "title": { "type": "string" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "userFeatures": [
                    {
                      "title": "Allow access to internal IP addresses from scenarios (do not turn on if you don't know what you're doing!)",
                      "name": "local_access"
                    },
                    { "title": "Can create Apps without ID suffix", "name": "allow_apps" },
                    { "title": "Can use custom IML functions in Apps", "name": "allow_apps_js" },
                    { "title": "Can commit changes to approved Apps", "name": "allow_apps_commit" },
                    { "title": "Can see private modules", "name": "private_modules" },
                    { "title": "Can add public templates", "name": "public_templates" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/organization-features": {
      "get": {
        "tags": ["Enums"],
        "summary": "Organization features",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationFeatures": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "title": { "type": "string" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "organizationFeatures": [
                    {
                      "title": "Allow access to internal IP addresses from scenarios (do not turn on if you don't know what you're doing!)",
                      "name": "local_access"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/user-email-notifications": {
      "get": {
        "tags": ["Enums"],
        "summary": "User email notifications",
        "description": "Default language is used from user settings.",
        "parameters": [{ "name": "language", "in": "query", "schema": { "type": "string" }, "example": "en" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userEmailNotifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "description": { "type": "string" } }
                      }
                    }
                  }
                },
                "example": {
                  "userEmailNotifications": [
                    {
                      "id": 2,
                      "name": "Warning in scenario run",
                      "description": "Warnings encountered by your scenarios that need your attention, such as failure to connect with your apps and services."
                    },
                    {
                      "id": 1,
                      "name": "Errors in scenario run",
                      "description": "Notifications about errors encountered by specific modules in your scenarios that keep your workflows from running smoothly."
                    },
                    {
                      "id": 6,
                      "name": "Scenario deactivation",
                      "description": "Get notified when your scenario gets deactivated due to critical issues such as multiple consecutive errors."
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/user-api-token-scopes": {
      "get": {
        "tags": ["Enums"],
        "summary": "User Api token scopes",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userApiTokenScopes": { "type": "array", "items": { "type": "object", "properties": { "name": { "type": "string" } } } }
                  }
                },
                "example": {
                  "userApiTokenScopes": [
                    { "name": "accounts:read" },
                    { "name": "accounts:write" },
                    { "name": "admin:read" },
                    { "name": "admin:write" },
                    { "name": "apps:read" },
                    { "name": "apps:write" },
                    { "name": "imt-forms:read" },
                    { "name": "imt-forms:write" },
                    { "name": "keys:read" },
                    { "name": "keys:write" },
                    { "name": "notifications:read" },
                    { "name": "notifications:write" },
                    { "name": "organizations:read" },
                    { "name": "organizations:write" },
                    { "name": "packages:read" },
                    { "name": "packages:write" },
                    { "name": "scenarios:read" },
                    { "name": "scenarios:write" },
                    { "name": "system:read" },
                    { "name": "system:write" },
                    { "name": "templates:read" },
                    { "name": "templates:write" },
                    { "name": "udts:read" },
                    { "name": "udts:write" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/imt-regions": {
      "get": {
        "tags": ["Enums"],
        "summary": "Integromat regions",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imtRegions": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                    }
                  }
                },
                "example": { "imtRegions": [{ "id": 1, "name": "Local" }] }
              }
            }
          }
        }
      }
    },
    "/enums/imt-zones": {
      "get": {
        "tags": ["Enums"],
        "summary": "Integromat zones",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imtZones": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "id": { "type": "integer" }, "domain": { "type": "string" }, "name": { "type": "string" } }
                      }
                    }
                  }
                },
                "example": {
                  "imtZones": [
                    { "id": 1, "domain": "slave1.integromat.cloud", "name": "Zone Slave 1" },
                    { "id": 2, "domain": "slave2.integromat.cloud", "name": "Zone Slave 2" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/enums/apps-review-statuses": {
      "get": {
        "tags": ["Enums"],
        "summary": "Apps Review Statuses",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reviewStatuses": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "value": { "type": "integer" }, "label": { "type": "string" } } }
                    }
                  }
                },
                "example": {
                  "reviewStatuses": [
                    { "value": 0, "label": "{{!apps.forms.review.status.requestAccepted}}" },
                    { "value": 1, "label": "{{!apps.forms.review.status.inProgress}}" },
                    { "value": 2, "label": "{{!apps.forms.review.status.feedbackSent}}" },
                    { "value": 3, "label": "{{!apps.forms.review.status.completed}}" },
                    { "value": 4, "label": "{{!apps.forms.review.status.waitingForRelease}}" },
                    { "value": 5, "label": "{{!apps.forms.review.status.declined}}" }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/hooks": {
      "get": {
        "tags": ["Hooks"],
        "summary": "List hooks",
        "description": "Retrieves a collection of all hooks for a team with a given ID. Returned hooks are sorted by the name, with the most recently created hooks appearing first.",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "string" },
            "required": true,
            "description": "The unique numeric ID of the team whose hooks will be retrieved.",
            "example": 4
          },
          {
            "name": "typeName",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The hook type. Two native Integromat hook types are `gateway-webhook` and `gateway-mailhook`.",
            "example": "gateway-webhook"
          },
          {
            "name": "assigned",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter specifies if the hook is assigned to a scenario. If set to **true**, the request will return only the hooks which the `scenarioId` value is not set to null.",
            "example": true
          },
          {
            "name": "viewForScenarioId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "This parameter shows only the hooks that can be used by a scenario with a specific ID, which means hooks that are not assigned to another scenario yet and the hook that is already assigned to this scenario. This can be useful because Integromat allows assigning any hook to only one scenario. If this parameter is set the `assigned` parameter is ignored.",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "udid": { "type": "string" },
                          "type": { "type": "string" },
                          "packageName": { "type": "string" },
                          "theme": { "type": "string", "format": "color" },
                          "flags": { "type": "object", "properties": { "form": { "type": "boolean", "required": false } } },
                          "editable": { "type": "boolean" },
                          "queueCount": { "type": "integer" },
                          "queueLimit": { "type": "integer" },
                          "enabled": { "type": "boolean" },
                          "gone": { "type": "boolean" },
                          "typeName": { "type": "string" },
                          "data": {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                              "headers": { "type": "boolean", "required": false },
                              "method": { "type": "boolean", "required": false },
                              "stringify": { "type": "boolean", "required": false },
                              "teamId": { "type": "integer", "required": false },
                              "ip": { "type": "string", "format": "ipv6", "required": false },
                              "udt": { "type": "string", "required": false }
                            }
                          },
                          "scenarioId": { "type": "integer" },
                          "url": { "type": "string", "format": "uri" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "hooks": [
                    {
                      "id": 11,
                      "name": "My gateway-webhook webhook 1",
                      "teamId": 4,
                      "udid": "1gqnexkk1vwxg2wpj39kg30pzp6uhe7h",
                      "type": "web",
                      "packageName": null,
                      "theme": "#c73a63",
                      "editable": true,
                      "queueCount": 0,
                      "queueLimit": 10000,
                      "enabled": true,
                      "gone": false,
                      "typeName": "gateway-webhook",
                      "data": { "headers": false, "method": false, "stringify": false },
                      "scenarioId": 1,
                      "url": "https://local.integromat.cloud/wh/1gqnexkk1vwxg2wpj39kg30pzp6uhe7h"
                    },
                    {
                      "id": 58,
                      "name": "Test 1",
                      "teamId": 4,
                      "udid": "d4ezzfwgyav7qaukv8dbh3l21eru0fld",
                      "type": "web",
                      "packageName": null,
                      "theme": "#c73a63",
                      "editable": true,
                      "queueCount": 0,
                      "queueLimit": 10000,
                      "enabled": true,
                      "gone": false,
                      "typeName": "gateway-webhook",
                      "data": { "ip": null, "udt": null, "headers": false, "method": false, "stringify": false, "teamId": 4 },
                      "scenarioId": 112,
                      "url": "https://local.integromat.cloud/wh/d4ezzfwgyav7qaukv8dbh3l21eru0fld"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Hooks"],
        "summary": "Create hook",
        "description": "Creates a new hook with parameters passed in the request body. As the response, it returns all details of the created hook.",
        "security": [{ "token": ["hooks:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "min": 1, "max": 128, "required": true },
                  "teamId": { "type": "string", "required": true },
                  "typeName": { "type": "string", "required": true },
                  "__IMTCONN__": { "type": "integer" },
                  "formId": { "type": "string" }
                }
              },
              "example": { "name": "jotform hook 1", "teamId": "1", "typeName": "jotform", "__IMTCONN__": 96, "formId": "91282545501352" }
            }
          }
        },
        "parameters": null,
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hook": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "udid": { "type": "string" },
                        "type": { "type": "string" },
                        "packageName": { "type": "string" },
                        "theme": { "type": "string", "format": "color" },
                        "flags": { "type": "object", "properties": { "form": { "type": "boolean", "required": false } } },
                        "editable": { "type": "boolean" },
                        "queueCount": { "type": "integer" },
                        "queueLimit": { "type": "integer" },
                        "enabled": { "type": "boolean" },
                        "gone": { "type": "boolean" },
                        "typeName": { "type": "string" },
                        "data": {
                          "type": "object",
                          "additionalProperties": true,
                          "properties": {
                            "headers": { "type": "boolean", "required": false },
                            "method": { "type": "boolean", "required": false },
                            "stringify": { "type": "boolean", "required": false },
                            "teamId": { "type": "integer", "required": false },
                            "ip": { "type": "string", "format": "ipv6", "required": false },
                            "udt": { "type": "string", "required": false }
                          }
                        },
                        "scenarioId": { "type": "integer" },
                        "url": { "type": "string", "format": "uri" }
                      }
                    },
                    "formula": { "type": "object", "properties": { "success": { "type": "array" } } }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Create",
                    "value": {
                      "hook": {
                        "id": 46,
                        "name": "jotform hook 1",
                        "teamId": 4,
                        "udid": "ukkxypkmrcgufv8xmc9xumbvh8bfh69d",
                        "type": "web",
                        "packageName": null,
                        "theme": "#ffa500",
                        "editable": false,
                        "queueCount": 0,
                        "queueLimit": 10000,
                        "enabled": true,
                        "gone": false,
                        "typeName": "jotform",
                        "data": {
                          "__IMTCONN__": 96,
                          "formId": "91282545501352",
                          "teamId": 4,
                          "url": "https://local.integromat.cloud/wh/ukkxypkmrcgufv8xmc9xumbvh8bfh69d"
                        },
                        "url": "https://local.integromat.cloud/wh/ukkxypkmrcgufv8xmc9xumbvh8bfh69d"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}": {
      "get": {
        "tags": ["Hooks"],
        "summary": "Get hook detail",
        "description": "Retrieves all available properties of a hook with a given ID including hooks data.",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hook": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "udid": { "type": "string" },
                        "type": { "type": "string" },
                        "packageName": { "type": "string" },
                        "theme": { "type": "string", "format": "color" },
                        "flags": { "type": "object", "properties": { "form": { "type": "boolean", "required": false } } },
                        "editable": { "type": "boolean" },
                        "queueCount": { "type": "integer" },
                        "queueLimit": { "type": "integer" },
                        "enabled": { "type": "boolean" },
                        "gone": { "type": "boolean" },
                        "typeName": { "type": "string" },
                        "data": {
                          "type": "object",
                          "additionalProperties": true,
                          "properties": {
                            "headers": { "type": "boolean", "required": false },
                            "method": { "type": "boolean", "required": false },
                            "stringify": { "type": "boolean", "required": false },
                            "teamId": { "type": "integer", "required": false },
                            "ip": { "type": "string", "format": "ipv6", "required": false },
                            "udt": { "type": "string", "required": false }
                          }
                        },
                        "scenarioId": { "type": "integer" },
                        "url": { "type": "string", "format": "uri" }
                      }
                    }
                  }
                },
                "example": {
                  "hook": {
                    "id": 58,
                    "name": "Test 1",
                    "teamId": 4,
                    "udid": "d4ezzfwgyav7qaukv8dbh3l21eru0fld",
                    "type": "web",
                    "packageName": null,
                    "theme": "#c73a63",
                    "editable": true,
                    "queueCount": 0,
                    "queueLimit": 10000,
                    "enabled": true,
                    "gone": false,
                    "typeName": "gateway-webhook",
                    "data": { "ip": null, "udt": null, "headers": false, "method": false, "stringify": false, "teamId": 4 },
                    "scenarioId": 112,
                    "url": "https://local.integromat.cloud/wh/d4ezzfwgyav7qaukv8dbh3l21eru0fld"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Hooks"],
        "summary": "Delete hook",
        "description": "Deletes a hook with a given ID and returns the ID as the response.",
        "security": [{ "token": ["hooks:write"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "example": 12,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint."
          },
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion if a hook is included in the scenario. Confirmation is required because the scenario will stop working without the hook. If the parameter is not sent or is set to `false` an error code is returned and the resource is not deleted.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "hook": { "type": "integer" } } },
                "example": { "hook": 12 }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Hooks"],
        "summary": "Update hook",
        "description": "Updates a hook with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated hook including properties that were not changed.",
        "security": [{ "token": ["hooks:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string", "requrired": false } } },
              "example": { "name": "My gateway-webhook webhook 1" }
            }
          }
        },
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "string" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 11
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hook": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "udid": { "type": "string" },
                        "type": { "type": "string" },
                        "packageName": { "type": "string" },
                        "theme": { "type": "string", "format": "color" },
                        "flags": { "type": "object", "properties": { "form": { "type": "boolean", "required": false } } },
                        "editable": { "type": "boolean" },
                        "queueCount": { "type": "integer" },
                        "queueLimit": { "type": "integer" },
                        "enabled": { "type": "boolean" },
                        "gone": { "type": "boolean" },
                        "typeName": { "type": "string" },
                        "data": {
                          "type": "object",
                          "additionalProperties": true,
                          "properties": {
                            "headers": { "type": "boolean", "required": false },
                            "method": { "type": "boolean", "required": false },
                            "stringify": { "type": "boolean", "required": false },
                            "teamId": { "type": "integer", "required": false },
                            "ip": { "type": "string", "format": "ipv6", "required": false },
                            "udt": { "type": "string", "required": false }
                          }
                        },
                        "scenarioId": { "type": "integer" },
                        "url": { "type": "string", "format": "uri" }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Partial update",
                    "value": {
                      "hook": {
                        "id": 11,
                        "name": "My gateway-webhook webhook 1",
                        "teamId": 4,
                        "udid": "1gqnexkk1vwxg2wpj39kg30pzp6uhe7h",
                        "type": "web",
                        "packageName": null,
                        "theme": "#c73a63",
                        "editable": true,
                        "queueCount": 0,
                        "queueLimit": 10000,
                        "enabled": true,
                        "gone": false,
                        "typeName": "gateway-webhook",
                        "data": { "headers": false, "method": false, "stringify": false },
                        "url": "https://local.integromat.cloud/wh/1gqnexkk1vwxg2wpj39kg30pzp6uhe7h"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/ping": {
      "get": {
        "tags": ["Hooks"],
        "summary": "Ping hook",
        "description": "Determines if a hook with a given ID is active and retrieves its properties that provide you with the address of the hook and inform if the hook is attached, what is its learning status, and if it was not used for a long time.",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string", "format": "uri" },
                    "attached": { "type": "boolean" },
                    "learning": { "type": "boolean" },
                    "gone": { "type": "boolean" }
                  }
                },
                "examples": {
                  "ping": {
                    "summary": "Ping hook",
                    "value": {
                      "address": "https://local.integromat.cloud/wh/wmhqi8todng3en3z2tl7ausm15tg33iz",
                      "attached": false,
                      "learning": false,
                      "gone": false
                    },
                    "originalRequest": {
                      "parameters": [{ "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true }]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/learn-start": {
      "post": {
        "tags": ["Hooks"],
        "summary": "Learn start",
        "description": "Starts the process of learning the request body structure by a hook with a given ID. When you send to the hook address a request with data in its body, you can use this endpoint to force the hook to start determining the payload data structure which will later be suggested in the scenario as the output of the hook. The data structure learning process also starts automatically when a new hook is created and stops once the data structure is determined. If you want to stop this process, you can use the `POST \\hooks\\{hookId}\\learn-stop` request.",
        "security": [{ "token": ["hooks:write"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "success": { "type": "boolean" } } },
                "example": { "success": true }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/learn-stop": {
      "post": {
        "tags": ["Hooks"],
        "summary": "Learn stop",
        "description": "Stops the process of learning the request body structure by a hook with a given ID. When you send to the hook address a request with data in its body, you can use `POST /hooks/{hookId}/learn-start` to force the hook to start determining the payload data structure which will later be suggested in the scenario as the output of the hook. The data structure learning process also starts automatically when a new hook is created and stops once the data structure is determined. You can use this endpoint to stop the learning process at any time.",
        "security": [{ "token": ["hooks:write"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "success": { "type": "boolean" } } },
                "example": { "success": true }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/enable": {
      "post": {
        "tags": ["Hooks"],
        "summary": "Enable hook",
        "description": "Enables a disabled hook with a given ID. Newly created hooks are enabled by default which means they are ready to accept data. In response, this endpoint returns the confirmation that the hook was successfully enabled.",
        "security": [{ "token": ["hooks:write"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "success": { "type": "boolean" } } },
                "example": { "success": true }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/disable": {
      "post": {
        "tags": ["Hooks"],
        "summary": "Disable hook",
        "description": "Disables a hook with a given ID. Newly created hooks are enabled by default which means they are ready to accept data. The disabled hook does not accept any data. This endpoint can be useful, for instance, when you want to debug the scenario functionality. In response, this endpoint returns the confirmation that the hook was successfully disabled.",
        "security": [{ "token": ["hooks:write"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "success": { "type": "boolean" } } },
                "example": { "success": true }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/set-data": {
      "post": {
        "tags": ["Hooks"],
        "summary": "Set hook details",
        "description": "Sets data for a hook with a given ID. Data differ depending on the hook type. It returns the confirmation if the connection was changed (true) or not (false).",
        "security": [{ "token": ["hooks:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "example": { "ip": "", "udt": "", "headers": false, "method": false, "stringify": false }
            }
          }
        },
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          },
          { "name": "reauthorize", "in": "query", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": { "set-data": { "summary": "Set data", "value": { "changed": true } } }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/incomings": {
      "get": {
        "tags": ["Hooks > Incomings"],
        "summary": "List",
        "description": "",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "scope": { "type": "string" },
                          "size": { "type": "integer" },
                          "created": { "type": "string", "format": "date-time" },
                          "data": { "type": "object" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "example": {
                  "incomings": [
                    { "id": "a17c1163d7e04d258fce6bac2c8bd3d6", "scope": "hook", "size": 1, "created": "2021-02-03T09:59:36.260Z" },
                    { "id": "73b56c93f1ff49fe880eeab4fe4c029b", "scope": "hook", "size": 1, "created": "2021-02-03T09:59:38.594Z" }
                  ],
                  "pg": { "sortBy": "created", "limit": 10000, "sortDir": "asc", "offset": 0 }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Hooks > Incomings"],
        "summary": "Delete",
        "description": "\"ids\" and \"all\" can no be used together<br />\r\n\"ids\" or \"all\" has to be set<br />\r\n\"exceptIds\" is possible to use only with \"all\"<br />\r\nIt could happen, that some incoming messages are deleted and others not. In this case, the API returns a successful status code, and the response additionally contains an error object with a error description.",
        "security": [{ "token": ["hooks:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": { "type": "array", "items": { "type": "string" } },
                  "exceptIds": { "type": "array", "items": { "type": "string" } },
                  "all": { "type": "boolean" }
                }
              },
              "example": { "ids": ["706e24cbb847402bb79d136c464a36e7"], "exceptIds": [], "all": false }
            }
          }
        },
        "parameters": [
          { "name": "hookId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomings": { "type": "array", "items": { "type": "string" } },
                    "error": { "type": "object", "properties": { "name": { "type": "string" }, "message": { "type": "string" } } }
                  }
                },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": {
                      "incomings": [
                        "4ff11b6d24e24fa9add17d11a8143578",
                        "167193ab06d34b879346c69aebc8f5c1",
                        "d1efa5318a034d36ad7cbeac543573cf",
                        "29d9a7410dff494ab739036f6c332335"
                      ]
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": { "ids": { "type": "array" }, "exceptIds": { "type": "array" }, "all": { "type": "boolean" } }
                            },
                            "example": { "ids": [], "exceptIds": [], "all": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  },
                  "delete-with-error": {
                    "summary": "Delete with error",
                    "value": {
                      "incomings": ["02731358e5ab4022aff040015a1f1a57", "dcf18b685e5c4095b9ee24cea09146d3"],
                      "error": {
                        "name": "APIError",
                        "message": "Some of the incoming messages could not be deleted because they are being processed right now."
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "ids": { "type": "array", "items": { "type": "string" } },
                                "exceptIds": { "type": "array" },
                                "all": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "ids": [
                                "dcf18b685e5c4095b9ee24cea09146d3",
                                "4f5bdd7f-dc36-4699-9df8-317b53456b13",
                                "02731358-e5ab-4022-aff0-40015a1f1a57"
                              ],
                              "exceptIds": [],
                              "all": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/incomings/{incomingId}": {
      "get": {
        "tags": ["Hooks > Incomings"],
        "summary": "Detail",
        "description": "",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          },
          { "name": "incomingId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incoming": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "scope": { "type": "string" },
                        "size": { "type": "integer" },
                        "created": { "type": "string", "format": "date-time" },
                        "data": { "type": "object" }
                      }
                    }
                  }
                },
                "examples": {
                  "detail-2": {
                    "summary": "Detail 2",
                    "value": {
                      "incoming": {
                        "id": "7a567f385d1a4f5ab7bff89162b7605e",
                        "scope": "hook",
                        "size": 31,
                        "created": "2020-03-05T14:48:10.537Z",
                        "data": {
                          "value": "IMTBuffer(22, binary, d4cf3d1cbf035278e7a1a909e71354d7a0387db9): 7b0a20202020226e616d65223a202274657374220a7d"
                        }
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "incomingId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  },
                  "detail-1": {
                    "summary": "Detail 1",
                    "value": {
                      "incoming": {
                        "id": "8d88f6f5b0484908890ef11fe7e5bf63",
                        "scope": "hook",
                        "size": 11,
                        "created": "2020-03-05T14:52:01.359Z",
                        "data": { "name": "test" }
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "incomingId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}/incomings/stats": {
      "get": {
        "tags": ["Hooks > Incomings"],
        "summary": "Stats",
        "description": "",
        "security": [{ "token": ["hooks:read"] }],
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the hook. It can be retrieved from the `/hooks` endpoint.",
            "example": 654
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomingStat": {
                      "type": "object",
                      "properties": { "queue": { "type": "integer" }, "limit": { "type": "integer" }, "enabled": { "type": "boolean" } }
                    }
                  }
                },
                "examples": {
                  "stats": {
                    "summary": "Stats",
                    "value": { "incomingStat": { "queue": 2, "limit": 10000, "enabled": true } },
                    "originalRequest": {
                      "parameters": [{ "name": "hookId", "in": "path", "schema": { "type": "string" }, "required": true }]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys": {
      "get": {
        "tags": ["Keys"],
        "summary": "List",
        "description": "",
        "security": [{ "token": ["keys:read"] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "required": true, "example": 1 },
          { "name": "typeName", "in": "query", "schema": { "type": "string" }, "example": "basicauth" },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["id", "name", "typeName", "teamId", "packageName", "theme"] }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "typeName": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "packageName": { "type": "string" },
                          "theme": { "type": "string", "format": "color" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "keys": [
                        { "id": 1, "name": "My HTTP Basic Auth key" },
                        { "id": 2, "name": "My HTTP Basic Auth key" }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" },
                        { "name": "typeName", "in": "query", "schema": { "type": "string" }, "example": "basicauth" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "typeName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "teamId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "packageName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "theme" }
                      ]
                    }
                  },
                  "list-all": {
                    "summary": "List all",
                    "value": {
                      "keys": [
                        {
                          "id": 1,
                          "name": "My HTTP Basic Auth key",
                          "typeName": "basicauth",
                          "teamId": 4,
                          "packageName": null,
                          "theme": "#007ee5"
                        },
                        {
                          "id": 2,
                          "name": "My HTTP Basic Auth key",
                          "typeName": "basicauth",
                          "teamId": 4,
                          "packageName": null,
                          "theme": "#007ee5"
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" },
                        { "name": "typeName", "in": "query", "schema": { "type": "string" }, "example": "basicauth" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "typeName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "teamId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "packageName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "theme" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Keys"],
        "summary": "Create",
        "description": "",
        "security": [{ "token": ["keys:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": { "type": "integer", "required": true },
                  "name": { "type": "string", "required": true },
                  "typeName": { "type": "string", "required": true },
                  "parameters": { "type": "object" }
                }
              },
              "example": {
                "teamId": 1,
                "name": "My HTTP Basic Auth key",
                "typeName": "basicauth",
                "parameters": { "authUser": "Martin", "authPass": "xxx" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "typeName": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "packageName": { "type": "string" },
                        "theme": { "type": "string", "format": "color" }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "key": {
                        "id": 17,
                        "name": "My HTTP Basic Auth key",
                        "typeName": "basicauth",
                        "teamId": 4,
                        "packageName": null,
                        "theme": "#007ee5"
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "teamId": { "type": "integer" },
                                "name": { "type": "string" },
                                "typeName": { "type": "string" },
                                "parameters": {
                                  "type": "object",
                                  "properties": { "authUser": { "type": "string" }, "authPass": { "type": "string" } }
                                }
                              }
                            },
                            "example": {
                              "teamId": 1,
                              "name": "My HTTP Basic Auth key",
                              "typeName": "basicauth",
                              "parameters": { "authUser": "Martin", "authPass": "xxx" }
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/types": {
      "get": {
        "tags": ["Keys"],
        "summary": "Types",
        "description": "",
        "security": [{ "token": ["keys:read"] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keysTypes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "label": { "type": "string" },
                          "parameters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                            }
                          },
                          "componentType": { "type": "string" },
                          "author": { "type": "string" },
                          "version": { "type": "string" },
                          "theme": { "type": "string", "format": "color" },
                          "icon": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "keysTypes": [
                    {
                      "name": "basicauth",
                      "label": "HTTP Basic Auth",
                      "parameters": [
                        { "name": "authUser", "label": "Username", "type": "text" },
                        { "name": "authPass", "label": "Password", "type": "password" }
                      ],
                      "componentType": "key",
                      "author": "Petr Malimanek",
                      "version": "3.25.4",
                      "theme": "#007ee5",
                      "icon": "/img/packages/basicauth.png"
                    },
                    {
                      "name": "clientcertauth",
                      "label": "HTTPS Client Certificate Auth",
                      "parameters": [
                        {
                          "name": "cert",
                          "label": "Certificate",
                          "type": "cert",
                          "validate": { "pattern": "^-----BEGIN CERTIFICATE-----[\\s\\S]+-----END CERTIFICATE-----\\n*$" }
                        },
                        {
                          "name": "key",
                          "label": "Private key",
                          "type": "pkey",
                          "validate": { "pattern": "^-----BEGIN PRIVATE KEY-----[\\s\\S]+-----END PRIVATE KEY-----\\n*$" }
                        }
                      ],
                      "componentType": "key",
                      "author": "Petr Malimanek",
                      "version": "3.25.4",
                      "theme": "#007ee5",
                      "icon": "/img/packages/clientcertauth.png"
                    },
                    {
                      "name": "eet",
                      "label": "EET",
                      "parameters": [
                        { "name": "privateKey", "type": "pkey", "label": "Private Key", "required": true },
                        { "name": "certificate", "type": "cert", "label": "Certificate", "required": true }
                      ],
                      "componentType": "key",
                      "author": "Jakub Mrozek",
                      "version": "1.4.2",
                      "theme": "#ff001d",
                      "icon": "/img/packages/eet.png"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/keys/{keyId}": {
      "patch": {
        "tags": ["Keys"],
        "summary": "Partial update",
        "description": "",
        "security": [{ "token": ["keys:write"] }],
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" }, "example": { "name": "HTTP Basic Auth key 2" } } }
        },
        "parameters": [{ "name": "keyId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "typeName": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "packageName": { "type": "string" },
                        "theme": { "type": "string", "format": "color" }
                      }
                    }
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial update",
                    "value": {
                      "key": {
                        "id": 1,
                        "name": "HTTP Basic Auth key 2",
                        "typeName": "basicauth",
                        "teamId": 4,
                        "packageName": null,
                        "theme": "#007ee5"
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "name": { "type": "string" } } },
                            "example": { "name": "HTTP Basic Auth key 2" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "keyId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Keys"],
        "summary": "Delete",
        "description": "",
        "security": [{ "token": ["keys:write"] }],
        "parameters": [
          { "name": "keyId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "hook": { "type": "integer" } } },
                "example": { "hook": 16 }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "List notifications",
        "description": "Retrieves a collection of all notifications for the authenticated user. Returned notifications are sorted by name, with the most recently created notifications appearing first.",
        "security": [{ "token": ["notifications:read"] }],
        "parameters": [
          {
            "name": "unreadOnly",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "If set to **true**, this parameter returns only the unread notifications.",
            "example": true
          },
          {
            "name": "imtZoneId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the Integromat zone. This parameter is required to retrieve notifications from the Integromat Next version. In other cases, it can be ignored. The IDs of the zones can be obtained from the `/enum/imt-zones` endpoint.",
            "example": 2
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "subject": { "type": "string" },
                          "read": { "type": "string", "format": "date-time" },
                          "created": { "type": "string", "format": "date-time" },
                          "type": { "type": "integer" }
                        }
                      }
                    },
                    "userUnreadNotifications": { "type": "integer" },
                    "userZoneNotifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "imtZoneId": { "type": "integer" }, "unreadNotifications": { "type": "integer" } }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "notifications": [
                        {
                          "id": "1",
                          "subject": "Encountered error in Integration HTTP 3 scenario",
                          "read": "2020-03-02T11:50:02.676Z",
                          "created": "2020-01-22T13:24:29.219Z",
                          "type": 1
                        },
                        {
                          "id": "3",
                          "subject": "Encountered error in Integration HTTP 3 scenario",
                          "read": null,
                          "created": "2020-01-22T13:54:29.748Z",
                          "type": 1
                        },
                        {
                          "id": "4",
                          "subject": "The scenario Integration HTTP 3 has been stopped.",
                          "read": null,
                          "created": "2020-01-22T13:54:29.763Z",
                          "type": 1
                        }
                      ],
                      "userUnreadNotifications": 2,
                      "pg": { "sortBy": "id", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    }
                  },
                  "list-slave": {
                    "summary": "List slave",
                    "value": {
                      "notifications": [
                        {
                          "id": "3",
                          "subject": "Encountered error in Integration HTTP scenario",
                          "read": "2021-05-14T11:35:22.837Z",
                          "created": "2021-05-14T11:18:43.340Z",
                          "type": 1
                        },
                        {
                          "id": "2",
                          "subject": "Encountered error in Integration HTTP scenario",
                          "read": null,
                          "created": "2021-05-14T11:17:04.433Z",
                          "type": 1
                        },
                        {
                          "id": "1",
                          "subject": "Encountered error in Integration HTTP scenario",
                          "read": null,
                          "created": "2021-05-14T11:14:08.675Z",
                          "type": 1
                        }
                      ],
                      "userUnreadNotifications": 4,
                      "userZoneNotifications": [{ "imtZoneId": 1, "unreadNotifications": 4 }],
                      "pg": { "sortBy": "id", "limit": 10000, "sortDir": "desc", "offset": 0 }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Notifications"],
        "summary": "Delete notification",
        "description": null,
        "security": [{ "token": ["notifications:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "ids": { "type": "array", "items": { "type": "string" } } },
                "required": ["ids"]
              },
              "example": { "ids": ["1", "2", "3"] }
            }
          }
        },
        "parameters": [
          {
            "name": "imtZoneId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the Integromat zone. This parameter is required to retrieve notifications from the Integromat Next version. In other cases, it can be ignored. The IDs of the zones can be obtained from the `/enum/imt-zones` endpoint.",
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": { "type": "array", "items": { "type": "object", "properties": { "id": { "type": "string" } } } }
                  }
                },
                "example": { "notifications": [{ "id": "1" }, { "id": "2" }] }
              }
            }
          }
        }
      }
    },
    "/notifications/{notificationId}": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notification detail",
        "description": "Retrieves details of a notification with a given ID.",
        "security": [{ "token": ["notifications:read"] }],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "schema": { "type": "string" },
            "description": "The unique string ID of the notification. It can be retrieved from the `/notifications` endpoint.",
            "required": true,
            "example": "3"
          },
          {
            "name": "imtZoneId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the Integromat zone. This parameter is required to retrieve notifications from the Integromat Next version. In other cases, it can be ignored. The IDs of the zones can be obtained from the `/enum/imt-zones` endpoint.",
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notification": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "subject": { "type": "string" },
                            "read": { "type": "string", "format": "date-time" },
                            "created": { "type": "string", "format": "date-time" },
                            "type": { "type": "integer" }
                          }
                        },
                        { "type": "object", "properties": { "body": { "type": "string" } } }
                      ]
                    }
                  }
                },
                "example": {
                  "notification": {
                    "id": "3",
                    "subject": "Encountered error in Integration HTTP 3 scenario",
                    "read": "2020-02-29T21:20:40.093Z",
                    "created": "2020-01-22T13:54:29.748Z",
                    "type": 1,
                    "body": "<p>Your scenario <strong>Integration HTTP 3</strong> has encountered an error.</p>\n<p>The scenario has not been paused and continues to run according to your settings. Nevertheless, you should pay attention to the issue.</p>\n<ul>\n<li>Scenario: <a href=\"https://local.integromat.cloud/scenario/86/log\">Integration HTTP 3</a></li>\n<li>Organization: <a href=\"https://local.integromat.cloud/organization/2\">test team</a></li>\n<li>Team: <a href=\"https://local.integromat.cloud/team/1\">My Lab</a></li>\n<li>Execution: <a href=\"https://local.integromat.cloud/scenario/86/log/d4f49055d5f44705b2aaf77a09547b77\">d4f49055d5f44705b2aaf77a09547b77</a></li>\n</ul>\n<p>Details:</p>\n<ul>\n<li><code>Validation failed for 1 parameter(s).</code></li>\n<li><code>Missing value of required parameter &#39;{{!expect.json.label}}&#39;.</code></li>\n</ul>\n<p>If you have questions or need help, please contact us.</p>\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/mark-as-read": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Mark notification as read",
        "description": "Marks a notification with a given ID as read and returns the IDs of the updated notifications.",
        "security": [{ "token": ["notifications:write"] }],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": { "type": "string", "example": "all" },
            "description": "If set to **all**, this parameter marks all notifications as read.",
            "example": "all"
          },
          {
            "name": "imtZoneId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the Integromat zone. This parameter is required to retrieve notifications from the Integromat Next version. In other cases, it can be ignored. The IDs of the zones can be obtained from the `/enum/imt-zones` endpoint.",
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": { "type": "array", "items": { "type": "object", "properties": { "id": { "type": "string" } } } }
                  }
                },
                "example": { "notifications": [{ "id": "1" }, { "id": "2" }, { "id": "3" }, { "id": "4" }, { "id": "5" }] }
              }
            }
          }
        }
      }
    },
    "/oauth/auth/{connectionId}": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Authorize (deprecated)",
        "deprecated": true,
        "parameters": [
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "array", "items": { "type": "string" } } }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } } },
                "examples": { "authorize": { "summary": "Authorize", "value": { "url": "https://www.some-sass-url.com/" } } }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Oauth"],
        "summary": "Authorize",
        "parameters": [
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "array", "items": { "type": "string" } } }
        ],
        "responses": { "302": { "description": "Redirect to connection's authorization page" } }
      }
    },
    "/oauth/reauth/{connectionId}": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Reauthorize (deprecated)",
        "deprecated": true,
        "parameters": [
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "scope",
            "in": "query",
            "collectionFormat": "multi",
            "schema": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
            "example": "scope=value&scope=another_value"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } } },
                "examples": { "reauthorize": { "summary": "Reauthorize", "value": { "url": "https://www.some-sass-url.com/" } } }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Oauth"],
        "summary": "Reauthorize",
        "parameters": [
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "scope", "in": "query", "schema": { "type": "array", "items": { "type": "string" } } }
        ],
        "responses": { "302": { "description": "Redirect to connection authorization page" } }
      }
    },
    "/oauth/extend/{connectionId}": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Extend (deprecated)",
        "deprecated": true,
        "parameters": [{ "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } } },
                "examples": { "extend": { "summary": "Extend", "value": { "url": "https://www.some-sass-url.com/" } } }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Oauth"],
        "summary": "Extend",
        "parameters": [{ "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } } },
                "examples": { "extend": { "summary": "Extend", "value": { "url": "https://www.some-sass-url.com/" } } }
              }
            }
          }
        }
      }
    },
    "/oauth/cb/{connectionType}": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Oauth Callback (deprecated)",
        "deprecated": true,
        "parameters": [{ "name": "connectionType", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } },
                "examples": { "oauth-callback": { "summary": "Oauth Callback", "value": { "ok": 1 } } }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Oauth"],
        "summary": "Oauth Callback",
        "parameters": [{ "name": "connectionType", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": { "302": { "description": "Redirect to connection authorization page" } }
      }
    },
    "/oauth/cb/{connectionType}/{connectionId}": {
      "post": {
        "tags": ["Oauth"],
        "summary": "Oauth Callback Id (deprecated)",
        "deprecated": true,
        "parameters": [
          { "name": "connectionType", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } },
                "examples": { "oauth-callback-id": { "summary": "Oauth Callback Id", "value": { "ok": 1 } } }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Oauth"],
        "summary": "Oauth Callback Id",
        "parameters": [
          { "name": "connectionType", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "connectionId", "in": "path", "schema": { "type": "integer" }, "required": true }
        ],
        "responses": { "302": { "description": "Redirect to connection authorization page" } }
      }
    },
    "/organizations": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List",
        "security": [{ "token": ["organizations:read"] }],
        "description": "Organizations from a foreign zone have the following attributes null: license, serviceName, teams, isPaused",
        "parameters": [
          { "name": "zone", "in": "query", "schema": { "type": "string" }, "example": "eu" },
          { "name": "externalId", "in": "query", "schema": { "type": "string" }, "example": "TESTORG003" },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "countryId", "timezoneId", "license", "zone", "serviceName", "teams", "isPaused", "externalId"]
              }
            },
            "examples": {
              "default-cols": { "summary": "Default columns", "value": ["id", "name", "timezoneId"] },
              "all-cols": {
                "summary": "All columns",
                "value": ["id", "name", "countryId", "timezoneId", "license", "zone", "serviceName", "teams", "isPaused", "externalId"]
              }
            }
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "serviceName": { "type": "string" },
                          "nextReset": { "type": "string", "format": "timestamp" },
                          "operations": { "type": "string" },
                          "transfer": { "type": "string" },
                          "operationsExt": { "type": "string" },
                          "transferExt": { "type": "string" },
                          "isPaused": { "type": "boolean" },
                          "countryId": { "type": "integer" },
                          "timezoneId": { "type": "integer" },
                          "deleted": { "type": "boolean" },
                          "license": {
                            "type": "object",
                            "properties": {
                              "apps": { "type": "array", "items": { "type": "string" } },
                              "users": { "type": "integer" },
                              "dslimit": { "type": "integer" },
                              "fslimit": { "type": "integer" },
                              "iolimit": { "type": "integer" },
                              "dsslimit": { "type": "integer" },
                              "fulltext": { "type": "boolean" },
                              "interval": { "type": "integer" },
                              "transfer": { "type": "integer" },
                              "operations": { "type": "integer" }
                            }
                          },
                          "features": { "type": "object" },
                          "zone": { "type": "string" },
                          "teams": {
                            "type": "array",
                            "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                          }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "default-cols": {
                    "summary": "Default columns",
                    "value": {
                      "organizations": [
                        { "id": 5, "name": "New organization", "timezoneId": 113 },
                        { "id": 6, "name": "New organization", "timezoneId": 113 },
                        { "id": 7, "name": "New organization", "timezoneId": 113 },
                        { "id": 8, "name": "New organization", "timezoneId": 113 },
                        { "id": 9, "name": "New organization", "timezoneId": 113 },
                        { "id": 1, "name": "Organization Martin", "timezoneId": 113 },
                        { "id": 2, "name": "test team", "timezoneId": 113 }
                      ],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    }
                  },
                  "all-columns": {
                    "summary": "All columns",
                    "value": {
                      "organizations": [
                        {
                          "name": "New organization",
                          "id": 5,
                          "countryId": 1,
                          "timezoneId": 113,
                          "license": {
                            "apps": "T2",
                            "users": 50,
                            "dslimit": 40,
                            "fslimit": 2147483648,
                            "iolimit": 10000,
                            "dsslimit": 524288000,
                            "fulltext": true,
                            "interval": 1,
                            "transfer": 1099511627776,
                            "operations": 800000000
                          },
                          "zone": "local.integromat.cloud",
                          "serviceName": "unlimited",
                          "teams": [{ "id": 5, "name": "My Team" }],
                          "isPaused": false
                        },
                        {
                          "name": "New organization",
                          "id": 6,
                          "countryId": 1,
                          "timezoneId": 113,
                          "license": {
                            "apps": "T2",
                            "users": 50,
                            "dslimit": 40,
                            "fslimit": 2147483648,
                            "iolimit": 10000,
                            "dsslimit": 524288000,
                            "fulltext": true,
                            "interval": 1,
                            "transfer": 1099511627776,
                            "operations": 800000000
                          },
                          "zone": "local.integromat.cloud",
                          "serviceName": "unlimited",
                          "teams": [{ "id": 6, "name": "My Team" }],
                          "isPaused": false
                        },
                        {
                          "name": "New organization",
                          "id": 7,
                          "countryId": 1,
                          "timezoneId": 113,
                          "license": {
                            "apps": "T2",
                            "users": 50,
                            "dslimit": 40,
                            "fslimit": 2147483648,
                            "iolimit": 10000,
                            "dsslimit": 524288000,
                            "fulltext": true,
                            "interval": 1,
                            "transfer": 1099511627776,
                            "operations": 800000000
                          },
                          "zone": "local.integromat.cloud",
                          "serviceName": "unlimited",
                          "teams": [{ "id": 7, "name": "My Team" }],
                          "isPaused": false
                        },
                        {
                          "name": "New organization",
                          "id": 8,
                          "countryId": 1,
                          "timezoneId": 113,
                          "license": {
                            "apps": "T2",
                            "users": 50,
                            "dslimit": 40,
                            "fslimit": 2147483648,
                            "iolimit": 10000,
                            "dsslimit": 524288000,
                            "fulltext": true,
                            "interval": 1,
                            "transfer": 1099511627776,
                            "operations": 1000
                          },
                          "zone": "local.integromat.cloud",
                          "serviceName": "unlimited",
                          "teams": [{ "id": 8, "name": "My Team" }],
                          "isPaused": true
                        },
                        {
                          "name": "New organization",
                          "id": 9,
                          "countryId": 1,
                          "timezoneId": 113,
                          "license": {
                            "apps": "T2",
                            "users": 50,
                            "dslimit": 40,
                            "fslimit": 2147483648,
                            "iolimit": 10000,
                            "dsslimit": 524288000,
                            "fulltext": true,
                            "interval": 1,
                            "transfer": 1099511627776,
                            "operations": 800000000
                          },
                          "zone": "local.integromat.cloud",
                          "serviceName": "unlimited",
                          "teams": [{ "id": 9, "name": "My Team" }],
                          "isPaused": false
                        }
                      ],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Organizations"],
        "summary": "Create",
        "security": [{ "token": ["admin:write", "organizations:write"] }],
        "description": "countryId - if not specified, it is used the identical to the request author<br />\ntimezoneId - if not specified, it is used the identical to the request author<br />\nuserOrgAdmin - if not specified, the request author is organization admin<br /> license - if not specified, default value is used<br />",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "examples": {
                "create": {
                  "summary": "Create",
                  "value": { "name": "New organization I", "regionId": 1, "timezoneId": 113, "countryId": 1 }
                },
                "create-different-zone": {
                  "summary": "Create - different zone",
                  "value": { "name": "New organization I", "regionId": 1, "timezoneId": 113, "countryId": 1 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "serviceName": { "type": "string" },
                        "nextReset": { "type": "string", "format": "timestamp" },
                        "operations": { "type": "string" },
                        "transfer": { "type": "string" },
                        "operationsExt": { "type": "string" },
                        "transferExt": { "type": "string" },
                        "isPaused": { "type": "boolean" },
                        "countryId": { "type": "integer" },
                        "timezoneId": { "type": "integer" },
                        "deleted": { "type": "boolean" },
                        "license": {
                          "type": "object",
                          "properties": {
                            "apps": { "type": "array", "items": { "type": "string" } },
                            "users": { "type": "integer" },
                            "dslimit": { "type": "integer" },
                            "fslimit": { "type": "integer" },
                            "iolimit": { "type": "integer" },
                            "dsslimit": { "type": "integer" },
                            "fulltext": { "type": "boolean" },
                            "interval": { "type": "integer" },
                            "transfer": { "type": "integer" },
                            "operations": { "type": "integer" }
                          }
                        },
                        "features": { "type": "object" },
                        "zone": { "type": "string" },
                        "teams": {
                          "type": "array",
                          "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "organization": {
                        "id": 9,
                        "name": "New organization",
                        "timezoneId": 113,
                        "countryId": 1,
                        "license": {
                          "apps": [],
                          "users": 50,
                          "dslimit": 40,
                          "fslimit": 2147483648,
                          "iolimit": 10000,
                          "advsched": true,
                          "dsslimit": 524288000,
                          "fulltext": true,
                          "interval": 1,
                          "transfer": 1099511627776,
                          "operations": 800000000
                        },
                        "zone": "slave1.integromat.cloud",
                        "serviceName": "default",
                        "teams": [{ "id": 6, "name": "My Team" }],
                        "isPaused": false
                      },
                      "userOrganizationRole": { "userId": 3, "organizationId": 9, "usersRoleId": 11, "invitation": null }
                    }
                  },
                  "create-different-zone": {
                    "summary": "Create - different zone",
                    "value": {
                      "organization": {
                        "id": 7,
                        "name": "New organization",
                        "countryId": 1,
                        "timezoneId": 113,
                        "zone": "slave2.integromat.cloud",
                        "license": null,
                        "serviceName": null,
                        "teams": null,
                        "isPaused": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/invitation": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Invitation detail",
        "security": [{ "token": ["organizations:read"] }],
        "parameters": [
          {
            "name": "hash",
            "in": "query",
            "schema": { "type": "string" },
            "required": true,
            "example": "bf1effe1-bc9d-4ab3-9414-9c3b66175305"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "language": { "type": "string" },
                        "timezoneId": { "type": "integer" },
                        "localeId": { "type": "integer" },
                        "countryId": { "type": "integer" },
                        "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                        "avatar": { "type": "string", "format": "uri" }
                      }
                    },
                    "userOrganizationRole": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "usersRoleId": { "type": "integer" },
                        "invitation": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "invitation-detail": {
                    "summary": "Invitation detail",
                    "value": {
                      "organization": { "id": 13, "name": "New organization" },
                      "user": {
                        "id": 1,
                        "name": "Martin",
                        "email": "admin@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": {},
                        "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm"
                      },
                      "userOrganizationRole": { "userId": 1, "organizationId": 13, "usersRoleId": 12, "invitation": "pending" }
                    },
                    "originalRequest": {
                      "parameters": [
                        {
                          "name": "hash",
                          "in": "query",
                          "schema": { "type": "string" },
                          "example": "bf1effe1-bc9d-4ab3-9414-9c3b66175305"
                        },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/accept-invitation": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Accept invitation",
        "security": [{ "token": ["organizations:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "hash": { "type": "string", "required": true } } },
              "example": { "hash": "bf1effe1-bc9d-4ab3-9414-9c3b66175305" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "language": { "type": "string" },
                        "timezoneId": { "type": "integer" },
                        "localeId": { "type": "integer" },
                        "countryId": { "type": "integer" },
                        "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                        "avatar": { "type": "string", "format": "uri" }
                      }
                    },
                    "userOrganizationRole": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "usersRoleId": { "type": "integer" },
                        "invitation": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "accept-invitation": {
                    "summary": "Accept invitation",
                    "value": {
                      "user": {
                        "id": 1,
                        "name": "Martin",
                        "email": "admin@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": {},
                        "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm"
                      },
                      "userOrganizationRole": { "userId": 1, "organizationId": 13, "usersRoleId": 12, "invitation": null }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "hash": { "type": "string" } } },
                            "example": { "hash": "bf1effe1-bc9d-4ab3-9414-9c3b66175305" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Detail",
        "description": "",
        "security": [{ "token": ["organizations:read"] }],
        "parameters": [
          { "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "wait",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "the request is waiting for the organization creation process to complete",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "serviceName": { "type": "string" },
                        "nextReset": { "type": "string", "format": "timestamp" },
                        "operations": { "type": "string" },
                        "transfer": { "type": "string" },
                        "operationsExt": { "type": "string" },
                        "transferExt": { "type": "string" },
                        "isPaused": { "type": "boolean" },
                        "countryId": { "type": "integer" },
                        "timezoneId": { "type": "integer" },
                        "deleted": { "type": "boolean" },
                        "license": {
                          "type": "object",
                          "properties": {
                            "apps": { "type": "array", "items": { "type": "string" } },
                            "users": { "type": "integer" },
                            "dslimit": { "type": "integer" },
                            "fslimit": { "type": "integer" },
                            "iolimit": { "type": "integer" },
                            "dsslimit": { "type": "integer" },
                            "fulltext": { "type": "boolean" },
                            "interval": { "type": "integer" },
                            "transfer": { "type": "integer" },
                            "operations": { "type": "integer" }
                          }
                        },
                        "features": { "type": "object" },
                        "zone": { "type": "string" },
                        "teams": {
                          "type": "array",
                          "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": {
                      "organization": {
                        "id": 10,
                        "name": "Organization 10",
                        "serviceName": "unlimited",
                        "nextReset": null,
                        "operations": "0",
                        "transfer": "0",
                        "operationsExt": "0",
                        "transferExt": "0",
                        "isPaused": false,
                        "countryId": 1,
                        "timezoneId": 113,
                        "deleted": false,
                        "license": {
                          "apps": ["T2", "T3"],
                          "users": 50,
                          "dslimit": 40,
                          "fslimit": 2147483648,
                          "iolimit": 10000,
                          "dsslimit": 524288000,
                          "fulltext": true,
                          "interval": 1,
                          "transfer": 1099511627776,
                          "operations": 800000000
                        },
                        "features": {},
                        "zone": "local.integromat.cloud",
                        "teams": [{ "id": 16, "name": "My Team" }]
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Organizations"],
        "summary": "Partial update",
        "description": "",
        "security": [{ "token": ["organizations:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "example": { "name": "Organization 10", "timezoneId": 113, "countryId": 1 }
            }
          }
        },
        "parameters": [{ "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "serviceName": { "type": "string" },
                        "nextReset": { "type": "string", "format": "timestamp" },
                        "operations": { "type": "string" },
                        "transfer": { "type": "string" },
                        "operationsExt": { "type": "string" },
                        "transferExt": { "type": "string" },
                        "isPaused": { "type": "boolean" },
                        "countryId": { "type": "integer" },
                        "timezoneId": { "type": "integer" },
                        "deleted": { "type": "boolean" },
                        "license": {
                          "type": "object",
                          "properties": {
                            "apps": { "type": "array", "items": { "type": "string" } },
                            "users": { "type": "integer" },
                            "dslimit": { "type": "integer" },
                            "fslimit": { "type": "integer" },
                            "iolimit": { "type": "integer" },
                            "dsslimit": { "type": "integer" },
                            "fulltext": { "type": "boolean" },
                            "interval": { "type": "integer" },
                            "transfer": { "type": "integer" },
                            "operations": { "type": "integer" }
                          }
                        },
                        "features": { "type": "object" },
                        "zone": { "type": "string" },
                        "teams": {
                          "type": "array",
                          "items": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" } } }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial update",
                    "value": {
                      "organization": {
                        "name": "Organization 10",
                        "countryId": 1,
                        "timezoneId": 113,
                        "license": {
                          "apps": "T2",
                          "users": 50,
                          "dslimit": 40,
                          "fslimit": 2147483648,
                          "iolimit": 10000,
                          "dsslimit": 524288000,
                          "fulltext": true,
                          "interval": 1,
                          "transfer": 1099511627776,
                          "operations": 800000000
                        },
                        "zone": "local.integromat.cloud",
                        "serviceName": "limit1",
                        "teams": [{ "id": 10, "name": "My Team" }],
                        "isPaused": false,
                        "id": 10
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "timezoneId": { "type": "integer" },
                                "countryId": { "type": "integer" }
                              }
                            },
                            "example": { "name": "Organization test", "timezoneId": 113, "countryId": 1 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organizations"],
        "summary": "Delete",
        "description": "Only available in slave mode.",
        "security": [{ "token": ["organizations:write"] }],
        "parameters": [
          { "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "organization": { "type": "integer" } } },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": { "organization": 11 },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/apps": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get List of Installed Apps",
        "security": [{ "token": ["organizations:read"] }],
        "parameters": [{ "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "installedApps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appName": { "type": "string" },
                          "appVersion": { "type": "integer" },
                          "organizationId": { "type": "integer" },
                          "installedAt": { "type": "string", "format": "date-time" },
                          "installedBy": { "type": "integer" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "get-list-of-installed-apps": {
                    "summary": "Get List of Installed Apps",
                    "value": {
                      "installedApps": [
                        {
                          "appName": "my-app-7xpqrg",
                          "appVersion": 1,
                          "organizationId": 1,
                          "installedAt": "2021-02-09T16:36:11.322Z",
                          "installedBy": 1
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/invite": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Invite",
        "security": [{ "token": ["organizations:write"] }],
        "description": "\r\nteamsId - Add the user to selected teams with the member role (optional).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "usersRoleId": { "type": "integer" },
                  "email": { "type": "string", "format": "email" },
                  "name": { "type": "string" },
                  "note": { "type": "string" },
                  "teamsId": { "type": "array", "items": { "type": "integer" } }
                }
              },
              "example": {
                "usersRoleId": 12,
                "email": "tom@integromat.cloud",
                "name": "Tom",
                "note": "Hi Tom, please join our organization.",
                "teamsId": [5, 26]
              }
            }
          }
        },
        "parameters": [{ "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "language": { "type": "string" },
                        "timezoneId": { "type": "integer" },
                        "localeId": { "type": "integer" },
                        "countryId": { "type": "integer" },
                        "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                        "avatar": { "type": "string", "format": "uri" }
                      }
                    },
                    "userOrganizationRole": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "usersRoleId": { "type": "integer" },
                        "invitation": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "invite": {
                    "summary": "Invite",
                    "value": {
                      "user": {
                        "id": 31,
                        "name": "Tom",
                        "email": "tom@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": {},
                        "avatar": "https://secure.gravatar.com/avatar/ada7391afa4ad83584d00afe3986aef2.jpg?d=mm"
                      },
                      "userOrganizationRole": {
                        "userId": 31,
                        "organizationId": 1,
                        "usersRoleId": 12,
                        "invitation": "pending",
                        "organizationTeamsCount": 2,
                        "joinedTeamsCount": 1
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "usersRoleId": { "type": "integer" },
                                "email": { "type": "string", "format": "email" },
                                "name": { "type": "string" },
                                "note": { "type": "string" }
                              }
                            },
                            "example": {
                              "usersRoleId": 12,
                              "email": "tom@integromat.cloud",
                              "name": "Tom",
                              "note": "Hi Tom, please join our organization."
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/user-organization-roles": {
      "get": {
        "tags": ["Organizations > User organization roles"],
        "summary": "List",
        "security": [{ "token": ["organizations:read"] }],
        "description": "invitation: null = the user is a member of the organization, pending = the user must accept the invitation, expired = the user's invitation to the organization has expired </br>\n",
        "parameters": [
          { "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["userId", "organizationId", "userRoleId", "invitation", "organizationTeamsCount", "joinedTeamsCount"]
              }
            },
            "example": "userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRoles": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "userId": { "type": "integer" },
                              "organizationId": { "type": "integer" },
                              "usersRoleId": { "type": "integer" },
                              "invitation": { "type": "string" }
                            }
                          },
                          {
                            "type": "object",
                            "properties": { "organizationTeamsCount": { "type": "integer" }, "joinedTeamsCount": { "type": "integer" } }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "userOrganizationRoles": [
                        { "userId": 1, "organizationId": 4, "usersRoleId": 11, "invitation": null },
                        { "userId": 2, "organizationId": 4, "usersRoleId": 13, "invitation": "expired" }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "list-all": {
                    "summary": "List All",
                    "value": {
                      "userOrganizationRoles": [
                        {
                          "userId": 1,
                          "organizationId": 4,
                          "usersRoleId": 11,
                          "invitation": null,
                          "organizationTeamsCount": 2,
                          "joinedTeamsCount": 2
                        },
                        {
                          "userId": 2,
                          "organizationId": 4,
                          "usersRoleId": 13,
                          "invitation": "expired",
                          "organizationTeamsCount": 2,
                          "joinedTeamsCount": 0
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/user-organization-roles/{userId}": {
      "get": {
        "tags": ["Organizations > User organization roles"],
        "summary": "Detail",
        "security": [{ "token": ["organizations:read"] }],
        "parameters": [
          { "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "userId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["userId", "organizationId", "userRoleId", "invitation", "organizationTeamsCount", "joinedTeamsCount"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRole": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "userId": { "type": "integer" },
                            "organizationId": { "type": "integer" },
                            "usersRoleId": { "type": "integer" },
                            "invitation": { "type": "string" }
                          }
                        },
                        {
                          "type": "object",
                          "properties": { "organizationTeamsCount": { "type": "integer" }, "joinedTeamsCount": { "type": "integer" } }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": { "userOrganizationRole": { "userId": 1, "organizationId": 4, "usersRoleId": 11, "invitation": null } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "detail-all": {
                    "summary": "Detail All",
                    "value": {
                      "userOrganizationRole": {
                        "userId": 1,
                        "organizationId": 4,
                        "usersRoleId": 11,
                        "invitation": null,
                        "organizationTeamsCount": 2,
                        "joinedTeamsCount": 2
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/user-organization-roles/transfer": {
      "post": {
        "tags": ["Organizations > User organization roles"],
        "summary": "Transfer",
        "description": "Transfer ownership of the organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "userId": { "type": "integer" } } },
              "example": { "userId": 1 }
            }
          }
        },
        "parameters": [{ "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": { "type": "integer" },
                          "organizationId": { "type": "integer" },
                          "usersRoleId": { "type": "integer" },
                          "invitation": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "transfer": {
                    "summary": "Transfer",
                    "value": {
                      "userOrganizationRoles": [
                        { "userId": 12, "organizationId": 10, "usersRoleId": 11, "invitation": null },
                        { "userId": 1, "organizationId": 10, "usersRoleId": 12, "invitation": null }
                      ]
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "userId": { "type": "integer" } } },
                            "example": { "userId": 1 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpcs/{appName}/{appVersion}/{rpcName}": {
      "post": {
        "tags": ["Remote procedures"],
        "summary": "Call RPC",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": { "type": "object" },
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "type": { "type": "string" }, "required": { "type": "boolean" } }
                    }
                  }
                }
              },
              "example": {
                "data": { "id": "1", "jidlo": "Černá zabijačková" },
                "schema": [
                  { "name": "id", "type": "integer", "required": true },
                  { "name": "jidlo", "type": "text", "required": true }
                ]
              }
            }
          }
        },
        "parameters": [
          { "name": "appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "imt-remote-formula", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "imt-ignore-required", "in": "header", "schema": { "type": "string" }, "example": "yes" },
          { "name": "imt-validate-schema", "in": "header", "schema": { "type": "string" }, "example": "yes" }
        ]
      },
      "options": {
        "tags": ["Remote procedures"],
        "summary": "Process action",
        "parameters": [
          { "name": "appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "imt-remote-formula", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "imt-ignore-required", "in": "header", "schema": { "type": "string" }, "example": "yes" },
          { "name": "imt-validate-schema", "in": "header", "schema": { "type": "string" }, "example": "yes" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "config": { "type": "array" } } },
                "examples": {
                  "process-action": {
                    "summary": "Process action",
                    "value": { "config": [] },
                    "originalRequest": {
                      "parameters": [
                        { "name": "appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
                        { "name": "imt-remote-formula", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "imt-ignore-required", "in": "header", "schema": { "type": "string" }, "example": "yes" },
                        { "name": "imt-validate-schema", "in": "header", "schema": { "type": "string" }, "example": "yes" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios": {
      "get": {
        "tags": ["Scenarios"],
        "summary": "List",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          { "name": "folderId", "in": "query", "schema": { "type": "integer" }, "example": 0 },
          { "name": "id[]", "in": "query", "schema": { "type": "array", "items": { "type": "integer" } }, "example": 1 },
          { "name": "islinked", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "concept",
                  "createdBySupport",
                  "deleted",
                  "description",
                  "folderId",
                  "isinvalid",
                  "islinked",
                  "islocked",
                  "ispaused",
                  "usedPackages",
                  "lastEdit",
                  "scheduling",
                  "iswatching",
                  "hookId",
                  "deviceId",
                  "deviceScope"
                ]
              }
            },
            "example": "name"
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "hookId": { "type": "integer" },
                          "deviceId": { "type": "integer" },
                          "deviceScope": { "type": "string" },
                          "concept": { "type": "boolean" },
                          "description": { "type": "string" },
                          "folderId": { "type": "integer" },
                          "isinvalid": { "type": "boolean" },
                          "islinked": { "type": "boolean" },
                          "islocked": { "type": "boolean" },
                          "isPaused": { "type": "boolean" },
                          "usedPackages": { "type": "array", "items": { "type": "string" } },
                          "lastEdit": { "type": "string", "format": "date-time" },
                          "scheduling": {
                            "type": "object",
                            "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                          },
                          "iswaiting": { "type": "boolean" },
                          "dlqCount": { "type": "integer" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "scenarios": [
                        {
                          "id": 152,
                          "name": "Clone",
                          "teamId": 25,
                          "hookId": null,
                          "concept": false,
                          "description": "",
                          "folderId": null,
                          "isinvalid": false,
                          "islinked": false,
                          "islocked": false,
                          "isPaused": false,
                          "usedPackages": ["http", "builtin"],
                          "lastEdit": "2020-07-07T13:22:22.885Z",
                          "scheduling": { "type": "indefinitely", "interval": 900 },
                          "iswaiting": false,
                          "dlqCount": 0
                        },
                        {
                          "id": 153,
                          "name": "Clone",
                          "teamId": 25,
                          "hookId": null,
                          "concept": false,
                          "description": "",
                          "folderId": null,
                          "isinvalid": false,
                          "islinked": false,
                          "islocked": false,
                          "isPaused": false,
                          "usedPackages": ["http", "builtin"],
                          "lastEdit": "2020-07-07T13:24:00.793Z",
                          "scheduling": { "type": "indefinitely", "interval": 900 },
                          "iswaiting": false,
                          "dlqCount": 0
                        },
                        {
                          "id": 150,
                          "name": "Failing Http",
                          "teamId": 25,
                          "hookId": null,
                          "concept": false,
                          "description": "",
                          "folderId": null,
                          "isinvalid": false,
                          "islinked": false,
                          "islocked": false,
                          "isPaused": false,
                          "usedPackages": ["http", "builtin"],
                          "lastEdit": "2020-07-07T13:19:51.753Z",
                          "scheduling": { "type": "indefinitely", "interval": 900 },
                          "iswaiting": false,
                          "dlqCount": 4
                        },
                        {
                          "id": 151,
                          "name": "Integration HTTP, Data store",
                          "teamId": 25,
                          "hookId": null,
                          "concept": false,
                          "description": "",
                          "folderId": null,
                          "isinvalid": false,
                          "islinked": false,
                          "islocked": false,
                          "isPaused": false,
                          "usedPackages": ["http", "datastore"],
                          "lastEdit": "2020-07-07T13:17:39.566Z",
                          "scheduling": { "type": "indefinitely", "interval": 900 },
                          "iswaiting": false,
                          "dlqCount": 0
                        }
                      ],
                      "pg": { "sortBy": "proprietal", "limit": 10, "sortDir": "desc", "offset": 0 }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "organizationId", "in": "query", "schema": { "type": "string" }, "example": "{{organizationId}}" },
                        { "name": "folderId", "in": "query", "schema": { "type": "string" }, "example": "0" },
                        { "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" },
                        { "name": "islinked", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "teamId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "concept" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "createdBySupport" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "deleted" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "description" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "folderId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "isinvalid" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "islinked" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "islocked" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "ispaused" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usedPackages" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "lastEdit" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "scheduling" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "iswatching" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "hookId" },
                        { "name": "pg[sortBy]", "in": "query", "schema": { "type": "string" }, "example": "lastEdit" },
                        { "name": "pg[offset]", "in": "query", "schema": { "type": "integer" }, "example": "10" },
                        {
                          "name": "pg[sortDir]",
                          "in": "query",
                          "schema": { "type": "string" },
                          "description": "asc | desc",
                          "example": "asc"
                        },
                        { "name": "pg[limit]", "in": "query", "schema": { "type": "integer" }, "example": "10000" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Scenarios"],
        "summary": "Create",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blueprint": { "type": "string", "required": true },
                  "teamId": { "type": "integer", "required": true },
                  "scheduling": { "type": "string", "required": true },
                  "concept": { "type": "boolean", "required": true },
                  "folderId": { "type": "integer" },
                  "basedon": { "type": "integer" }
                }
              },
              "example": {
                "blueprint": "{\"name\":\"Empty integration\",\"flow\":[{\"id\":2,\"module\":\"json:ParseJSON\",\"version\":1,\"metadata\":{\"designer\":{\"x\":-46,\"y\":47,\"messages\":[{\"category\":\"last\",\"severity\":\"warning\",\"message\":\"A transformer should not be the last module in the route.\"}]}}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                "teamId": 1,
                "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                "concept": false,
                "folderId": null,
                "basedon": 20
              }
            }
          }
        },
        "parameters": [{ "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "hookId": { "type": "integer" },
                        "deviceId": { "type": "integer" },
                        "deviceScope": { "type": "string" },
                        "concept": { "type": "boolean" },
                        "description": { "type": "string" },
                        "folderId": { "type": "integer" },
                        "isinvalid": { "type": "boolean" },
                        "islinked": { "type": "boolean" },
                        "islocked": { "type": "boolean" },
                        "isPaused": { "type": "boolean" },
                        "usedPackages": { "type": "array", "items": { "type": "string" } },
                        "lastEdit": { "type": "string", "format": "date-time" },
                        "scheduling": {
                          "type": "object",
                          "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                        },
                        "iswaiting": { "type": "boolean" },
                        "dlqCount": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "scenario": {
                        "id": 137,
                        "name": "Empty integration",
                        "teamId": 1,
                        "hookId": null,
                        "concept": false,
                        "description": "",
                        "folderId": null,
                        "isinvalid": false,
                        "islinked": false,
                        "islocked": false,
                        "isPaused": false,
                        "usedPackages": ["json"],
                        "lastEdit": "2020-07-06T11:13:25.441Z",
                        "scheduling": { "type": "indefinitely", "interval": 900 },
                        "iswaiting": false,
                        "dlqCount": 0
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "blueprint": { "type": "string" },
                                "teamId": { "type": "integer" },
                                "scheduling": { "type": "string" },
                                "concept": { "type": "boolean" },
                                "folderId": { "type": "null" },
                                "basedon": { "type": "integer" }
                              }
                            },
                            "example": {
                              "blueprint": "{\"name\":\"Empty integration\",\"flow\":[{\"id\":2,\"module\":\"json:ParseJSON\",\"version\":1,\"metadata\":{\"designer\":{\"x\":-46,\"y\":47,\"messages\":[{\"category\":\"last\",\"severity\":\"warning\",\"message\":\"A transformer should not be the last module in the route.\"}]}}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                              "teamId": 1,
                              "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                              "concept": false,
                              "folderId": null,
                              "basedon": 20
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}": {
      "get": {
        "tags": ["Scenarios"],
        "summary": "Detail",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          { "name": "folderId", "in": "query", "schema": { "type": "integer" }, "example": "0" },
          { "name": "islinked", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "hookId": { "type": "integer" },
                        "deviceId": { "type": "integer" },
                        "deviceScope": { "type": "string" },
                        "concept": { "type": "boolean" },
                        "description": { "type": "string" },
                        "folderId": { "type": "integer" },
                        "isinvalid": { "type": "boolean" },
                        "islinked": { "type": "boolean" },
                        "islocked": { "type": "boolean" },
                        "isPaused": { "type": "boolean" },
                        "usedPackages": { "type": "array", "items": { "type": "string" } },
                        "lastEdit": { "type": "string", "format": "date-time" },
                        "scheduling": {
                          "type": "object",
                          "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                        },
                        "iswaiting": { "type": "boolean" },
                        "dlqCount": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": {
                      "scenario": {
                        "id": 5,
                        "name": "Integration HTTP",
                        "teamId": 1,
                        "hookId": null,
                        "concept": false,
                        "description": "",
                        "folderId": null,
                        "isinvalid": false,
                        "islinked": false,
                        "islocked": false,
                        "isPaused": false,
                        "usedPackages": ["http", "builtin"],
                        "lastEdit": "2020-05-28T19:51:41.741Z",
                        "scheduling": { "type": "indefinitely", "interval": 900 },
                        "iswaiting": true,
                        "dlqCount": 1
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "query", "schema": { "type": "string" }, "example": "{{organizationId}}" },
                        { "name": "folderId", "in": "query", "schema": { "type": "string" }, "example": "0" },
                        { "name": "islinked", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Scenarios"],
        "summary": "Partial update",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blueprint": { "type": "string", "required": true },
                  "scheduling": { "type": "string", "required": true },
                  "concept": { "type": "boolean", "required": true },
                  "folderId": { "type": "integer" },
                  "basedon": { "type": "integer" }
                }
              },
              "example": {
                "folderId": 3,
                "blueprint": "{\"name\":\"Integration HTTP 3\",\"flow\":[{\"id\":2,\"module\":\"json:ParseJSON\",\"version\":1,\"metadata\":{\"designer\":{\"x\":-46,\"y\":47,\"messages\":[{\"category\":\"last\",\"severity\":\"warning\",\"message\":\"A transformer should not be the last module in the route.\"}]}}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                "name": "Integration HTTP 3",
                "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                "concept": false
              }
            }
          }
        },
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "hookId": { "type": "integer" },
                        "deviceId": { "type": "integer" },
                        "deviceScope": { "type": "string" },
                        "concept": { "type": "boolean" },
                        "description": { "type": "string" },
                        "folderId": { "type": "integer" },
                        "isinvalid": { "type": "boolean" },
                        "islinked": { "type": "boolean" },
                        "islocked": { "type": "boolean" },
                        "isPaused": { "type": "boolean" },
                        "usedPackages": { "type": "array", "items": { "type": "string" } },
                        "lastEdit": { "type": "string", "format": "date-time" },
                        "scheduling": {
                          "type": "object",
                          "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                        },
                        "iswaiting": { "type": "boolean" },
                        "dlqCount": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial update",
                    "value": {
                      "scenario": {
                        "id": 97,
                        "name": "Integration HTTP 3",
                        "teamId": 4,
                        "hookId": null,
                        "concept": false,
                        "description": "",
                        "folderId": 3,
                        "isinvalid": false,
                        "islinked": false,
                        "islocked": false,
                        "isPaused": false,
                        "usedPackages": ["json"],
                        "lastEdit": "2020-07-06T11:18:14.888Z",
                        "scheduling": { "type": "indefinitely", "interval": 900 },
                        "iswaiting": false,
                        "dlqCount": 0
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "folderId": { "type": "integer" },
                                "blueprint": { "type": "string" },
                                "name": { "type": "string" },
                                "scheduling": { "type": "string" },
                                "concept": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "folderId": 3,
                              "blueprint": "{\"name\":\"Integration HTTP 3\",\"flow\":[{\"id\":2,\"module\":\"json:ParseJSON\",\"version\":1,\"metadata\":{\"designer\":{\"x\":-46,\"y\":47,\"messages\":[{\"category\":\"last\",\"severity\":\"warning\",\"message\":\"A transformer should not be the last module in the route.\"}]}}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                              "name": "Integration HTTP 3",
                              "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                              "concept": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Scenarios"],
        "summary": "Delete",
        "security": [{ "token": ["scenarios:write"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "scenario": { "type": "integer" } } },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": { "scenario": 74 },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/blueprint": {
      "get": {
        "tags": ["Scenarios"],
        "summary": "Blueprint",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "blueprintId", "in": "query", "schema": { "type": "integer" }, "example": "124578" },
          { "name": "draft", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "string" },
                    "response": {
                      "type": "object",
                      "properties": {
                        "blueprint": {
                          "type": "object",
                          "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                          "properties": {
                            "flow": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "mapper": {
                                    "type": "object",
                                    "properties": {
                                      "ca": { "type": "string" },
                                      "qs": { "type": "array" },
                                      "url": { "type": "string", "format": "uri" },
                                      "gzip": { "type": "boolean" },
                                      "method": { "type": "string" },
                                      "headers": { "type": "array" },
                                      "timeout": { "type": "string" },
                                      "authPass": { "type": "string" },
                                      "authUser": { "type": "string" },
                                      "bodyType": { "type": "string" },
                                      "shareCookies": { "type": "boolean" },
                                      "parseResponse": { "type": "boolean" },
                                      "followRedirect": { "type": "boolean" },
                                      "useQuerystring": { "type": "boolean" },
                                      "rejectUnauthorized": { "type": "boolean" }
                                    }
                                  },
                                  "module": { "type": "string", "format": "uri" },
                                  "onerror": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "integer" },
                                        "mapper": {
                                          "type": "object",
                                          "properties": {
                                            "count": { "type": "string", "format": "utc-millisec" },
                                            "retry": { "type": "boolean" },
                                            "interval": { "type": "string", "format": "utc-millisec" }
                                          }
                                        },
                                        "module": { "type": "string", "format": "uri" },
                                        "version": { "type": "integer" },
                                        "metadata": {
                                          "type": "object",
                                          "properties": {
                                            "expect": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": { "type": "string" },
                                                  "type": { "type": "string" },
                                                  "label": { "type": "string" },
                                                  "required": { "type": "boolean" }
                                                }
                                              }
                                            },
                                            "restore": {
                                              "type": "object",
                                              "properties": {
                                                "retry": { "type": "object", "properties": { "mode": { "type": "string" } } }
                                              }
                                            },
                                            "designer": {
                                              "type": "object",
                                              "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                            }
                                          }
                                        },
                                        "parameters": { "type": "object" }
                                      }
                                    }
                                  },
                                  "version": { "type": "integer" },
                                  "metadata": {
                                    "type": "object",
                                    "properties": {
                                      "expect": { "type": "array", "items": { "type": "object" } },
                                      "restore": {
                                        "type": "object",
                                        "properties": {
                                          "qs": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "method": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                          },
                                          "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                        }
                                      },
                                      "designer": {
                                        "type": "object",
                                        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                      },
                                      "parameters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "type": { "type": "string" },
                                            "label": { "type": "string" },
                                            "required": { "type": "boolean" }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                                }
                              }
                            },
                            "name": { "type": "string" },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "version": { "type": "integer" },
                                "scenario": {
                                  "type": "object",
                                  "properties": {
                                    "maxErrors": { "type": "integer" },
                                    "autoCommit": { "type": "boolean" },
                                    "roundtrips": { "type": "integer" }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "scheduling": {
                          "type": "object",
                          "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                        },
                        "concept": { "type": "boolean" },
                        "idSequence": { "type": "integer" },
                        "created": { "type": "string", "format": "date-time" },
                        "last_edit": { "type": "string", "format": "date-time" }
                      }
                    }
                  }
                },
                "examples": {
                  "blueprint": {
                    "summary": "Blueprint",
                    "value": {
                      "code": "OK",
                      "response": {
                        "blueprint": {
                          "flow": [
                            {
                              "id": 1,
                              "mapper": {
                                "ca": "",
                                "qs": [],
                                "url": "https://local.integromat.cloud/api/not-existing-page",
                                "gzip": true,
                                "method": "get",
                                "headers": [],
                                "timeout": "",
                                "authPass": "",
                                "authUser": "",
                                "bodyType": "",
                                "shareCookies": false,
                                "parseResponse": false,
                                "followRedirect": true,
                                "useQuerystring": false,
                                "rejectUnauthorized": true
                              },
                              "module": "http:ActionSendData",
                              "onerror": [
                                {
                                  "id": 2,
                                  "mapper": { "count": "3", "retry": true, "interval": "1" },
                                  "module": "builtin:Break",
                                  "version": 1,
                                  "metadata": {
                                    "expect": [
                                      { "name": "retry", "type": "boolean", "label": "Automatically complete execution", "required": true },
                                      { "name": "count", "type": "uinteger", "label": "Number of attempts", "required": true },
                                      { "name": "interval", "type": "uinteger", "label": "Interval between attempts", "required": true }
                                    ],
                                    "restore": { "retry": { "mode": "chose" } },
                                    "designer": { "x": 300, "y": 0 }
                                  },
                                  "parameters": {}
                                }
                              ],
                              "version": 3,
                              "metadata": {
                                "expect": [
                                  { "name": "url", "type": "url", "label": "URL", "required": true },
                                  {
                                    "name": "method",
                                    "type": "select",
                                    "label": "Method",
                                    "required": true,
                                    "validate": { "enum": ["get", "head", "post", "put", "patch", "delete"] }
                                  },
                                  {
                                    "name": "headers",
                                    "spec": [
                                      { "name": "name", "type": "text", "label": "Name", "required": true },
                                      { "name": "value", "type": "text", "label": "Value" }
                                    ],
                                    "type": "array",
                                    "label": "Headers",
                                    "labels": { "add": "Add a header", "edit": "Edit a header" }
                                  },
                                  {
                                    "name": "qs",
                                    "spec": [
                                      { "name": "name", "type": "text", "label": "Name", "required": true },
                                      { "name": "value", "type": "text", "label": "Value" }
                                    ],
                                    "type": "array",
                                    "label": "Query String",
                                    "labels": { "add": "Add parameter", "edit": "Edit parameter" }
                                  },
                                  {
                                    "name": "bodyType",
                                    "type": "select",
                                    "label": "Body type",
                                    "validate": { "enum": ["raw", "x_www_form_urlencoded", "multipart_form_data"] }
                                  },
                                  { "name": "parseResponse", "type": "boolean", "label": "Parse response", "required": true },
                                  { "name": "authUser", "type": "text", "label": "User name" },
                                  { "name": "authPass", "type": "password", "label": "Password" },
                                  { "name": "timeout", "type": "uinteger", "label": "Timeout", "validate": { "max": 300, "min": 1 } },
                                  {
                                    "name": "shareCookies",
                                    "type": "boolean",
                                    "label": "Share cookies with other HTTP modules",
                                    "required": true
                                  },
                                  { "name": "ca", "type": "cert", "label": "Self-signed certificate", "multiline": true },
                                  {
                                    "name": "rejectUnauthorized",
                                    "type": "boolean",
                                    "label": "Reject connections that are using unverified (self-signed) certificates",
                                    "required": true
                                  },
                                  { "name": "followRedirect", "type": "boolean", "label": "Follow redirect", "required": true },
                                  {
                                    "name": "useQuerystring",
                                    "type": "boolean",
                                    "label": "Disable serialization of multiple same query string keys as arrays",
                                    "required": true
                                  },
                                  { "name": "gzip", "type": "boolean", "label": "Request compressed content", "required": true }
                                ],
                                "restore": {
                                  "qs": { "mode": "chose", "items": [] },
                                  "method": { "mode": "chose", "label": "GET" },
                                  "headers": { "mode": "chose", "items": [] },
                                  "bodyType": { "label": "" }
                                },
                                "designer": { "x": 0, "y": 0 },
                                "parameters": [
                                  {
                                    "name": "handleErrors",
                                    "type": "boolean",
                                    "label": "Evaluate all states as errors (except for 2xx and 3xx )",
                                    "required": true
                                  }
                                ]
                              },
                              "parameters": { "handleErrors": false }
                            }
                          ],
                          "name": "Integration of failing scenario",
                          "metadata": {
                            "version": 1,
                            "designer": { "orphans": [] },
                            "scenario": {
                              "dlq": true,
                              "dataloss": false,
                              "maxErrors": 3,
                              "autoCommit": true,
                              "roundtrips": 1,
                              "sequential": false,
                              "confidential": false,
                              "autoCommitTriggerLast": true
                            }
                          }
                        },
                        "scheduling": { "type": "indefinitely", "interval": 900 },
                        "concept": false,
                        "idSequence": 3,
                        "created": "2019-11-04T10:52:00.366Z",
                        "last_edit": "2019-11-04T10:52:08.953Z"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "blueprintId", "in": "query", "schema": { "type": "integer" }, "example": "124578" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/triggers": {
      "get": {
        "tags": ["Scenarios"],
        "summary": "Triggers",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "blueprintId", "in": "query", "schema": { "type": "integer" }, "example": "124578" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "udid": { "type": "string" },
                    "scope": { "type": "string" },
                    "queueCount": { "type": "integer" },
                    "queueLimit": { "type": "integer" },
                    "typeName": { "type": "string" },
                    "type": { "type": "string" },
                    "url": { "type": "string", "format": "uri" }
                  }
                },
                "examples": {
                  "triggers": {
                    "summary": "Triggers",
                    "value": {
                      "id": 21,
                      "name": "My gateway-webhook webhook",
                      "udid": "ny6nuu4x4rog68c88s6fpakgsa03rxqj",
                      "scope": "hook",
                      "queueCount": 1,
                      "queueLimit": 10000,
                      "typeName": "gateway-webhook",
                      "type": "web",
                      "url": "https://hook.master.integromat.local/ny6nuu4x4rog68c88s6fpakgsa03rxqj"
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "blueprintId", "in": "query", "schema": { "type": "integer" }, "example": "124578" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/clone": {
      "post": {
        "tags": ["Scenarios"],
        "summary": "Clone",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "teamId": { "type": "integer" },
                  "states": { "type": "boolean" },
                  "account": { "type": "object", "properties": { "109": { "type": "string" } } }
                }
              },
              "example": { "name": "Integrace E-mail (copy)", "teamId": 55, "states": false, "account": { "109": "" } }
            }
          }
        },
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          {
            "name": "notAnalyze",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "cloning a scenario without checking the reference",
            "example": "false"
          },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "hookId": { "type": "integer" },
                        "deviceId": { "type": "integer" },
                        "deviceScope": { "type": "string" },
                        "concept": { "type": "boolean" },
                        "description": { "type": "string" },
                        "folderId": { "type": "integer" },
                        "isinvalid": { "type": "boolean" },
                        "islinked": { "type": "boolean" },
                        "islocked": { "type": "boolean" },
                        "isPaused": { "type": "boolean" },
                        "usedPackages": { "type": "array", "items": { "type": "string" } },
                        "lastEdit": { "type": "string", "format": "date-time" },
                        "scheduling": {
                          "type": "object",
                          "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } }
                        },
                        "iswaiting": { "type": "boolean" },
                        "dlqCount": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "clone": {
                    "summary": "Clone",
                    "value": {
                      "scenario": {
                        "id": 154,
                        "name": "Integrace E-mail (copy)",
                        "teamId": 55,
                        "hookId": null,
                        "concept": false,
                        "description": "",
                        "folderId": null,
                        "isinvalid": false,
                        "islinked": false,
                        "islocked": false,
                        "isPaused": false,
                        "usedPackages": ["email"],
                        "lastEdit": "2020-07-07T19:33:59.892Z",
                        "scheduling": { "type": "indefinitely", "interval": 900 },
                        "iswaiting": false
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "teamId": { "type": "integer" },
                                "states": { "type": "boolean" },
                                "account": { "type": "object", "properties": { "109": { "type": "string" } } }
                              }
                            },
                            "example": { "name": "Integrace E-mail (copy)", "teamId": 55, "states": false, "account": { "109": "" } }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "query", "schema": { "type": "string" }, "example": "{{organizationId}}" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/data": {
      "put": {
        "tags": ["Scenarios"],
        "summary": "Set Data",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "object" }, "example": { "1": { "epoch": { "date": "2021-02-02T09:49:00.000Z" } } } }
          }
        },
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "updated": { "type": "boolean" } } },
                "examples": {
                  "set-data": {
                    "summary": "Set Data",
                    "value": { "updated": true },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "1": {
                                  "type": "object",
                                  "properties": {
                                    "epoch": { "type": "object", "properties": { "date": { "type": "string", "format": "date-time" } } }
                                  }
                                }
                              }
                            },
                            "example": { "1": { "epoch": { "date": "2021-02-02T09:49:00.000Z" } } }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/start": {
      "post": {
        "tags": ["Scenarios"],
        "summary": "Start",
        "security": [{ "token": ["scenarios:write"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": { "type": "object", "properties": { "id": { "type": "string" }, "islinked": { "type": "boolean" } } }
                  }
                },
                "examples": {
                  "start": {
                    "summary": "Start",
                    "value": { "scenario": { "id": "5", "islinked": true } },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/stop": {
      "post": {
        "tags": ["Scenarios"],
        "summary": "Stop",
        "security": [{ "token": ["scenarios:write"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenario": { "type": "object", "properties": { "id": { "type": "string" }, "islinked": { "type": "boolean" } } }
                  }
                },
                "examples": {
                  "stop": {
                    "summary": "Stop",
                    "value": { "scenario": { "id": "5", "islinked": false } },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/publish": {
      "post": {
        "tags": ["Scenarios"],
        "summary": "Publish",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "scenario": { "type": "object", "properties": { "id": { "type": "integer" } } } }
                },
                "examples": {
                  "publish": {
                    "summary": "Publish",
                    "value": { "scenario": { "id": 714 } },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/logs": {
      "get": {
        "tags": ["Scenarios > Logs"],
        "summary": "List",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "from", "in": "query", "schema": { "type": "integer" } },
          { "name": "to", "in": "query", "schema": { "type": "integer" } },
          { "name": "status", "in": "query", "schema": { "type": "integer", "enum": [1, 2, 3] }, "example": "2" },
          { "name": "showCheckRuns", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          { "name": "pg[last]", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "pg[showLast]", "in": "query", "schema": { "type": "string" }, "example": "PG_SORT_LAST=imtId" },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarioLogs": {
                      "type": "array",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "imtId": { "type": "string" },
                            "type": { "type": "string" },
                            "authorId": { "type": "integer" },
                            "duration": { "type": "integer" },
                            "operations": { "type": "integer" },
                            "transfer": { "type": "integer" },
                            "teamId": { "type": "integer" },
                            "instant": { "type": "boolean" },
                            "timestamp": { "type": "string", "format": "date-time" },
                            "status": { "type": "integer" },
                            "organizationId": { "type": "integer" },
                            "@kindId": { "type": "integer" }
                          }
                        }
                      ]
                    },
                    "pg": [
                      {
                        "type": "object",
                        "properties": {
                          "sortBy": { "type": "string" },
                          "sortDir": { "type": "string" },
                          "limit": { "type": "integer" },
                          "offset": { "type": "integer" }
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "scenarioLogs": [
                        {
                          "imtId": "1574194051658_69",
                          "id": 69,
                          "detail": { "author": { "name": "Administrator", "staff": true } },
                          "authorId": 1,
                          "type": "stop",
                          "timestamp": "2019-11-19T20:07:31.658Z"
                        },
                        {
                          "imtId": "1574194050572_scenario.86.auto.f703cf119c7b4ca6971daa799f44b6c2",
                          "duration": 124,
                          "operations": 1,
                          "transfer": 0,
                          "teamId": 1,
                          "id": "f703cf119c7b4ca6971daa799f44b6c2",
                          "type": "auto",
                          "authorId": null,
                          "instant": false,
                          "timestamp": "2019-11-19T20:07:30.572Z",
                          "status": 3
                        },
                        {
                          "imtId": "1574194047943_68",
                          "id": 68,
                          "detail": { "author": { "name": "Administrator", "staff": true } },
                          "authorId": 1,
                          "type": "start",
                          "timestamp": "2019-11-19T20:07:27.943Z"
                        },
                        {
                          "imtId": "1574193224832_62",
                          "detail": { "author": { "name": "Administrator", "staff": true } },
                          "id": 62,
                          "authorId": 1,
                          "type": "modify",
                          "timestamp": "2019-11-19T19:53:44.832Z"
                        },
                        {
                          "imtId": "1573223414027_61",
                          "detail": { "author": { "name": "Administrator", "staff": true } },
                          "id": 61,
                          "authorId": 1,
                          "type": "modify",
                          "timestamp": "2019-11-08T14:30:14.027Z"
                        }
                      ],
                      "pg": { "sortBy": "imtId", "sortDir": "desc", "limit": 50, "offset": 0 }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "from", "in": "query", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "to", "in": "query", "schema": { "type": "integer" }, "example": "2" },
                        { "name": "status", "in": "query", "schema": { "type": "integer" }, "description": "1|2|3", "example": "2" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/logs/{executionId}": {
      "get": {
        "tags": ["Scenarios > Logs"],
        "summary": "Execution log",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "executionId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarioLog": [
                      {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "imtId": { "type": "string" },
                          "type": { "type": "string" },
                          "authorId": { "type": "integer" },
                          "duration": { "type": "integer" },
                          "operations": { "type": "integer" },
                          "transfer": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "instant": { "type": "boolean" },
                          "timestamp": { "type": "string", "format": "date-time" },
                          "status": { "type": "integer" },
                          "organizationId": { "type": "integer" },
                          "@kindId": { "type": "integer" }
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "execution": {
                    "summary": "Execution",
                    "value": {
                      "scenarioLog": {
                        "imtId": "1594112131494_scenario.144.auto.5b4da45b471b45d99ce750be4e347df4",
                        "duration": 4111,
                        "operations": 4,
                        "transfer": 1346209,
                        "organizationId": 1,
                        "@kindId": 144,
                        "teamId": 1,
                        "id": "5b4da45b471b45d99ce750be4e347df4",
                        "type": "auto",
                        "authorId": null,
                        "instant": false,
                        "timestamp": "2020-07-07T08:55:31.494Z",
                        "status": 1
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "executionId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenarioId}/blueprints": {
      "get": {
        "tags": ["Scenarios > Blueprints"],
        "summary": "List",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "scenarioId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "concept",
                  "createdBySupport",
                  "deleted",
                  "description",
                  "folderId",
                  "isinvalid",
                  "islinked",
                  "islocked",
                  "ispaused",
                  "lastEdit",
                  "usedPackages"
                ]
              }
            },
            "example": "name"
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenariosBlueprints": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "created": { "type": "string", "format": "date-time" },
                          "version": { "type": "integer" },
                          "scenarioId": { "type": "integer" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "scenariosBlueprints": [
                        { "created": "2019-11-06T10:13:47.627Z", "version": 3, "scenarioId": 12 },
                        { "created": "2019-11-04T10:52:08.953Z", "version": 2, "scenarioId": 12 },
                        { "created": "2019-11-04T10:52:00.366Z", "version": 1, "scenarioId": 12 }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "scenarioId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/consumptions": {
      "get": {
        "tags": ["Scenarios > Consumptions"],
        "summary": "List",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": 1 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarioConsumptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "scenarioId": { "type": "integer" },
                          "operations": { "type": "integer" },
                          "transfer": { "type": "integer" }
                        }
                      }
                    },
                    "lastReset": { "type": "string", "format": "date-time" }
                  }
                },
                "examples": {
                  "consumptions": {
                    "summary": "Consumptions",
                    "value": {
                      "scenarioConsumptions": [
                        { "scenarioId": 6, "operations": 4, "transfer": 63209 },
                        { "scenarioId": 32, "operations": 1, "transfer": 1617 }
                      ],
                      "lastReset": "2018-04-27T22:32:49.284Z"
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios-folders": {
      "get": {
        "tags": ["Scenarios Folders"],
        "summary": "List",
        "security": [{ "token": ["scenarios:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "examples": { "list": { "summary": "List", "value": 1 } },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenariosFolders": {
                      "type": "array",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "name": { "type": "string" },
                            "scenariosTotal": { "type": "integer" }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": { "scenariosFolders": [{ "id": 3, "name": "Folder 1", "scenariosTotal": 2 }] },
                    "originalRequest": {
                      "parameters": [{ "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" }]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Scenarios Folders"],
        "summary": "Create",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "name": { "type": "string" }, "teamId": { "type": "integer" } },
                "required": ["name", "teamId"]
              },
              "examples": { "create": { "summary": "Create", "value": { "name": "super folder", "teamId": 1 } } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarioFolder": {
                      "type": "object",
                      "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "scenariosTotal": { "type": "integer" } }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": { "scenarioFolder": { "id": 4, "name": "Folder 2", "scenariosTotal": 0 } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "name": { "type": "string" }, "teamId": { "type": "integer" } } },
                            "example": { "name": "Folder 2", "teamId": 4 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios-folders/{folderId}": {
      "patch": {
        "tags": ["Scenarios Folders"],
        "summary": "Partial Update",
        "security": [{ "token": ["scenarios:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" } } },
              "example": { "name": "Folder 2" }
            }
          }
        },
        "parameters": [{ "name": "folderId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scenarioFolder": [
                      {
                        "type": "object",
                        "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "scenariosTotal": { "type": "integer" } }
                      }
                    ]
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial Update",
                    "value": { "scenarioFolder": { "id": 1, "name": "Folder 2", "scenariosTotal": 4 } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "name": { "type": "string" } } },
                            "example": { "name": "Folder 2" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "scenarioFolderId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Scenarios Folders"],
        "summary": "Delete",
        "security": [{ "token": ["scenarios:write"] }],
        "parameters": [{ "name": "folderId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "scenarioFolder": { "type": "integer" } } },
                "examples": {
                  "delete": {
                    "summary": "Delete",
                    "value": { "scenarioFolder": 8 },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "List apps",
        "description": "Retrieves a collection of all apps available to the authenticated user.",
        "security": [{ "token": ["sdk-apps:read"] }],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "If set to **true**, this parameter returns all apps available to all users. If set to **false**, it retrieves only the apps available to the authenticated user.",
            "example": "true"
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["name", "changes", "public"] } },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the names of the available apps.",
            "example": "name"
          },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": 1 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "label": { "type": "string" },
                          "version": { "type": "integer" },
                          "beta": { "type": "boolean" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "apps": [
                        { "name": "my-app-1", "label": "Ding", "version": 1, "beta": true },
                        { "name": "model", "label": "MODEL", "version": 1, "beta": false },
                        { "name": "postman-test-app-1", "label": "Postman Test App", "version": 1, "beta": true },
                        { "name": "postman-test-app-2-1", "label": "Postman Test App", "version": 1, "beta": true },
                        { "name": "postman-test-app-3-1", "label": "Postman Test App", "version": 1, "beta": true },
                        { "name": "postman-test-app-4-1", "label": "Postman Test App", "version": 1, "beta": true },
                        { "name": "postman-test-app-5-1", "label": "Postman Test App", "version": 1, "beta": true },
                        { "name": "testovaci-lokalni-appka-1", "label": "Testovací Lokální Appka", "version": 1, "beta": false }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Create app",
        "description": "Creates a new app with parameters passed in the request body. As the response, it returns all details of the created app.",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "The name of the app visible in the URL." },
                  "label": { "type": "string", "description": "The label of the app visible in the scenario builder." },
                  "description": { "type": "string" },
                  "theme": { "type": "string", "format": "color", "description": "The color of the app icon." },
                  "language": { "type": "string" },
                  "countries": { "type": "array" },
                  "private": { "type": "boolean" }
                }
              },
              "example": {
                "name": "postman-test-app-7",
                "label": "Postman Test App",
                "description": "This is a testing app from Postman",
                "theme": "#FF00FF",
                "language": "en",
                "countries": [],
                "private": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "version": { "type": "integer" },
                        "theme": { "type": "string", "format": "color" },
                        "public": { "type": "boolean" },
                        "approved": { "type": "boolean" }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "app": {
                        "name": "postman-test-app-7-1",
                        "label": "Postman Test App",
                        "version": 1,
                        "theme": "#FF00FF",
                        "public": false,
                        "approved": false
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "label": { "type": "string" },
                                "description": { "type": "string" },
                                "theme": { "type": "string", "format": "color" },
                                "language": { "type": "string" },
                                "countries": { "type": "array" },
                                "private": { "type": "boolean" }
                              }
                            },
                            "example": {
                              "name": "postman-test-app-7",
                              "label": "Postman Test App",
                              "description": "This is a testing app from Postman",
                              "theme": "#FF00FF",
                              "language": "en",
                              "countries": [],
                              "private": false
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": [
                      {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "label": { "type": "string" },
                          "description": { "type": "string" },
                          "version": { "type": "integer" },
                          "beta": { "type": "boolean" },
                          "theme": { "type": "string", "format": "color" },
                          "language": { "type": "string" },
                          "public": { "type": "boolean" },
                          "approved": { "type": "boolean" },
                          "global": { "type": "boolean" },
                          "countries": { "type": "null" },
                          "created": { "type": "string", "format": "date-time" },
                          "manifestVersion": { "type": "integer" }
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "get-app": {
                    "summary": "Get App",
                    "value": {
                      "app": {
                        "name": "postman-test-app-1",
                        "label": "Postman Test App",
                        "description": "This is a testing app from Postman",
                        "version": 1,
                        "beta": true,
                        "theme": "#ff00ff",
                        "language": "en",
                        "public": false,
                        "approved": false,
                        "global": true,
                        "countries": null,
                        "created": "2019-12-18T11:55:31.655Z",
                        "manifestVersion": 2
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["SDK Apps"],
        "summary": "Patch App",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "example": {
                "audience": "countries",
                "description": "Hey there, Charlie!",
                "countries": ["us", "uk", "cz"],
                "label": "Multiverse",
                "theme": "#AABBCC",
                "language": "en"
              }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "description": { "type": "string" },
                        "version": { "type": "integer" },
                        "theme": { "type": "string", "format": "color" },
                        "public": { "type": "boolean" },
                        "approved": { "type": "boolean" }
                      }
                    }
                  }
                },
                "examples": {
                  "patch-app": {
                    "summary": "Patch App",
                    "value": {
                      "app": {
                        "name": "beta-13-3",
                        "label": "Multiverse",
                        "description": "Hey there, Charlie!",
                        "version": 1,
                        "theme": "#aabbcc",
                        "public": false,
                        "approved": false
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "audience": { "type": "string" },
                                "description": { "type": "string" },
                                "countries": { "type": "array", "items": { "type": "string" } },
                                "label": { "type": "string" },
                                "theme": { "type": "string", "format": "color" },
                                "language": { "type": "string" }
                              }
                            },
                            "example": {
                              "audience": "countries",
                              "description": "Hey there, Charlie!",
                              "countries": ["us", "uk", "cz"],
                              "label": "Multiverse",
                              "theme": "#AABBCC",
                              "language": "en"
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SDK Apps"],
        "summary": "Delete App",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "app": { "type": "string" } } },
                "examples": { "delete-app": { "summary": "Delete App", "value": { "app": "postman-test-app-1" } } }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/clone": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Clone App",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "newName": { "type": "string" }, "newVersion": { "type": "integer" } } },
              "example": { "newName": "beta-1", "newVersion": 2 }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["versionFull"] } },
            "example": "versionFull"
          },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": [
                      {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "label": { "type": "string" },
                          "description": { "type": "string" },
                          "version": { "type": "integer" },
                          "beta": { "type": "boolean" },
                          "theme": { "type": "string", "format": "color" },
                          "language": { "type": "string" },
                          "public": { "type": "boolean" },
                          "approved": { "type": "boolean" },
                          "global": { "type": "boolean" },
                          "countries": { "type": "null" },
                          "created": { "type": "string", "format": "date-time" },
                          "manifestVersion": { "type": "integer" }
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "clone-app": {
                    "summary": "Clone App",
                    "value": {
                      "app": {
                        "name": "postman-test-app-1",
                        "label": "Postman Test App",
                        "description": "This is a testing app from Postman",
                        "version": 1,
                        "beta": true,
                        "theme": "#ff00ff",
                        "language": "en",
                        "public": false,
                        "approved": false,
                        "global": true,
                        "countries": null,
                        "created": "2019-12-18T11:55:31.655Z",
                        "manifestVersion": 2
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/review": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Review",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "review": [
                      {
                        "type": "object",
                        "properties": {
                          "contactName": { "type": "string" },
                          "contactEmail": { "type": "string", "format": "email" },
                          "reviewerName": { "type": "string" },
                          "reviewerEmail": { "type": "string", "format": "email" },
                          "codeStatus": { "type": "string" },
                          "testStatus": { "type": "string" },
                          "docsStatus": { "type": "string" }
                        }
                      }
                    ]
                  }
                },
                "examples": {
                  "get-app-review": {
                    "summary": "Get App Review",
                    "value": {
                      "review": {
                        "contactName": "admin",
                        "contactEmail": "admin@integromat.cloud",
                        "reviewerName": null,
                        "reviewerEmail": null,
                        "codeStatus": null,
                        "testStatus": null,
                        "docsStatus": null
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Request Review",
        "security": [{ "token": ["sdk-apps:write"] }],
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "requested": { "type": "boolean" } } },
                "examples": { "request-review": { "summary": "Request Review", "value": { "requested": true } } }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/review/form": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Review Form",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "type": { "type": "string" },
                            "required": { "type": "boolean" },
                            "spec": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                              }
                            }
                          }
                        }
                      },
                      "values": { "type": "object", "properties": { "testingScenarios": { "type": "object" } } }
                    }
                  }
                ],
                "examples": {
                  "get-app-review-form": {
                    "summary": "Get App Review Form",
                    "value": {
                      "config": [
                        {
                          "name": "testingScenarios",
                          "label": "{{!apps.review.testingScenarios}}",
                          "type": "collection",
                          "required": true,
                          "spec": [{ "name": "hohoho", "label": "Module: Hohoho", "type": "url" }]
                        }
                      ],
                      "values": { "testingScenarios": {} }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps"],
        "summary": "Submit App Review Form",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "testingScenarios": { "type": "object" } } },
              "example": { "testingScenarios": { "hohoho": "https://www.santa.com" } }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "form": { "type": "object", "properties": { "testingScenarios": { "type": "object" } } } }
                },
                "examples": {
                  "submit-app-review-form": {
                    "summary": "Submit App Review Form",
                    "value": { "form": { "testingScenarios": { "hohoho": "https://www.santa.com" } } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "testingScenarios": { "type": "object", "properties": { "hohoho": { "type": "string", "format": "uri" } } }
                              }
                            },
                            "example": { "testingScenarios": { "hohoho": "https://www.santa.com" } }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/events-log": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Events Log",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "appName": { "type": "string" },
                          "appVersion": { "type": "integer" },
                          "message": { "type": "string" },
                          "detail": { "type": "object" },
                          "authorId": { "type": "integer" },
                          "createdAt": { "type": "string", "format": "date-time" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "get-app-events-log": {
                    "summary": "Get App Events Log",
                    "value": {
                      "events": [
                        {
                          "id": 2,
                          "appName": "webhook-zmetek",
                          "appVersion": 1,
                          "message": "Approval requested.",
                          "detail": {},
                          "authorId": 1,
                          "createdAt": "2021-03-01T13:07:20.852Z"
                        },
                        {
                          "id": 1,
                          "appName": "webhook-zmetek",
                          "appVersion": 1,
                          "message": "App has been published.",
                          "detail": {},
                          "authorId": 1,
                          "createdAt": "2021-03-01T12:36:52.837Z"
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/common": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Common",
        "description": null,
        "security": [{ "token": ["sdk-apps:read"] }],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "schema": { "type": "string" },
            "description": "The numeric version of the app.",
            "required": true
          },
          {
            "name": "appVersion",
            "in": "path",
            "schema": { "type": "integer" },
            "description": "The numeric version of the app.",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object" },
                "examples": { "default": { "summary": "Get App Common", "value": { "clientId": 123456, "clientSecret": "secret" } } }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps"],
        "summary": "Set app common data",
        "description": "Sets the common data for the app based on the parameters passed in the request body. As the response, it returns all details of common data. Common data usually contain sensitive information like API keys or API secrets and these details are shared across all modules.",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "description": "The JSON object containing the common data." },
              "example": { "clientId": 123456, "clientSecret": "secret" }
            }
          }
        },
        "parameters": [
          { "name": "appName", "in": "path", "schema": { "type": "string" }, "description": "The name of the app.", "required": true },
          { "name": "appVersion", "in": "path", "schema": { "type": "integer" }, "description": "The app version.", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": { "default": { "summary": "Set App Common", "value": { "changed": true } } }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/readme": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Docs",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "schema": { "type": "string" },
                "examples": {
                  "get-app-docs": {
                    "summary": "Get App Docs",
                    "value": "# Hey There",
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps"],
        "summary": "Set App Docs",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "",
        "requestBody": { "content": { "text/plain": { "schema": { "type": "string", "example": "I see you." } } } },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/markdown" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-app-docs": {
                    "summary": "Set App Docs",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": { "text/plain": { "schema": { "type": "string", "example": "# Hey There" } } } },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/markdown" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appSection}": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Section",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "SDK_appSection",
            "in": "path",
            "schema": { "type": "string", "enum": ["base", "groups", "install", "installSpec"] },
            "required": true
          },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "baseUrl": { "type": "string", "format": "uri" },
                    "log": { "type": "object", "properties": { "sanitize": { "type": "array", "items": { "type": "string" } } } }
                  }
                },
                "examples": {
                  "get-app-section": {
                    "summary": "Get App Section",
                    "value": { "baseUrl": "https://www.example.com", "log": { "sanitize": ["request.headers.authorization"] } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps"],
        "summary": "Set App Section",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Available sections: base, groups, install, installSpec<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "object", "properties": { "name": { "type": "string" }, "type": { "type": "string" } } }
              },
              "example": [{ "name": "text", "type": "text" }]
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "SDK_appSection",
            "in": "path",
            "schema": { "type": "string", "enum": ["base", "groups", "install", "installSpec"] },
            "required": true
          },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "change": { "type": "object" } } },
                "examples": {
                  "set-app-section": {
                    "summary": "Set App Section",
                    "value": { "change": {} },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "text/plain": {
                            "schema": {
                              "type": "string",
                              "example": "{\n\t// BASE\n\t\"baseUrl\": \"https://www.example.com\",\n\t\"log\": {\n\t\t\"sanitize\": [\n\t\t\t\"request.headers.authorization\"\n\t\t]\n\t}\n}"
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appVisibility}": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Set App Visibility",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVisibility", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-app-visibility": {
                    "summary": "Set App Visibility",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "text/plain": {
                            "schema": {
                              "type": "string",
                              "example": "{\n\t// BASE\n\t\"baseUrl\": \"https://www.example.com\",\n\t\"log\": {\n\t\t\"sanitize\": [\n\t\t\t\"request.headers.authorization\"\n\t\t]\n\t}\n}"
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVisibility", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/opensource": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Set App Opensource",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "beta, stable<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-app-opensource": {
                    "summary": "Set App Opensource",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/closedsource": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Set App ClosedSource",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "beta, stable<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-app-closedsource": {
                    "summary": "Set App ClosedSource",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/changes/{SDK_changeId}": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get Change",
        "security": [{ "token": ["sdk-apps:read"] }],
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_changeId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/commit": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Commit Changes",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "message": { "type": "string" }, "notify": { "type": "boolean" } } },
              "example": { "message": "Just a small tweak", "notify": false }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rollback": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Rollback Changes",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/icon/{SDK_appIconSize}": {
      "get": {
        "tags": ["SDK Apps"],
        "summary": "Get App Icon",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appIconSize", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/icon": {
      "put": {
        "tags": ["SDK Apps"],
        "summary": "Set App Icon",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": { "text/plain": {} } },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-app-icon": {
                    "summary": "Set App Icon",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": { "text/plain": {} } },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/uninstall": {
      "post": {
        "tags": ["SDK Apps"],
        "summary": "Uninstall App from Organization",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "organizationId": { "type": "integer" } } },
              "example": { "organizationId": 1 }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ]
      }
    },
    "/sdk/apps/invites/{SDK_appInviteToken}": {
      "get": {
        "tags": ["SDK Apps > Invites"],
        "summary": "Get App Invite",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appInviteToken", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appInvite": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "theme": { "type": "string", "format": "color" },
                        "created": { "type": "string", "format": "date-time" },
                        "access": { "type": "boolean" },
                        "manifestBasic": {
                          "type": "object",
                          "properties": {
                            "icon": { "type": "string" },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "theme": { "type": "string", "format": "color" },
                            "groups": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "label": { "type": "string" },
                                  "modules": { "type": "array", "items": { "type": "string" } }
                                }
                              }
                            },
                            "public": { "type": "boolean" },
                            "actions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "public": { "type": "boolean" },
                                  "approved": { "type": "boolean" },
                                  "responder": { "type": "boolean" },
                                  "description": { "type": "string" }
                                }
                              }
                            },
                            "version": { "type": "string" },
                            "searches": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "public": { "type": "boolean" },
                                  "approved": { "type": "boolean" },
                                  "description": { "type": "string" }
                                }
                              }
                            },
                            "triggers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "acid": { "type": "boolean" },
                                  "name": { "type": "string" },
                                  "label": { "type": "string" },
                                  "public": { "type": "boolean" },
                                  "approved": { "type": "boolean" },
                                  "listener": { "type": "boolean" },
                                  "description": { "type": "string" }
                                }
                              }
                            },
                            "description": { "type": "null" }
                          }
                        },
                        "language": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-app-invite": {
                    "summary": "Get App Invite",
                    "value": {
                      "appInvite": {
                        "name": "dominik-example",
                        "label": "Example",
                        "theme": "#2f8cbb",
                        "created": "2021-01-06T12:31:47.261Z",
                        "access": true,
                        "manifestBasic": {
                          "icon": "/img/apps/dominik-example.png",
                          "name": "app#dominik-example",
                          "label": "Example",
                          "theme": "#2f8cbb",
                          "groups": [
                            { "label": "Objects", "modules": ["watchObjects", "searchObjects", "createObject", "deleteObject"] },
                            { "label": "Notifications", "modules": ["watchNotifications", "resolveNotification"] },
                            { "label": "Other", "modules": ["makeAnAPICall", "makeGQLAPICall"] }
                          ],
                          "public": true,
                          "actions": [
                            {
                              "name": "makeAnAPICall",
                              "label": "Make an API Call",
                              "public": true,
                              "approved": false,
                              "responder": false,
                              "description": "Performs an arbitrary authorized API request."
                            },
                            {
                              "name": "createObject",
                              "label": "Create Object",
                              "public": true,
                              "approved": false,
                              "responder": false,
                              "description": "Creates a new Object."
                            },
                            {
                              "name": "deleteObject",
                              "label": "Delete Object",
                              "public": true,
                              "approved": false,
                              "responder": false,
                              "description": "Deletes the given Object."
                            },
                            {
                              "name": "resolveNotification",
                              "label": "Resolves a Notification",
                              "public": true,
                              "approved": false,
                              "responder": true,
                              "description": "Responds to the Notification."
                            },
                            {
                              "name": "makeGQLAPICall",
                              "label": "Make a GraphQL Call",
                              "public": true,
                              "approved": false,
                              "responder": false,
                              "description": "Performs arbitrary GraphQL Query."
                            }
                          ],
                          "version": "1.0.0",
                          "searches": [
                            {
                              "name": "searchObjects",
                              "label": "Search Objects",
                              "public": true,
                              "approved": false,
                              "description": "Searches for Objects."
                            }
                          ],
                          "triggers": [
                            {
                              "acid": true,
                              "name": "watchObjects",
                              "label": "Watch Objects",
                              "public": true,
                              "approved": false,
                              "listener": false,
                              "description": "Triggers when a new Object is created."
                            },
                            {
                              "acid": true,
                              "name": "watchNotifications",
                              "label": "Watch Notifications",
                              "public": true,
                              "approved": false,
                              "listener": true,
                              "description": "Triggers when a new Notification is received."
                            }
                          ],
                          "description": null
                        },
                        "language": "en"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appInviteToken", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["SDK Apps > Invites"],
        "summary": "Accept App Invite",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "organizationId": { "type": "integer" } } },
              "example": { "organizationId": 13 }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appInviteToken", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appInvite": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "theme": { "type": "string", "format": "color" },
                        "created": { "type": "string", "format": "date-time" },
                        "access": { "type": "boolean" },
                        "manifestBasic": {
                          "type": "object",
                          "properties": {
                            "icon": { "type": "string" },
                            "name": { "type": "string" },
                            "label": { "type": "string" },
                            "theme": { "type": "string", "format": "color" },
                            "groups": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "label": { "type": "string" },
                                  "modules": { "type": "array", "items": { "type": "string" } }
                                }
                              }
                            },
                            "public": { "type": "boolean" },
                            "actions": { "type": "null" },
                            "version": { "type": "string" },
                            "searches": { "type": "null" },
                            "triggers": { "type": "null" },
                            "description": { "type": "string" }
                          }
                        },
                        "language": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-app-invite": {
                    "summary": "Get App Invite",
                    "value": {
                      "appInvite": {
                        "name": "my-app-1",
                        "label": "Update App 2",
                        "theme": "#caffee",
                        "created": "2019-12-18T11:31:25.803Z",
                        "access": true,
                        "manifestBasic": {
                          "icon": "/img/apps/my-app-1.png",
                          "name": "app#my-app-1",
                          "label": "Update App 2",
                          "theme": "#caffee",
                          "groups": [{ "label": "Other", "modules": ["postmanModule5", "getEntity", "getEntity2", "getEntity3"] }],
                          "public": true,
                          "actions": null,
                          "version": "1.0.0",
                          "searches": null,
                          "triggers": null,
                          "description": "This is appka."
                        },
                        "language": "cs"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appInviteToken", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules": {
      "post": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Create Module",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "typeId": { "type": "integer" },
                  "label": { "type": "string" },
                  "description": { "type": "string" }
                }
              },
              "example": { "name": "getEntity", "typeId": 4, "label": "Get Entity", "description": "Retrieves the given entity." }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appModule": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "description": { "type": "string" },
                        "typeId": { "type": "integer" },
                        "crud": { "type": "null" },
                        "connection": { "type": "null" },
                        "webhook": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "create-module": {
                    "summary": "Create Module",
                    "value": {
                      "appModule": {
                        "name": "getEntity",
                        "label": "Get Entity",
                        "description": "Retrieves the given entity.",
                        "typeId": 4,
                        "crud": null,
                        "connection": null,
                        "webhook": null
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "typeId": { "type": "integer" },
                                "label": { "type": "string" },
                                "description": { "type": "string" }
                              }
                            },
                            "example": {
                              "name": "getEntity",
                              "typeId": 4,
                              "label": "Get Entity",
                              "description": "Retrieves the given entity."
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["SDK Apps > Modules"],
        "summary": "List App Modules",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appModules": { "type": "array", "items": { "type": "object" } } } },
                "examples": {
                  "list-app-modules": {
                    "summary": "List App Modules",
                    "value": {
                      "appModules": [
                        {
                          "name": "postmanModule5",
                          "label": "BezVisKam",
                          "typeId": 1,
                          "public": false,
                          "approved": false,
                          "description": "Bleeeeee",
                          "crud": "read"
                        },
                        {
                          "name": "getEntity",
                          "label": "Get Entity",
                          "typeId": 4,
                          "public": false,
                          "approved": false,
                          "description": "Retrieves the given entity.",
                          "crud": null
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}": {
      "get": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Get Module",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appModule": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "description": { "type": "string" },
                        "typeId": { "type": "integer" },
                        "public": { "type": "boolean" },
                        "approved": { "type": "boolean" },
                        "crud": { "type": "null" },
                        "connection": { "type": "null" },
                        "altConnection": { "type": "null" },
                        "webhook": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-module": {
                    "summary": "Get Module",
                    "value": {
                      "appModule": {
                        "name": "getEntity",
                        "label": "Get Entity",
                        "description": "Retrieves the given entity.",
                        "typeId": 4,
                        "public": false,
                        "approved": false,
                        "crud": null,
                        "connection": null,
                        "altConnection": null,
                        "webhook": null
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Patch Module",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "label": { "type": "string" }, "description": { "type": "string" }, "connection": { "type": "string" } }
              },
              "example": { "label": "Get Order", "description": "Retrieves the order by its id.", "connection": "charlie-1" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appModule": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "description": { "type": "string" },
                        "typeId": { "type": "integer" },
                        "crud": { "type": "null" },
                        "connection": { "type": "string" },
                        "altConnection": { "type": "null" },
                        "webhook": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "patch-module": {
                    "summary": "Patch Module",
                    "value": {
                      "appModule": {
                        "name": "getEntity",
                        "label": "Get Order",
                        "description": "Retrieves the order by its id.",
                        "typeId": 4,
                        "crud": null,
                        "connection": "charlie-1",
                        "altConnection": null,
                        "webhook": null
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "label": { "type": "string" },
                                "description": { "type": "string" },
                                "connection": { "type": "string" }
                              }
                            },
                            "example": { "label": "Get Order", "description": "Retrieves the order by its id.", "connection": "charlie-1" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Delete Module",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appModule": { "type": "string" } } },
                "examples": {
                  "delete-module": {
                    "summary": "Delete Module",
                    "value": { "appModule": "getEntity" },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleSection}": {
      "get": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Get Module Section",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Available sections: api, epoch, parameters, expect, interface, samples, scope<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string" },
                    "method": { "type": "string" },
                    "qs": { "type": "object" },
                    "body": { "type": "object" },
                    "headers": { "type": "object" },
                    "response": {
                      "type": "object",
                      "properties": {
                        "iterate": { "type": "string" },
                        "trigger": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "date": { "type": "string" },
                            "type": { "type": "string" },
                            "order": { "type": "string" }
                          }
                        },
                        "output": { "type": "string" },
                        "limit": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-module-section": {
                    "summary": "Get Module Section",
                    "value": {
                      "url": "/api/users",
                      "method": "GET",
                      "qs": {},
                      "body": {},
                      "headers": {},
                      "response": {
                        "iterate": "{{body.users}}",
                        "trigger": { "id": "{{item.id}}", "date": "{{item.created}}", "type": "date", "order": "desc" },
                        "output": "{{item}}",
                        "limit": "{{parameters.limit}}"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Set Module Section",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Available sections: api, epoch, parameters, expect, interface, samples, scope<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": { "type": "string" },
                  "method": { "type": "string" },
                  "qs": { "type": "object" },
                  "body": { "type": "object" },
                  "headers": { "type": "object" },
                  "response": {
                    "type": "object",
                    "properties": {
                      "iterate": { "type": "string" },
                      "trigger": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "date": { "type": "string" },
                          "type": { "type": "string" },
                          "order": { "type": "string" }
                        }
                      },
                      "output": { "type": "string" },
                      "limit": { "type": "string" }
                    }
                  }
                }
              },
              "example": {
                "url": "/api/users",
                "method": "GET",
                "qs": {},
                "body": {},
                "headers": {},
                "response": {
                  "iterate": "{{body.users}}",
                  "trigger": { "id": "{{item.id}}", "date": "{{item.created}}", "type": "date", "order": "desc" },
                  "output": "{{item}}",
                  "limit": "{{parameters.limit}}"
                }
              }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string" },
                    "method": { "type": "string" },
                    "qs": { "type": "object" },
                    "body": { "type": "object" },
                    "headers": { "type": "object" },
                    "response": {
                      "type": "object",
                      "properties": {
                        "iterate": { "type": "string" },
                        "trigger": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "date": { "type": "string" },
                            "type": { "type": "string" },
                            "order": { "type": "string" }
                          }
                        },
                        "output": { "type": "string" },
                        "limit": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-module-section": {
                    "summary": "Get Module Section",
                    "value": {
                      "url": "/api/users",
                      "method": "GET",
                      "qs": {},
                      "body": {},
                      "headers": {},
                      "response": {
                        "iterate": "{{body.users}}",
                        "trigger": { "id": "{{item.id}}", "date": "{{item.created}}", "type": "date", "order": "desc" },
                        "output": "{{item}}",
                        "limit": "{{parameters.limit}}"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleVisibility}": {
      "post": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Set Module Visibility",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleVisibility", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/clone": {
      "post": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Clone Module",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "newName": { "type": "string" } } },
              "example": { "newName": "apicek" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "module": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "description": { "type": "string" },
                        "typeId": { "type": "integer" },
                        "connection": { "type": "string" },
                        "webhook": { "type": "null" },
                        "crud": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "clone-module": {
                    "summary": "Clone Module",
                    "value": {
                      "module": {
                        "name": "apicek",
                        "label": "Testicek (clone)",
                        "description": "Těstíčko.",
                        "typeId": 4,
                        "connection": "multiverse",
                        "webhook": null,
                        "crud": null
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "newName": { "type": "string" } } },
                            "example": { "newName": "apicek" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleDeprecation}": {
      "post": {
        "tags": ["SDK Apps > Modules"],
        "summary": "Set Module Deprecation",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_moduleDeprecation", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-module-deprecation": {
                    "summary": "Set Module Deprecation",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_moduleDeprecation", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "text/plain" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs": {
      "get": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "List App RPCs",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "rpcs": { "type": "array" } } },
                "examples": {
                  "list-app-rpcs": {
                    "summary": "List App RPCs",
                    "value": { "rpcs": [] },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Create RPC",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" }, "label": { "type": "string" } } },
              "example": { "name": "listUseriiinos", "label": "List Users" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appRpc": { "type": "object", "properties": { "name": { "type": "string" }, "label": { "type": "string" } } }
                  }
                },
                "examples": {
                  "create-rpc": {
                    "summary": "Create RPC",
                    "value": { "appRpc": { "name": "listUsers", "label": "List Users" } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "name": { "type": "string" }, "label": { "type": "string" } } },
                            "example": { "name": "listUsers", "label": "List Users" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}": {
      "delete": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Delete RPC",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appRpc": { "type": "string" } } },
                "examples": {
                  "delete-rpc": {
                    "summary": "Delete RPC",
                    "value": { "appRpc": "listUsers" },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Get RPC",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appRpc": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "connection": { "type": "null" },
                        "altConnection": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-rpc": {
                    "summary": "Get RPC",
                    "value": { "appRpc": { "name": "listUsers", "label": "List Users", "connection": null, "altConnection": null } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Patch RPC",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
              "example": { "label": "IDI" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appRpc": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "connection": { "type": "null" },
                        "altConnection": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "patch-rpc": {
                    "summary": "Patch RPC",
                    "value": { "appRpc": { "name": "listUseriiinos", "label": "IDI", "connection": null, "altConnection": null } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
                            "example": { "label": "IDI" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Test RPC",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Tests the RPC<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": { "id": { "type": "string", "format": "utc-millisec" }, "jidlo": { "type": "string" } }
                  },
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "type": { "type": "string" }, "required": { "type": "boolean" } }
                    }
                  }
                }
              },
              "example": {
                "data": { "id": "1", "jidlo": "Černá zabijačkováasdf" },
                "schema": [
                  { "name": "id", "type": "integer", "required": true },
                  { "name": "jidlo", "type": "text", "required": true }
                ]
              }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
          { "name": "imt-remote-formula", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "imt-ignore-required", "in": "header", "schema": { "type": "string" }, "example": "yes" },
          { "name": "imt-validate-schema", "in": "header", "schema": { "type": "string" }, "example": "yes" }
        ]
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}/{SDK_rpcSection}": {
      "get": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Get RPC Section",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Available sections: api, parameters<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string" },
                    "method": { "type": "string" },
                    "qs": { "type": "object" },
                    "body": { "type": "object" },
                    "headers": { "type": "object" },
                    "response": {
                      "type": "object",
                      "properties": {
                        "iterate": { "type": "string" },
                        "output": { "type": "object", "properties": { "label": { "type": "string" }, "value": { "type": "string" } } }
                      }
                    }
                  }
                },
                "examples": {
                  "get-rpc-section": {
                    "summary": "Get RPC Section",
                    "value": {
                      "url": "/api/users",
                      "method": "GET",
                      "qs": {},
                      "body": {},
                      "headers": {},
                      "response": { "iterate": "{{body.users}}", "output": { "label": "{{item.name}}", "value": "{{item.id}}" } }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > RPCs"],
        "summary": "Set RPC Section",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Available sections: api, parameters<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": { "type": "string" },
                  "method": { "type": "string" },
                  "qs": { "type": "object" },
                  "body": { "type": "object" },
                  "headers": { "type": "object" },
                  "response": {
                    "type": "object",
                    "properties": {
                      "iterate": { "type": "string" },
                      "output": { "type": "object", "properties": { "label": { "type": "string" }, "value": { "type": "string" } } }
                    }
                  }
                }
              },
              "example": {
                "url": "/api/users",
                "method": "GET",
                "qs": {},
                "body": {},
                "headers": {},
                "response": { "iterate": "{{body.users}}", "output": { "label": "{{item.name}}", "value": "{{item.id}}" } }
              }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_rpcSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "change": { "type": "object" } } },
                "examples": {
                  "set-rpc-section": {
                    "summary": "Set RPC Section",
                    "value": { "change": {} },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "url": { "type": "string" },
                                "method": { "type": "string" },
                                "qs": { "type": "object" },
                                "body": { "type": "object" },
                                "headers": { "type": "object" },
                                "response": {
                                  "type": "object",
                                  "properties": {
                                    "iterate": { "type": "string" },
                                    "output": {
                                      "type": "object",
                                      "properties": { "label": { "type": "string" }, "value": { "type": "string" } }
                                    }
                                  }
                                }
                              }
                            },
                            "example": {
                              "url": "/api/users",
                              "method": "GET",
                              "qs": {},
                              "body": {},
                              "headers": {},
                              "response": { "iterate": "{{body.users}}", "output": { "label": "{{item.name}}", "value": "{{item.id}}" } }
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_rpcSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions": {
      "post": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Create Function",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" } } },
              "example": { "name": "parseTime3" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "appFunction": { "type": "object", "properties": { "name": { "type": "string" } } } }
                },
                "examples": {
                  "create-function": {
                    "summary": "Create Function",
                    "value": { "appFunction": { "name": "parseTime" } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "name": { "type": "string" } } },
                            "example": { "name": "parseTime" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["SDK Apps > Functions"],
        "summary": "List App Functions",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "array",
                      "items": { "type": "object", "properties": { "name": { "type": "string" }, "args": { "type": "string" } } }
                    }
                  }
                },
                "examples": {
                  "list-app-functions": {
                    "summary": "List App Functions",
                    "value": { "functions": [{ "name": "myFunction", "args": "()" }] },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}": {
      "get": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Get Function",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "appFunction": { "type": "object", "properties": { "name": { "type": "string" } } } }
                },
                "examples": {
                  "get-function": {
                    "summary": "Get Function",
                    "value": { "appFunction": { "name": "parseTime" } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Delete Function",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appFunction": { "type": "string" } } },
                "examples": {
                  "delete-function": {
                    "summary": "Delete Function",
                    "value": { "appFunction": "parseTime" },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/code": {
      "get": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Get Function Code",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "schema": { "type": "string" },
                "examples": {
                  "get-function-code": {
                    "summary": "Get Function Code",
                    "value": "function parseTime() {\n\n}",
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Set Function Code",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": { "text/plain": { "schema": { "type": "string", "example": "function parseTime() {\n\tconst a = \"Hey There\"\n}" } } }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/javascript" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "change": { "type": "object" } } },
                "examples": {
                  "set-function-code": {
                    "summary": "Set Function Code",
                    "value": { "change": {} },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "text/plain": {
                            "schema": { "type": "string", "example": "function parseTime() {\n\tconst a = \"Hey There\"\n}" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/test": {
      "get": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Get Function Test",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ]
      },
      "put": {
        "tags": ["SDK Apps > Functions"],
        "summary": "Set Function Test",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": { "text/plain": { "schema": { "type": "string", "example": "console.log('AAA');" } } } },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/javascript" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-function-test": {
                    "summary": "Set Function Test",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": { "content": { "text/plain": { "schema": { "type": "string", "example": "console.log('AAA');" } } } },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_appVersion", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_functionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/javascript" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/connections": {
      "post": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Create Connection",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "type": { "type": "string" }, "label": { "type": "string" } } },
              "example": { "type": "basic", "label": "Hello Charlie" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appConnection": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                    }
                  }
                },
                "examples": {
                  "create-connection": {
                    "summary": "Create Connection",
                    "value": { "appConnection": { "name": "my-app-13", "label": "Main Connection", "type": "basic" } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "type": { "type": "string" }, "label": { "type": "string" } } },
                            "example": { "type": "basic", "label": "Main Connection" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["SDK Apps > Connections"],
        "summary": "List App Connections",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connections": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                      }
                    }
                  }
                },
                "examples": {
                  "list-app-connections": {
                    "summary": "List App Connections",
                    "value": {
                      "connections": [
                        { "name": "testConnection", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-1", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-12", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-13", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-14", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-15", "label": "Test Connection", "type": "oauth" },
                        { "name": "postman-test-app-6-16", "label": "Test Connection", "type": "oauth" }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/connections/{SDK_connectionName}": {
      "get": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Get Connection",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appConnection": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                    }
                  }
                },
                "examples": {
                  "get-connection": {
                    "summary": "Get Connection",
                    "value": { "appConnection": { "name": "my-app-13", "label": "Main Connection", "type": "basic" } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Update Connection",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
              "example": { "label": "Main Connection" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appConnection": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                    }
                  }
                },
                "examples": {
                  "update-connection": {
                    "summary": "Update Connection",
                    "value": { "appConnection": { "name": "charlie-1", "label": "Main Connection", "type": "basic" } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
                            "example": { "label": "Main Connection" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Delete Connection",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appConnection": { "type": "string" } } },
                "examples": {
                  "delete-connection": {
                    "summary": "Delete Connection",
                    "value": { "appConnection": "my-app-13" },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/connections/{SDK_connectionName}/{SDK_connectionSection}": {
      "get": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Get Connection Section",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Available sections: api, parameters, scopes, scope, install, installSpec<br />\n",
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_connectionSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorize": {
                      "type": "object",
                      "properties": {
                        "qs": {
                          "type": "object",
                          "properties": {
                            "scope": { "type": "string" },
                            "client_id": { "type": "string" },
                            "redirect_uri": { "type": "string" },
                            "response_type": { "type": "string" }
                          }
                        },
                        "url": { "type": "string", "format": "uri" },
                        "response": {
                          "type": "object",
                          "properties": { "temp": { "type": "object", "properties": { "code": { "type": "string" } } } }
                        }
                      }
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "url": { "type": "string", "format": "uri" },
                        "body": {
                          "type": "object",
                          "properties": {
                            "code": { "type": "string" },
                            "client_id": { "type": "string" },
                            "grant_type": { "type": "string" },
                            "redirect_uri": { "type": "string" },
                            "client_secret": { "type": "string" }
                          }
                        },
                        "type": { "type": "string" },
                        "method": { "type": "string" },
                        "response": {
                          "type": "object",
                          "properties": { "data": { "type": "object", "properties": { "accessToken": { "type": "string" } } } }
                        },
                        "log": { "type": "object", "properties": { "sanitize": { "type": "array", "items": { "type": "string" } } } }
                      }
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "url": { "type": "string", "format": "uri" },
                        "headers": { "type": "object", "properties": { "authorization": { "type": "string" } } },
                        "response": {
                          "type": "object",
                          "properties": {
                            "uid": { "type": "string" },
                            "metadata": { "type": "object", "properties": { "type": { "type": "string" }, "value": { "type": "string" } } }
                          }
                        },
                        "log": { "type": "object", "properties": { "sanitize": { "type": "array", "items": { "type": "string" } } } }
                      }
                    },
                    "invalidate": {
                      "type": "object",
                      "properties": {
                        "url": { "type": "string", "format": "uri" },
                        "headers": { "type": "object", "properties": { "authorization": { "type": "string" } } },
                        "log": { "type": "object", "properties": { "sanitize": { "type": "array", "items": { "type": "string" } } } }
                      }
                    }
                  }
                },
                "examples": {
                  "get-connection-section": {
                    "summary": "Get Connection Section",
                    "value": {
                      "authorize": {
                        "qs": {
                          "scope": "{{join(oauth.scope, ',')}}",
                          "client_id": "{{ifempty(parameters.clientId, common.clientId)}}",
                          "redirect_uri": "{{oauth.redirectUri}}",
                          "response_type": "code"
                        },
                        "url": "https://www.example.com/oauth/authorize",
                        "response": { "temp": { "code": "{{query.code}}" } }
                      },
                      "token": {
                        "url": "https://www.example.com/api/token",
                        "body": {
                          "code": "{{temp.code}}",
                          "client_id": "{{ifempty(parameters.clientId, common.clientId)}}",
                          "grant_type": "authorization_code",
                          "redirect_uri": "{{oauth.redirectUri}}",
                          "client_secret": "{{ifempty(parameters.clientSecret, common.clientSecret)}}"
                        },
                        "type": "urlencoded",
                        "method": "POST",
                        "response": { "data": { "accessToken": "{{body.access_token}}" } },
                        "log": { "sanitize": ["request.body.code", "request.body.client_secret", "response.body.access_token"] }
                      },
                      "info": {
                        "url": "https://www.example.com/api/whoami",
                        "headers": { "authorization": "Bearer {{connection.accessToken}}" },
                        "response": { "uid": "{{body.id}}", "metadata": { "type": "text", "value": "{{body.user}}" } },
                        "log": { "sanitize": ["request.headers.authorization"] }
                      },
                      "invalidate": {
                        "url": "https://www.example.com/oauth/invalidate",
                        "headers": { "authorization": "Bearer {{connection.accessToken}}" },
                        "log": { "sanitize": ["request.headers.authorization"] }
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Set Connection Section",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Available sections: api, parameters, scopes, scope, installSpec, install<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "object", "properties": { "type": { "type": "string" }, "nazdar": { "type": "string" } } }
              },
              "example": [{ "type": "text", "nazdar": "molly" }]
            }
          }
        },
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_connectionSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "change": { "type": "object" } } },
                "examples": {
                  "set-connection-section": {
                    "summary": "Set Connection Section",
                    "value": { "change": {} },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "text/plain": {
                            "schema": {
                              "type": "string",
                              "example": "{\n\t\"authorize\": {\n\t\t\"qs\": {\n\t\t\t\"scope\": \"{{join(oauth.scope, ',')}}\",\n\t\t\t\"client_id\": \"{{ifempty(parameters.clientId, common.clientId)}}\",\n\t\t\t\"redirect_uri\": \"{{oauth.redirectUri}}\",\n\t\t\t\"response_type\": \"code\"\n\t\t},\n\t\t\"url\": \"https://www.example.com/oauth/authorize\",\n\t\t\"response\": {\n\t\t\t\"temp\": {\n\t\t\t\t\"code\": \"{{query.code}}\"\n\t\t\t}\n\t\t}\n\t},\n\t\"token\": {\n\t\t\"url\": \"https://www.example.com/api/token\",\n\t\t\"body\": {\n\t\t\t\"code\": \"{{temp.code}}\",\n\t\t\t\"client_id\": \"{{ifempty(parameters.clientId, common.clientId)}}\",\n\t\t\t\"grant_type\": \"authorization_code\",\n\t\t\t\"redirect_uri\": \"{{oauth.redirectUri}}\",\n\t\t\t\"client_secret\": \"{{ifempty(parameters.clientSecret, common.clientSecret)}}\"\n\t\t},\n\t\t\"type\": \"urlencoded\",\n\t\t\"method\": \"POST\",\n\t\t\"response\": {\n\t\t\t\"data\": {\n\t\t\t\t\"accessToken\": \"{{body.access_token}}\"\n\t\t\t}\n\t\t},\n\t\t\"log\": {\n\t\t\t\"sanitize\": [\n\t\t\t\t\"request.body.code\",\n\t\t\t\t\"request.body.client_secret\",\n\t\t\t\t\"response.body.access_token\"\n\t\t\t]\n\t\t}\n\t},\n\t// AAAAA\n\t\"info\": {\n\t\t\"url\": \"https://www.example.com/api/whoami\",\n\t\t\"headers\": {\n\t\t\t\"authorization\": \"Bearer {{connection.accessToken}}\"\n\t\t},\n\t\t\"response\": {\n\t\t\t\"uid\": \"{{body.id}}\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"value\": \"{{body.user}}\"\n\t\t\t}\n\t\t},\n\t\t\"log\": {\n\t\t\t\"sanitize\": [\n\t\t\t\t\"request.headers.authorization\"\n\t\t\t]\n\t\t}\n\t},\n\t\"invalidate\": {\n\t\t\"url\": \"https://www.example.com/oauth/invalidate\",\n\t\t\"headers\": {\n\t\t\t\"authorization\": \"Bearer {{connection.accessToken}}\"\n\t\t},\n\t\t\"log\": {\n\t\t\t\"sanitize\": [\n\t\t\t\t\"request.headers.authorization\"\n\t\t\t]\n\t\t}\n\t}\n}"
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/connections/{SDK_connectionName}/common": {
      "get": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Get Connection Common",
        "security": [{ "token": ["sdk-apps:read"] }],
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "clientId": { "type": "string" }, "clientSecret": { "type": "string" } } },
                "examples": {
                  "get-connection-common": {
                    "summary": "Get Connection Common",
                    "value": { "clientId": "ENTER_CLIENT_ID_HERE", "clientSecret": "ENTER_CLIENT_SECRET_HERE" },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > Connections"],
        "summary": "Set Connection Common",
        "security": [{ "token": ["sdk-apps:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "clientId": { "type": "string" }, "clientSecret": { "type": "string" } } },
              "example": { "clientId": "ENTER_CLIENT_ID_HEREEEEE", "clientSecret": "ENTER_CLIENT_SECRET_HERE" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "set-connection-common": {
                    "summary": "Set Connection Common",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": { "clientId": { "type": "string" }, "clientSecret": { "type": "string" } }
                            },
                            "example": { "clientId": "ENTER_CLIENT_ID_HEREEEEE", "clientSecret": "ENTER_CLIENT_SECRET_HERE" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_connectionName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/{SDK_appName}/webhooks": {
      "post": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Create Webhook",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "type": { "type": "string" }, "label": { "type": "string" } } },
              "example": { "type": "web", "label": "Watch Events" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appWebhook": { "type": "object", "properties": { "label": { "type": "string" }, "type": { "type": "string" } } }
                  }
                },
                "examples": {
                  "create-webhook": {
                    "summary": "Create Webhook",
                    "value": { "appWebhook": { "label": "Watch Events", "type": "web" } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "type": { "type": "string" },
                                "label": { "type": "string" },
                                "connection": { "type": "string" }
                              }
                            },
                            "example": { "type": "web", "label": "Watch Events", "connection": "my-app-1" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "List App Webhooks",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "name": { "type": "string" }, "label": { "type": "string" }, "type": { "type": "string" } }
                      }
                    }
                  }
                },
                "examples": {
                  "list-app-webhooks": {
                    "summary": "List App Webhooks",
                    "value": {
                      "webhooks": [
                        { "name": "postman-test-app-6-1", "label": "Test Connection", "type": "web" },
                        { "name": "aaaa", "label": "Test Connection", "type": "web" },
                        { "name": "postman-test-app-6-12", "label": "Test Connection", "type": "web" },
                        { "name": "postman-test-app-6-13", "label": "Test Connection", "type": "web" }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/webhooks/{SDK_webhookName}": {
      "get": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Get Webhook",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "parameters": [
          { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appWebhook": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "type": { "type": "string" },
                        "connection": { "type": "string" },
                        "altConnection": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-webhook": {
                    "summary": "Get Webhook",
                    "value": {
                      "appWebhook": {
                        "name": "my-app-12",
                        "label": "Watch Events",
                        "type": "web",
                        "connection": "my-app-1",
                        "altConnection": null
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Update Webhook",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
              "example": { "label": "Test Renamed" }
            }
          }
        },
        "parameters": [
          { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "appWebhook": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "label": { "type": "string" },
                        "type": { "type": "string" },
                        "connection": { "type": "null" },
                        "altConnection": { "type": "null" }
                      }
                    }
                  }
                },
                "examples": {
                  "update-webhook": {
                    "summary": "Update Webhook",
                    "value": {
                      "appWebhook": {
                        "name": "charlie-1",
                        "label": "Test Renamed",
                        "type": "web",
                        "connection": null,
                        "altConnection": null
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "label": { "type": "string" } } },
                            "example": { "label": "Test Renamed" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Delete Webhook",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Retrieves a list of all apps available to the user.<br />\n",
        "requestBody": { "content": {} },
        "parameters": [
          { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "appWebhook": { "type": "string" } } },
                "examples": {
                  "delete-webhook": {
                    "summary": "Delete Webhook",
                    "value": { "appWebhook": "my-app-12" },
                    "originalRequest": {
                      "requestBody": { "content": {} },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sdk/apps/webhooks/{SDK_webhookName}/{SDK_webhookSection}": {
      "get": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Get Webhook Section",
        "security": [{ "token": ["sdk-apps:read"] }],
        "description": "Available sections are: api, parameters, attach, detach, scope<br />\n",
        "parameters": [
          { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_webhookSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "api", "in": "query", "schema": { "type": "string" } },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "output": { "type": "string" } } },
                "examples": {
                  "get-webhook-section": {
                    "summary": "Get Webhook Section",
                    "value": { "output": "{{body}}" },
                    "originalRequest": {
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["SDK Apps > Webhooks"],
        "summary": "Set Webhook Section",
        "security": [{ "token": ["sdk-apps:write"] }],
        "description": "Available sections are: api, parameters, attach, detach, scope<br />\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "output": { "type": "string" }, "test": { "type": "boolean" } } },
              "example": { "output": "{{body}}", "test": true }
            }
          }
        },
        "parameters": [
          { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "SDK_webhookSection", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
          { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "change": { "type": "object" } } },
                "examples": {
                  "set-webhook-section": {
                    "summary": "Set Webhook Section",
                    "value": { "change": {} },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "output": { "type": "string" } } },
                            "example": { "output": "{{body}}" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "SDK_appName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookName", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "SDK_webhookSection", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "all", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "opensource", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/jsonc" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": ["Teams"],
        "summary": "List",
        "description": "Get a list of teams for a given organization.",
        "security": [{ "token": ["teams:read"] }],
        "parameters": [
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "required": true, "example": 1 },
          {
            "name": "cols[]",
            "in": "query",
            "description": "Specifies the columns you want to return.",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["id", "name", "organizationId"] } },
            "example": "name"
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "teams": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "organizationId": { "type": "integer" } }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "teams": [{ "id": 5, "name": "My Team", "organizationId": 5 }],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
                        { "name": "organizationId", "in": "query", "example": 5 }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Teams"],
        "summary": "Create",
        "description": "Create a new team.",
        "security": [{ "token": ["teams:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "name": { "type": "string", "required": true }, "organizationId": { "type": "integer", "required": true } }
              },
              "example": { "name": "New Team", "organizationId": 1 }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "organizationId": { "type": "integer" } }
                    },
                    "userTeamRole": {
                      "type": "object",
                      "properties": {
                        "usersRoleId": { "type": "integer" },
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "changeable": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": {
                  "team": { "id": 26, "name": "New Team", "organizationId": 1 },
                  "userTeamRole": { "usersRoleId": 1, "userId": 1, "teamId": 26, "changeable": false }
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}": {
      "get": {
        "tags": ["Teams"],
        "summary": "Detail",
        "description": "Get a detail of a team.",
        "security": [{ "token": ["teams:read"] }],
        "parameters": [
          { "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "description": "Specifies the columns you want to return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "organizationId", "activeScenarios", "activeApps", "operations", "transfer"]
              }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "organizationId": { "type": "integer" } }
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": { "team": { "id": 1, "name": "Team 1", "organizationId": 1, "scenarioDrafts": false } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "activeScenarios" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "activeApps" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "operations" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "transfer" },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  },
                  "detail-all": {
                    "summary": "Detail all",
                    "value": {
                      "team": {
                        "id": 1,
                        "name": "Team 1",
                        "organizationId": 1,
                        "activeScenarios": 1,
                        "activeApps": 0,
                        "operations": "2015",
                        "transfer": "27914902"
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "activeScenarios" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "activeApps" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "operations" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "transfer" },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Teams"],
        "summary": "Delete",
        "description": "Delete a team.",
        "security": [{ "token": ["teams:write"] }],
        "parameters": [{ "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "team": { "type": "integer" } } },
                "example": { "team": 3 }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Teams"],
        "summary": "Partial update",
        "description": "Edit a team",
        "security": [{ "token": ["teams:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" }, "scenarioDrafts": { "type": "boolean" } } },
              "example": { "name": "Team 3", "scenarioDrafts": true }
            }
          }
        },
        "parameters": [{ "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "organizationId": { "type": "integer" } }
                    }
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial update",
                    "value": { "team": { "id": 3, "name": "Team 2", "organizationId": 2, "scenarioDrafts": true } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "text/plain": {
                            "schema": { "type": "string", "example": "{\n\t\"name\": \"Team 2\"\n    \"scenarioDrafts\": true\n}" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/user-team-roles": {
      "get": {
        "tags": ["Teams > User team roles"],
        "summary": "List",
        "description": "Get a list of user team roles.",
        "security": [{ "token": ["teams:read"] }],
        "parameters": [
          { "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "country", "timezone", "license", "zone", "serviceName", "teams", "ispaused"]
              }
            },
            "example": "name"
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "usersRoleId": { "type": "integer" },
                          "userId": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "changeable": { "type": "boolean" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "userTeamRoles": [
                    { "usersRoleId": 1, "userId": 1, "teamId": 1, "changeable": false },
                    { "usersRoleId": 3, "userId": 13, "teamId": 1, "changeable": true }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/user-team-roles/{userId}": {
      "get": {
        "tags": ["Teams > User team roles"],
        "summary": "Detail",
        "description": "Get a detail of a user team role.",
        "security": [{ "token": ["teams:read"] }],
        "parameters": [
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["id", "name", "country", "timezone", "license", "zone", "serviceName", "teams", "ispaused"]
              }
            },
            "example": "name"
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamRole": {
                      "type": "object",
                      "properties": {
                        "usersRoleId": { "type": "integer" },
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "changeable": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": { "userTeamRole": { "usersRoleId": 3, "userId": 12, "teamId": 1, "changeable": true } }
              }
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": ["Templates"],
        "summary": "List templates",
        "description": "Retrieves a collection of all templates for a team with a given ID. Returned templates are sorted by name, with the most recently created templates appearing first.",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the team whose templates will be retrieved.",
            "example": 1
          },
          {
            "name": "public",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter indicates if the template is public which means that it was published and approved, and can be accessed by anyone.",
            "example": true
          },
          {
            "name": "usedApps[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } },
            "example": ["postgres"],
            "description": "The array with the text IDs of the apps used in the templates. This parameter allows you to get only the templates containing specific apps."
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the IDs of the templates.",
            "example": ["id", "name"]
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "teamName": { "type": "string" },
                          "organizationId": { "type": "string" },
                          "description": { "type": "string" },
                          "usedApps": { "type": "array", "items": { "type": "string" } },
                          "public": { "type": "boolean" },
                          "published": { "type": "string", "format": "date-time" },
                          "approved": { "type": "string", "format": "date-time" },
                          "approvedId": { "type": "integer" },
                          "requestedApproval": { "type": "boolean" },
                          "publishedId": { "type": "integer" },
                          "publicUrl": { "type": "string" },
                          "approvedName": { "type": "string" },
                          "publishedName": { "type": "string" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "templates": [
                        {
                          "id": 61,
                          "name": "Private",
                          "teamId": 1,
                          "description": "Template description",
                          "usedApps": ["http"],
                          "public": false,
                          "published": null,
                          "approved": null,
                          "approvedId": null,
                          "requestedApproval": false,
                          "publishedId": null,
                          "publicUrl": null,
                          "approvedName": null,
                          "publishedName": null
                        },
                        {
                          "id": 65,
                          "name": "Published",
                          "teamId": 1,
                          "description": null,
                          "usedApps": ["http"],
                          "public": true,
                          "published": "2020-12-01T14:14:53.807Z",
                          "approved": null,
                          "approvedId": null,
                          "requestedApproval": false,
                          "publishedId": 39,
                          "publicUrl": "39-published",
                          "approvedName": null,
                          "publishedName": "Published"
                        },
                        {
                          "id": 56,
                          "name": "Published, approved",
                          "teamId": 1,
                          "description": null,
                          "usedApps": ["http"],
                          "public": true,
                          "published": "2020-11-10T14:08:29.084Z",
                          "approved": "2020-12-03T09:44:55.685Z",
                          "approvedId": 35,
                          "requestedApproval": false,
                          "publishedId": null,
                          "publicUrl": "32-published-approved",
                          "approvedName": "Published, approved",
                          "publishedName": null
                        },
                        {
                          "id": 64,
                          "name": "Published, approved, waiting for approval",
                          "teamId": 1,
                          "description": null,
                          "usedApps": ["http"],
                          "public": true,
                          "published": "2020-12-01T15:18:31.790Z",
                          "approved": "2020-12-02T09:44:42.045Z",
                          "approvedId": 38,
                          "requestedApproval": true,
                          "publishedId": 40,
                          "publicUrl": "37-published-approved-waiting-for-approval",
                          "approvedName": "Published, approved, waiting for approval",
                          "publishedName": "Published, approved, waiting for approval"
                        },
                        {
                          "id": 62,
                          "name": "Published, waiting for approval",
                          "teamId": 1,
                          "description": null,
                          "usedApps": ["http"],
                          "public": true,
                          "published": "2020-11-23T12:22:36.495Z",
                          "approved": null,
                          "approvedId": null,
                          "requestedApproval": true,
                          "publishedId": 36,
                          "publicUrl": "36-published-waiting-for-approval",
                          "approvedName": null,
                          "publishedName": "Published, waiting for approval"
                        }
                      ],
                      "pg": { "sortBy": "name", "limit": 10, "sortDir": "asc", "offset": 0 }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "teamId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "description" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usedApps" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "public" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approvedId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publishedId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publicUrl" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "published" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approved" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publishedName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approvedName" },
                        { "name": "usedApps[]", "in": "query", "schema": { "type": "string" }, "example": "postgres" },
                        { "name": "usedApps[]", "in": "query", "schema": { "type": "string" }, "example": "http" },
                        { "name": "teamId", "in": "query", "schema": { "type": "string" }, "example": "1" },
                        { "name": "public", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "pg[sortBy]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "pg[offset]", "in": "query", "schema": { "type": "integer" }, "example": "0" },
                        { "name": "pg[sortDir]", "in": "query", "schema": { "type": "string" }, "example": "asc" },
                        { "name": "pg[limit]", "in": "query", "schema": { "type": "integer" }, "example": "20" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Templates"],
        "summary": "Create template",
        "description": "Creates a new template with parameters passed in the request body. As the response, it returns all details of the created template.",
        "security": [{ "token": ["templates:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": { "type": "integer" },
                  "language": { "type": "string" },
                  "blueprint": {
                    "type": "object",
                    "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                    "properties": {
                      "flow": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "mapper": {
                              "type": "object",
                              "properties": {
                                "ca": { "type": "string" },
                                "qs": { "type": "array" },
                                "url": { "type": "string", "format": "uri" },
                                "gzip": { "type": "boolean" },
                                "method": { "type": "string" },
                                "headers": { "type": "array" },
                                "timeout": { "type": "string" },
                                "authPass": { "type": "string" },
                                "authUser": { "type": "string" },
                                "bodyType": { "type": "string" },
                                "shareCookies": { "type": "boolean" },
                                "parseResponse": { "type": "boolean" },
                                "followRedirect": { "type": "boolean" },
                                "useQuerystring": { "type": "boolean" },
                                "rejectUnauthorized": { "type": "boolean" }
                              }
                            },
                            "module": { "type": "string", "format": "uri" },
                            "onerror": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "mapper": {
                                    "type": "object",
                                    "properties": {
                                      "count": { "type": "string", "format": "utc-millisec" },
                                      "retry": { "type": "boolean" },
                                      "interval": { "type": "string", "format": "utc-millisec" }
                                    }
                                  },
                                  "module": { "type": "string", "format": "uri" },
                                  "version": { "type": "integer" },
                                  "metadata": {
                                    "type": "object",
                                    "properties": {
                                      "expect": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "type": { "type": "string" },
                                            "label": { "type": "string" },
                                            "required": { "type": "boolean" }
                                          }
                                        }
                                      },
                                      "restore": {
                                        "type": "object",
                                        "properties": { "retry": { "type": "object", "properties": { "mode": { "type": "string" } } } }
                                      },
                                      "designer": {
                                        "type": "object",
                                        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                      }
                                    }
                                  },
                                  "parameters": { "type": "object" }
                                }
                              }
                            },
                            "version": { "type": "integer" },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "expect": { "type": "array", "items": { "type": "object" } },
                                "restore": {
                                  "type": "object",
                                  "properties": {
                                    "qs": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                    },
                                    "method": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                    },
                                    "headers": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                    },
                                    "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                  }
                                },
                                "designer": { "type": "object", "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } } },
                                "parameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": { "type": "string" },
                                      "type": { "type": "string" },
                                      "label": { "type": "string" },
                                      "required": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                          }
                        }
                      },
                      "name": { "type": "string" },
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "version": { "type": "integer" },
                          "scenario": {
                            "type": "object",
                            "properties": {
                              "maxErrors": { "type": "integer" },
                              "autoCommit": { "type": "boolean" },
                              "roundtrips": { "type": "integer" }
                            }
                          }
                        }
                      }
                    }
                  },
                  "scheduling": {
                    "type": "object",
                    "description": "The scheduling details.",
                    "properties": {
                      "type": { "type": "string", "enum": ["immediately", "indefinitely", "once", "daily", "weekly", "monthly", "yearly"] },
                      "interval": { "type": "integer", "minimum": 0 },
                      "date": { "type": "string", "format": "date-time" },
                      "between": { "type": "array", "items": { "type": "string", "format": "date-time" } },
                      "time": { "type": "string", "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$" },
                      "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                      "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } },
                      "restrict": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "nullable": true,
                                "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$"
                              }
                            },
                            "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                            "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } }
                          }
                        }
                      }
                    }
                  },
                  "controller": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "maxLenght": 120, "minLength": 1 },
                      "description": { "type": "string", "maxLength": 240, "minLength": 0 },
                      "idSequence": { "type": "integer" },
                      "modules": { "type": "object" }
                    }
                  }
                }
              },
              "example": {
                "teamId": 1,
                "language": "en",
                "blueprint": "{\"flow\":[{\"id\":1,\"module\":\"http:ActionGetFile\",\"version\":3,\"parameters\":{\"handleErrors\":false},\"mapper\":{\"url\":\"https://google.com\",\"method\":\"get\",\"shareCookies\":false},\"metadata\":{\"designer\":{\"x\":0,\"y\":0},\"parameters\":[{\"name\":\"handleErrors\",\"label\":\"Evaluate all states as errors (except for 2xx and 3xx )\",\"type\":\"boolean\",\"required\":true}],\"expect\":[{\"name\":\"url\",\"label\":\"URL\",\"type\":\"url\",\"required\":true},{\"name\":\"method\",\"label\":\"Method\",\"type\":\"hidden\"},{\"name\":\"shareCookies\",\"label\":\"Share cookies with other HTTP modules\",\"type\":\"boolean\",\"required\":true}]}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                "controller": "{\"modules\":{},\"name\":\"New template\",\"idSequence\":2}"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the IDs and names of the newly created templates.",
            "example": ["id", "name"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "teamName": { "type": "string" },
                        "organizationId": { "type": "string" },
                        "description": { "type": "string" },
                        "usedApps": { "type": "array", "items": { "type": "string" } },
                        "public": { "type": "boolean" },
                        "published": { "type": "string", "format": "date-time" },
                        "approved": { "type": "string", "format": "date-time" },
                        "approvedId": { "type": "integer" },
                        "requestedApproval": { "type": "boolean" },
                        "publishedId": { "type": "integer" },
                        "publicUrl": { "type": "string" },
                        "approvedName": { "type": "string" },
                        "publishedName": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "template": {
                        "id": 67,
                        "name": "New template",
                        "teamId": 1,
                        "description": null,
                        "usedApps": ["http"],
                        "public": false,
                        "published": null,
                        "approved": null,
                        "approvedId": null,
                        "requestedApproval": false,
                        "publishedId": null,
                        "publicUrl": null,
                        "approvedName": null,
                        "publishedName": null
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "teamId": { "type": "integer" },
                                "language": { "type": "string" },
                                "blueprint": {
                                  "type": "object",
                                  "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                                  "properties": {
                                    "flow": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": { "type": "integer" },
                                          "mapper": {
                                            "type": "object",
                                            "properties": {
                                              "ca": { "type": "string" },
                                              "qs": { "type": "array" },
                                              "url": { "type": "string", "format": "uri" },
                                              "gzip": { "type": "boolean" },
                                              "method": { "type": "string" },
                                              "headers": { "type": "array" },
                                              "timeout": { "type": "string" },
                                              "authPass": { "type": "string" },
                                              "authUser": { "type": "string" },
                                              "bodyType": { "type": "string" },
                                              "shareCookies": { "type": "boolean" },
                                              "parseResponse": { "type": "boolean" },
                                              "followRedirect": { "type": "boolean" },
                                              "useQuerystring": { "type": "boolean" },
                                              "rejectUnauthorized": { "type": "boolean" }
                                            }
                                          },
                                          "module": { "type": "string", "format": "uri" },
                                          "onerror": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "id": { "type": "integer" },
                                                "mapper": {
                                                  "type": "object",
                                                  "properties": {
                                                    "count": { "type": "string", "format": "utc-millisec" },
                                                    "retry": { "type": "boolean" },
                                                    "interval": { "type": "string", "format": "utc-millisec" }
                                                  }
                                                },
                                                "module": { "type": "string", "format": "uri" },
                                                "version": { "type": "integer" },
                                                "metadata": {
                                                  "type": "object",
                                                  "properties": {
                                                    "expect": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": { "type": "string" },
                                                          "type": { "type": "string" },
                                                          "label": { "type": "string" },
                                                          "required": { "type": "boolean" }
                                                        }
                                                      }
                                                    },
                                                    "restore": {
                                                      "type": "object",
                                                      "properties": {
                                                        "retry": { "type": "object", "properties": { "mode": { "type": "string" } } }
                                                      }
                                                    },
                                                    "designer": {
                                                      "type": "object",
                                                      "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                                    }
                                                  }
                                                },
                                                "parameters": { "type": "object" }
                                              }
                                            }
                                          },
                                          "version": { "type": "integer" },
                                          "metadata": {
                                            "type": "object",
                                            "properties": {
                                              "expect": { "type": "array", "items": { "type": "object" } },
                                              "restore": {
                                                "type": "object",
                                                "properties": {
                                                  "qs": {
                                                    "type": "object",
                                                    "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                                  },
                                                  "method": {
                                                    "type": "object",
                                                    "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                                  },
                                                  "headers": {
                                                    "type": "object",
                                                    "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                                  },
                                                  "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                                }
                                              },
                                              "designer": {
                                                "type": "object",
                                                "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                              },
                                              "parameters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": { "type": "string" },
                                                    "type": { "type": "string" },
                                                    "label": { "type": "string" },
                                                    "required": { "type": "boolean" }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                                        }
                                      }
                                    },
                                    "name": { "type": "string" },
                                    "metadata": {
                                      "type": "object",
                                      "properties": {
                                        "version": { "type": "integer" },
                                        "scenario": {
                                          "type": "object",
                                          "properties": {
                                            "maxErrors": { "type": "integer" },
                                            "autoCommit": { "type": "boolean" },
                                            "roundtrips": { "type": "integer" }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "scheduling": {
                                  "type": "object",
                                  "description": "The scheduling details.",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": ["immediately", "indefinitely", "once", "daily", "weekly", "monthly", "yearly"]
                                    },
                                    "interval": { "type": "integer", "minimum": 0 },
                                    "date": { "type": "string", "format": "date-time" },
                                    "between": { "type": "array", "items": { "type": "string", "format": "date-time" } },
                                    "time": { "type": "string", "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$" },
                                    "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                                    "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } },
                                    "restrict": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "nullable": true,
                                              "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$"
                                            }
                                          },
                                          "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                                          "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } }
                                        }
                                      }
                                    }
                                  }
                                },
                                "controller": {
                                  "type": "object",
                                  "properties": {
                                    "name": { "type": "string", "maxLenght": 120, "minLength": 1 },
                                    "description": { "type": "string", "maxLength": 240, "minLength": 0 },
                                    "idSequence": { "type": "integer" },
                                    "modules": { "type": "object" }
                                  }
                                }
                              }
                            },
                            "example": {
                              "teamId": 1,
                              "language": "en",
                              "blueprint": "{\"flow\":[{\"id\":1,\"module\":\"http:ActionGetFile\",\"version\":3,\"parameters\":{\"handleErrors\":false},\"mapper\":{\"url\":\"https://google.com\",\"method\":\"get\",\"shareCookies\":false},\"metadata\":{\"designer\":{\"x\":0,\"y\":0},\"parameters\":[{\"name\":\"handleErrors\",\"label\":\"Evaluate all states as errors (except for 2xx and 3xx )\",\"type\":\"boolean\",\"required\":true}],\"expect\":[{\"name\":\"url\",\"label\":\"URL\",\"type\":\"url\",\"required\":true},{\"name\":\"method\",\"label\":\"Method\",\"type\":\"hidden\"},{\"name\":\"shareCookies\",\"label\":\"Share cookies with other HTTP modules\",\"type\":\"boolean\",\"required\":true}]}}],\"metadata\":{\"version\":1,\"scenario\":{\"roundtrips\":1,\"maxErrors\":3,\"autoCommit\":true,\"autoCommitTriggerLast\":true,\"sequential\":false,\"confidential\":false,\"dataloss\":false,\"dlq\":false},\"designer\":{\"orphans\":[]}}}",
                              "scheduling": "{\"type\":\"indefinitely\",\"interval\":900}",
                              "controller": "{\"modules\":{},\"name\":\"New template\",\"idSequence\":2}"
                            }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "teamId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "description" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usedApps" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "public" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approvedId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publishedId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publicUrl" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "published" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approved" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "publishedName" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "approvedName" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}": {
      "get": {
        "tags": ["Templates"],
        "summary": "List template details",
        "description": "Retrieves all properties of a template with a given ID.",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the ID and name of the template.",
            "examples": {
              "id-name": { "summary": "Id, name", "value": ["id", "name"] },
              "all-columns": {
                "summary": "All columns",
                "value": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "teamName": { "type": "string" },
                        "organizationId": { "type": "string" },
                        "description": { "type": "string" },
                        "usedApps": { "type": "array", "items": { "type": "string" } },
                        "public": { "type": "boolean" },
                        "published": { "type": "string", "format": "date-time" },
                        "approved": { "type": "string", "format": "date-time" },
                        "approvedId": { "type": "integer" },
                        "requestedApproval": { "type": "boolean" },
                        "publishedId": { "type": "integer" },
                        "publicUrl": { "type": "string" },
                        "approvedName": { "type": "string" },
                        "publishedName": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "id-name": {
                    "summary": "Id, name",
                    "value": { "template": { "id": 164, "name": "Published, approved, waiting for approval" } }
                  },
                  "all-columns": {
                    "summary": "All columns",
                    "value": {
                      "template": {
                        "id": 164,
                        "name": "Published, approved, waiting for approval",
                        "teamId": 1,
                        "description": null,
                        "usedApps": ["http"],
                        "public": true,
                        "published": "2020-12-01T15:18:31.790Z",
                        "approved": "2020-12-02T09:44:42.045Z",
                        "approvedId": 38,
                        "requestedApproval": true,
                        "publishedId": 40,
                        "publicUrl": "37-published-approved-waiting-for-approval",
                        "approvedName": "Published, approved, waiting for approval",
                        "publishedName": "Published, approved, waiting for approval"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Templates"],
        "summary": "Update template",
        "description": "Updates a template with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. As the response, it returns all details of the updated template including properties that were not changed.",
        "security": [{ "token": ["templates:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "The new name of the template. The name does not need to be unique." },
                  "blueprint": {
                    "type": "object",
                    "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                    "properties": {
                      "flow": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "mapper": {
                              "type": "object",
                              "properties": {
                                "ca": { "type": "string" },
                                "qs": { "type": "array" },
                                "url": { "type": "string", "format": "uri" },
                                "gzip": { "type": "boolean" },
                                "method": { "type": "string" },
                                "headers": { "type": "array" },
                                "timeout": { "type": "string" },
                                "authPass": { "type": "string" },
                                "authUser": { "type": "string" },
                                "bodyType": { "type": "string" },
                                "shareCookies": { "type": "boolean" },
                                "parseResponse": { "type": "boolean" },
                                "followRedirect": { "type": "boolean" },
                                "useQuerystring": { "type": "boolean" },
                                "rejectUnauthorized": { "type": "boolean" }
                              }
                            },
                            "module": { "type": "string", "format": "uri" },
                            "onerror": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "mapper": {
                                    "type": "object",
                                    "properties": {
                                      "count": { "type": "string", "format": "utc-millisec" },
                                      "retry": { "type": "boolean" },
                                      "interval": { "type": "string", "format": "utc-millisec" }
                                    }
                                  },
                                  "module": { "type": "string", "format": "uri" },
                                  "version": { "type": "integer" },
                                  "metadata": {
                                    "type": "object",
                                    "properties": {
                                      "expect": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": { "type": "string" },
                                            "type": { "type": "string" },
                                            "label": { "type": "string" },
                                            "required": { "type": "boolean" }
                                          }
                                        }
                                      },
                                      "restore": {
                                        "type": "object",
                                        "properties": { "retry": { "type": "object", "properties": { "mode": { "type": "string" } } } }
                                      },
                                      "designer": {
                                        "type": "object",
                                        "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                      }
                                    }
                                  },
                                  "parameters": { "type": "object" }
                                }
                              }
                            },
                            "version": { "type": "integer" },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "expect": { "type": "array", "items": { "type": "object" } },
                                "restore": {
                                  "type": "object",
                                  "properties": {
                                    "qs": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                    },
                                    "method": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                    },
                                    "headers": {
                                      "type": "object",
                                      "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                    },
                                    "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                  }
                                },
                                "designer": { "type": "object", "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } } },
                                "parameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": { "type": "string" },
                                      "type": { "type": "string" },
                                      "label": { "type": "string" },
                                      "required": { "type": "boolean" }
                                    }
                                  }
                                }
                              }
                            },
                            "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                          }
                        }
                      },
                      "name": { "type": "string" },
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "version": { "type": "integer" },
                          "scenario": {
                            "type": "object",
                            "properties": {
                              "maxErrors": { "type": "integer" },
                              "autoCommit": { "type": "boolean" },
                              "roundtrips": { "type": "integer" }
                            }
                          }
                        }
                      }
                    }
                  },
                  "scheduling": {
                    "type": "object",
                    "description": "The scheduling details.",
                    "properties": {
                      "type": { "type": "string", "enum": ["immediately", "indefinitely", "once", "daily", "weekly", "monthly", "yearly"] },
                      "interval": { "type": "integer", "minimum": 0 },
                      "date": { "type": "string", "format": "date-time" },
                      "between": { "type": "array", "items": { "type": "string", "format": "date-time" } },
                      "time": { "type": "string", "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$" },
                      "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                      "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } },
                      "restrict": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "nullable": true,
                                "pattern": "^[0-2]?[0-9]:[0-5]?[0-9](:[0-5]?[0-9])?(\\\\.[0-9]+)?$"
                              }
                            },
                            "days": { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 31 } },
                            "months": { "type": "array", "items": { "type": "integer", "minimum": 1, "maximum": 12 } }
                          }
                        }
                      }
                    }
                  },
                  "controller": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "maxLenght": 120, "minLength": 1 },
                      "description": { "type": "string", "maxLength": 240, "minLength": 0 },
                      "idSequence": { "type": "integer" },
                      "modules": { "type": "object" }
                    }
                  }
                }
              },
              "example": { "name": "Renamed template" }
            }
          }
        },
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "templatePublicId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
            "example": 18
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the description of the templates.",
            "examples": {
              "all-columns": {
                "summary": "All columns",
                "value": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "teamId": { "type": "integer" },
                          "teamName": { "type": "string" },
                          "organizationId": { "type": "string" },
                          "description": { "type": "string" },
                          "usedApps": { "type": "array", "items": { "type": "string" } },
                          "public": { "type": "boolean" },
                          "published": { "type": "string", "format": "date-time" },
                          "approved": { "type": "string", "format": "date-time" },
                          "approvedId": { "type": "integer" },
                          "requestedApproval": { "type": "boolean" },
                          "publishedId": { "type": "integer" },
                          "publicUrl": { "type": "string" },
                          "approvedName": { "type": "string" },
                          "publishedName": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "all-columns": {
                    "summary": "All columns",
                    "value": {
                      "template": [
                        {
                          "id": 164,
                          "name": "Renamed template",
                          "teamId": 1,
                          "description": null,
                          "usedApps": ["http"],
                          "public": false,
                          "published": null,
                          "approved": null,
                          "approvedId": null,
                          "requestedApproval": false,
                          "publishedId": null,
                          "publicUrl": null,
                          "approvedName": null,
                          "publishedName": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Templates"],
        "summary": "Delete template",
        "description": "Deletes a template with a given ID and returns the ID as the response.",
        "security": [{ "token": ["templates:write"] }],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "confirmed",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "This parameter confirms the deletion of the private or published templated. The public (approved) templates can only be deleted by the administrator.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "template": { "type": "integer" } } },
                "examples": { "delete": { "summary": "Delete", "value": { "template": 164 } } }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}/blueprint": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get template blueprint",
        "description": "Retrieves a blueprint of a template with a given ID.",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "forUse",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "If this parameter is set to true, it means the blueprint should be used for creating a scenario from the template.",
            "example": true
          },
          {
            "name": "templatePublicId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
            "example": 18
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "blueprint": {
                      "type": "object",
                      "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                      "properties": {
                        "flow": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "mapper": {
                                "type": "object",
                                "properties": {
                                  "ca": { "type": "string" },
                                  "qs": { "type": "array" },
                                  "url": { "type": "string", "format": "uri" },
                                  "gzip": { "type": "boolean" },
                                  "method": { "type": "string" },
                                  "headers": { "type": "array" },
                                  "timeout": { "type": "string" },
                                  "authPass": { "type": "string" },
                                  "authUser": { "type": "string" },
                                  "bodyType": { "type": "string" },
                                  "shareCookies": { "type": "boolean" },
                                  "parseResponse": { "type": "boolean" },
                                  "followRedirect": { "type": "boolean" },
                                  "useQuerystring": { "type": "boolean" },
                                  "rejectUnauthorized": { "type": "boolean" }
                                }
                              },
                              "module": { "type": "string", "format": "uri" },
                              "onerror": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "integer" },
                                    "mapper": {
                                      "type": "object",
                                      "properties": {
                                        "count": { "type": "string", "format": "utc-millisec" },
                                        "retry": { "type": "boolean" },
                                        "interval": { "type": "string", "format": "utc-millisec" }
                                      }
                                    },
                                    "module": { "type": "string", "format": "uri" },
                                    "version": { "type": "integer" },
                                    "metadata": {
                                      "type": "object",
                                      "properties": {
                                        "expect": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": { "type": "string" },
                                              "type": { "type": "string" },
                                              "label": { "type": "string" },
                                              "required": { "type": "boolean" }
                                            }
                                          }
                                        },
                                        "restore": {
                                          "type": "object",
                                          "properties": { "retry": { "type": "object", "properties": { "mode": { "type": "string" } } } }
                                        },
                                        "designer": {
                                          "type": "object",
                                          "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                        }
                                      }
                                    },
                                    "parameters": { "type": "object" }
                                  }
                                }
                              },
                              "version": { "type": "integer" },
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "expect": { "type": "array", "items": { "type": "object" } },
                                  "restore": {
                                    "type": "object",
                                    "properties": {
                                      "qs": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                      },
                                      "method": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                      },
                                      "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                    }
                                  },
                                  "designer": {
                                    "type": "object",
                                    "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                  },
                                  "parameters": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "label": { "type": "string" },
                                        "required": { "type": "boolean" }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                            }
                          }
                        },
                        "name": { "type": "string" },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "version": { "type": "integer" },
                            "scenario": {
                              "type": "object",
                              "properties": {
                                "maxErrors": { "type": "integer" },
                                "autoCommit": { "type": "boolean" },
                                "roundtrips": { "type": "integer" }
                              }
                            }
                          }
                        }
                      }
                    },
                    "controller": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "modules": { "type": "object" }, "idSequence": { "type": "integer" } }
                    },
                    "scheduling": { "type": "object", "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } } },
                    "language": { "type": "string" }
                  }
                },
                "examples": {
                  "blueprint": {
                    "summary": "Blueprint",
                    "value": {
                      "blueprint": {
                        "flow": [
                          {
                            "id": 1,
                            "mapper": { "url": "https://seznam.cz", "method": "get", "shareCookies": false },
                            "module": "http:ActionGetFile",
                            "version": 3,
                            "metadata": {
                              "expect": [
                                { "name": "url", "type": "url", "label": "URL", "required": true },
                                { "name": "method", "type": "hidden", "label": "Method" },
                                {
                                  "name": "shareCookies",
                                  "type": "boolean",
                                  "label": "Share cookies with other HTTP modules",
                                  "required": true
                                }
                              ],
                              "designer": { "x": 0, "y": 0 },
                              "parameters": [
                                {
                                  "name": "handleErrors",
                                  "type": "boolean",
                                  "label": "Evaluate all states as errors (except for 2xx and 3xx )",
                                  "required": true
                                }
                              ]
                            },
                            "parameters": { "handleErrors": false }
                          }
                        ],
                        "metadata": {
                          "version": 1,
                          "designer": { "orphans": [] },
                          "scenario": {
                            "dlq": false,
                            "dataloss": false,
                            "maxErrors": 3,
                            "autoCommit": true,
                            "roundtrips": 1,
                            "sequential": false,
                            "confidential": false,
                            "autoCommitTriggerLast": true
                          }
                        }
                      },
                      "controller": { "name": "Template name", "modules": {}, "idSequence": 2 },
                      "scheduling": { "type": "indefinitely", "interval": 1000 },
                      "language": "en"
                    },
                    "originalRequest": {
                      "parameters": [
                        {
                          "name": "templateId",
                          "in": "path",
                          "schema": { "type": "integer" },
                          "required": true,
                          "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
                          "example": 164
                        },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}/publish": {
      "post": {
        "tags": ["Templates"],
        "summary": "Publish template",
        "description": "Publishes a private template with a given ID. As the response, it returns all details of the template.",
        "security": [{ "token": ["templates:write"] }],
        "requestBody": { "content": {} },
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the ID and name of the published template.",
            "examples": {
              "id-name": { "summary": "Id, name", "value": ["id", "name"] },
              "all-columns": {
                "summary": "All columns",
                "value": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "teamName": { "type": "string" },
                        "organizationId": { "type": "string" },
                        "description": { "type": "string" },
                        "usedApps": { "type": "array", "items": { "type": "string" } },
                        "public": { "type": "boolean" },
                        "published": { "type": "string", "format": "date-time" },
                        "approved": { "type": "string", "format": "date-time" },
                        "approvedId": { "type": "integer" },
                        "requestedApproval": { "type": "boolean" },
                        "publishedId": { "type": "integer" },
                        "publicUrl": { "type": "string" },
                        "approvedName": { "type": "string" },
                        "publishedName": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "all-columns": {
                    "summary": "All columns",
                    "value": {
                      "template": {
                        "id": 164,
                        "name": "Renamed template",
                        "teamId": 1,
                        "description": null,
                        "usedApps": ["http"],
                        "public": true,
                        "published": "2020-12-03T14:11:08.327Z",
                        "approved": null,
                        "approvedId": null,
                        "requestedApproval": false,
                        "publishedId": 48,
                        "publicUrl": "48-renamed-template",
                        "approvedName": null,
                        "publishedName": "Renamed template"
                      }
                    }
                  },
                  "id-name": { "summary": "Id, name", "value": { "template": { "id": 164, "name": "Renamed template" } } }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}/request-approval": {
      "post": {
        "tags": ["Templates"],
        "summary": "Request approval",
        "description": "Requests approval of the published template with the given IDs of its private and published versions. As the response, it returns all details of the template.",
        "security": [{ "token": ["templates:write"] }],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The unique numeric ID of the private template. It can be retrieved from the `/templates` endpoint.",
            "example": 164
          },
          {
            "name": "templatePublicId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
            "example": 18
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the ID and name of the template you requested approval for.",
            "examples": {
              "id-name": { "summary": "Id, name", "value": ["id", "name"] },
              "all-columns": {
                "summary": "All columns",
                "value": [
                  "id",
                  "name",
                  "teamId",
                  "description",
                  "usedApps",
                  "public",
                  "published",
                  "approved",
                  "approvedId",
                  "requestedApproval",
                  "publishedId",
                  "publicUrl",
                  "approvedName",
                  "publishedName"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "teamId": { "type": "integer" },
                        "teamName": { "type": "string" },
                        "organizationId": { "type": "string" },
                        "description": { "type": "string" },
                        "usedApps": { "type": "array", "items": { "type": "string" } },
                        "public": { "type": "boolean" },
                        "published": { "type": "string", "format": "date-time" },
                        "approved": { "type": "string", "format": "date-time" },
                        "approvedId": { "type": "integer" },
                        "requestedApproval": { "type": "boolean" },
                        "publishedId": { "type": "integer" },
                        "publicUrl": { "type": "string" },
                        "approvedName": { "type": "string" },
                        "publishedName": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "all-columns": {
                    "summary": "Request Approval",
                    "value": {
                      "template": {
                        "id": 164,
                        "name": "Renamed template",
                        "teamId": 1,
                        "description": null,
                        "usedApps": ["http"],
                        "public": true,
                        "published": "2020-12-03T14:11:08.327Z",
                        "approved": null,
                        "approvedId": null,
                        "requestedApproval": true,
                        "publishedId": 48,
                        "publicUrl": "48-renamed-template",
                        "approvedName": null,
                        "publishedName": "Renamed template"
                      }
                    }
                  },
                  "id-name": { "summary": "Id, name", "value": { "template": { "id": 164, "name": "Renamed template" } } }
                }
              }
            }
          }
        }
      }
    },
    "/templates/public": {
      "get": {
        "tags": ["Templates > Public"],
        "summary": "List public (approved) templates",
        "description": "Retrieves a collection of all public (approved) templates. Returned templates are sorted by name, with the most recently created templates appearing first.",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "includeEn",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "If this parameter is set to true, it means English templates should be included in the response. This is relevant only if the user's language is not English.",
            "example": true
          },
          {
            "name": "name",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The name of the template. This parameter allows limiting returned results to the names of the templates.",
            "example": "16-multiple-apps-template-example"
          },
          {
            "name": "usedApps[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } },
            "example": ["postgres"],
            "description": "The array with the text IDs of the apps used in the templates. This parameter allows you to get only the templates containing specific apps."
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["id", "name", "description", "url", "usedApps", "usage"] } },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only the IDs of the public templates.",
            "example": ["id", "name"]
          },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templatesPublic": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "description": { "type": "string" },
                          "url": { "type": "string" },
                          "usedApps": { "type": "array", "items": { "type": "string" } },
                          "usage": { "type": "integer" }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "templatesPublic": [
                        {
                          "id": 13,
                          "name": "Http template example",
                          "description": null,
                          "url": "13-http-template-example",
                          "usedApps": ["http"],
                          "usage": 321
                        },
                        {
                          "id": 17,
                          "name": "Multiple apps template example",
                          "description": null,
                          "url": "16-multiple-apps-template-example",
                          "usedApps": ["discord", "http", "tools", "util", "gmail"],
                          "usage": 52
                        }
                      ],
                      "pg": { "sortBy": "usage", "limit": 100, "sortDir": "desc", "offset": 0 }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/public/{templateUrl}": {
      "get": {
        "tags": ["Templates > Public"],
        "summary": "Get public (approved) template detail",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "templateUrl",
            "in": "path",
            "schema": { "type": "string" },
            "required": true,
            "description": "The unique URL of the public (approved) template consisting of the template ID and name. It can be retrieved from the `/templates/public` endpoint.",
            "example": "16-multiple-apps-template-example"
          },
          {
            "name": "templatePublicId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
            "example": 18
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["id", "name", "description", "url", "usedApps", "usage"] } },
            "description": "This parameter allows you to specify the group of values to return. For instance, you may want to retrieve only information about the apps used in the template.",
            "example": ["id", "name"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templatePublic": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "url": { "type": "string" },
                        "usedApps": { "type": "array", "items": { "type": "string" } },
                        "usage": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": {
                      "templatePublic": {
                        "id": 17,
                        "name": "Multiple apps template example",
                        "description": null,
                        "url": "16-multiple-apps-template-example",
                        "usedApps": ["discord", "http", "tools", "util", "gmail"],
                        "usage": 52
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/public/{templateUrl}/blueprint": {
      "get": {
        "tags": ["Templates > Public"],
        "summary": "Get public (approved) template blueprint",
        "security": [{ "token": ["templates:read"] }],
        "parameters": [
          {
            "name": "templateUrl",
            "in": "path",
            "schema": { "type": "string" },
            "required": true,
            "description": "The unique URL of the public (approved) template consisting of the template ID and name. It can be retrieved from the `/templates/public` endpoint.",
            "example": "16-multiple-apps-template-example"
          },
          {
            "name": "templatePublicId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The unique numeric ID of the public version of the approved template. It can be retrieved from the `/templates` endpoint as one of the following IDs: **publishedId** for all published templates that are waiting for approval or not, or **approvedId** for approved templates.",
            "example": 18
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "blueprint": {
                      "type": "object",
                      "description": "The full blueprint of the scenario or template. It contains information about the general setup and all included apps and modules, and their settings.",
                      "properties": {
                        "flow": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "mapper": {
                                "type": "object",
                                "properties": {
                                  "ca": { "type": "string" },
                                  "qs": { "type": "array" },
                                  "url": { "type": "string", "format": "uri" },
                                  "gzip": { "type": "boolean" },
                                  "method": { "type": "string" },
                                  "headers": { "type": "array" },
                                  "timeout": { "type": "string" },
                                  "authPass": { "type": "string" },
                                  "authUser": { "type": "string" },
                                  "bodyType": { "type": "string" },
                                  "shareCookies": { "type": "boolean" },
                                  "parseResponse": { "type": "boolean" },
                                  "followRedirect": { "type": "boolean" },
                                  "useQuerystring": { "type": "boolean" },
                                  "rejectUnauthorized": { "type": "boolean" }
                                }
                              },
                              "module": { "type": "string", "format": "uri" },
                              "onerror": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": { "type": "integer" },
                                    "mapper": {
                                      "type": "object",
                                      "properties": {
                                        "count": { "type": "string", "format": "utc-millisec" },
                                        "retry": { "type": "boolean" },
                                        "interval": { "type": "string", "format": "utc-millisec" }
                                      }
                                    },
                                    "module": { "type": "string", "format": "uri" },
                                    "version": { "type": "integer" },
                                    "metadata": {
                                      "type": "object",
                                      "properties": {
                                        "expect": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": { "type": "string" },
                                              "type": { "type": "string" },
                                              "label": { "type": "string" },
                                              "required": { "type": "boolean" }
                                            }
                                          }
                                        },
                                        "restore": {
                                          "type": "object",
                                          "properties": { "retry": { "type": "object", "properties": { "mode": { "type": "string" } } } }
                                        },
                                        "designer": {
                                          "type": "object",
                                          "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                        }
                                      }
                                    },
                                    "parameters": { "type": "object" }
                                  }
                                }
                              },
                              "version": { "type": "integer" },
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "expect": { "type": "array", "items": { "type": "object" } },
                                  "restore": {
                                    "type": "object",
                                    "properties": {
                                      "qs": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                      },
                                      "method": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "label": { "type": "string" } }
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": { "mode": { "type": "string" }, "items": { "type": "array" } }
                                      },
                                      "bodyType": { "type": "object", "properties": { "label": { "type": "string" } } }
                                    }
                                  },
                                  "designer": {
                                    "type": "object",
                                    "properties": { "x": { "type": "integer" }, "y": { "type": "integer" } }
                                  },
                                  "parameters": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "label": { "type": "string" },
                                        "required": { "type": "boolean" }
                                      }
                                    }
                                  }
                                }
                              },
                              "parameters": { "type": "object", "properties": { "handleErrors": { "type": "boolean" } } }
                            }
                          }
                        },
                        "name": { "type": "string" },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "version": { "type": "integer" },
                            "scenario": {
                              "type": "object",
                              "properties": {
                                "maxErrors": { "type": "integer" },
                                "autoCommit": { "type": "boolean" },
                                "roundtrips": { "type": "integer" }
                              }
                            }
                          }
                        }
                      }
                    },
                    "controller": {
                      "type": "object",
                      "properties": { "name": { "type": "string" }, "modules": { "type": "object" }, "idSequence": { "type": "integer" } }
                    },
                    "scheduling": { "type": "object", "properties": { "type": { "type": "string" }, "interval": { "type": "integer" } } },
                    "language": { "type": "string" }
                  }
                },
                "examples": {
                  "blueprint": {
                    "summary": "Blueprint",
                    "value": {
                      "blueprint": {
                        "flow": [
                          {
                            "id": 1,
                            "mapper": { "url": "https://google.com", "method": "get", "shareCookies": false },
                            "module": "http:ActionGetFile",
                            "version": 3,
                            "metadata": {
                              "expect": [
                                { "name": "url", "type": "url", "label": "URL", "required": true },
                                { "name": "method", "type": "hidden", "label": "Method" },
                                {
                                  "name": "shareCookies",
                                  "type": "boolean",
                                  "label": "Share cookies with other HTTP modules",
                                  "required": true
                                }
                              ],
                              "designer": { "x": 0, "y": 0 },
                              "parameters": [
                                {
                                  "name": "handleErrors",
                                  "type": "boolean",
                                  "label": "Evaluate all states as errors (except for 2xx and 3xx )",
                                  "required": true
                                }
                              ]
                            },
                            "parameters": { "handleErrors": false }
                          }
                        ],
                        "metadata": {
                          "version": 1,
                          "designer": { "orphans": [] },
                          "scenario": {
                            "dlq": false,
                            "dataloss": false,
                            "maxErrors": 3,
                            "autoCommit": true,
                            "roundtrips": 1,
                            "sequential": false,
                            "confidential": false,
                            "autoCommitTriggerLast": true
                          }
                        }
                      },
                      "controller": { "name": "New template", "modules": {}, "idSequence": 2 },
                      "scheduling": { "type": "indefinitely", "interval": 900 },
                      "language": "en"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List",
        "description": "Get a list of user for a team with a given ID/organization.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "example": 1 },
          {
            "name": "pg[sortBy]",
            "in": "query",
            "schema": { "type": "string" },
            "description": "The value that will be used to sort returned entities by."
          },
          {
            "name": "pg[offset]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of entities you want to skip before getting entities you need.",
            "example": 10
          },
          {
            "name": "pg[sortDir]",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "The sorting order. It accepts the ascending and descending direction specifiers.",
            "example": "asc"
          },
          {
            "name": "pg[limit]",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "The numeric value of maximum entities to return.",
            "example": 10000
          },
          { "name": "imt-admin", "in": "header", "schema": { "type": "integer" }, "example": "1" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "email": { "type": "string", "format": "email" },
                          "language": { "type": "string" },
                          "timezoneId": { "type": "integer" },
                          "localeId": { "type": "integer" },
                          "countryId": { "type": "integer" },
                          "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                          "avatar": { "type": "string", "format": "uri" },
                          "timezone": { "type": "string" },
                          "locale": { "type": "string" },
                          "emailNotifications": { "type": "null" },
                          "usersAdminsRoleId": { "type": "integer" },
                          "hasPassword": { "type": "boolean" },
                          "tfaEnabled": { "type": "boolean" },
                          "forceSetPassword": { "type": "boolean" },
                          "userOrganizationRoles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "usersRoleId": { "type": "integer" },
                                "userId": { "type": "integer" },
                                "organizationId": { "type": "integer" },
                                "invitation": { "type": "null" }
                              }
                            }
                          },
                          "userTeamRoles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "usersRoleId": { "type": "integer" },
                                "userId": { "type": "integer" },
                                "teamId": { "type": "integer" },
                                "changeable": { "type": "boolean" }
                              }
                            }
                          }
                        }
                      }
                    },
                    "pg": {
                      "type": "object",
                      "properties": {
                        "sortBy": { "type": "string" },
                        "sortDir": { "type": "string" },
                        "limit": { "type": "integer" },
                        "offset": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "users": [
                        {
                          "id": 1,
                          "name": "Administrator",
                          "email": "admin@integromat.cloud",
                          "language": "en",
                          "timezoneId": 113,
                          "localeId": 18,
                          "countryId": 202,
                          "features": {},
                          "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm"
                        }
                      ],
                      "pg": { "sortBy": "name", "sortDir": "asc", "limit": 10000, "offset": 0 }
                    },
                    "originalRequest": {
                      "parameters": [{ "name": "organizationId", "in": "query", "schema": { "type": "integer" }, "example": "1" }]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete",
        "description": "Delete own user account.<br />\nAvailable only in slave mode.<br />",
        "security": [{ "token": ["user:write"] }],
        "parameters": [{ "name": "deleteConnections", "in": "query", "schema": { "type": "boolean" }, "example": "false" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "user": { "type": "integer" } } },
                "example": { "user": 3 }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Partial update",
        "description": "Update user by ID.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "language": { "type": "string" },
                  "timezoneId": { "type": "integer" },
                  "localeId": { "type": "integer" },
                  "countryId": { "type": "integer" },
                  "usersAdminsRoleId": { "type": "integer" }
                }
              },
              "example": { "name": "admin", "language": "en", "localeId": 18, "timezoneId": 113, "countryId": 1 }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "language": { "type": "string" },
                        "timezoneId": { "type": "integer" },
                        "localeId": { "type": "integer" },
                        "countryId": { "type": "integer" },
                        "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                        "avatar": { "type": "string", "format": "uri" },
                        "timezone": { "type": "string" },
                        "locale": { "type": "string" },
                        "emailNotifications": { "type": "null" },
                        "usersAdminsRoleId": { "type": "integer" },
                        "hasPassword": { "type": "boolean" },
                        "tfaEnabled": { "type": "boolean" },
                        "forceSetPassword": { "type": "boolean" },
                        "userOrganizationRoles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "usersRoleId": { "type": "integer" },
                              "userId": { "type": "integer" },
                              "organizationId": { "type": "integer" },
                              "invitation": { "type": "null" }
                            }
                          }
                        },
                        "userTeamRoles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "usersRoleId": { "type": "integer" },
                              "userId": { "type": "integer" },
                              "teamId": { "type": "integer" },
                              "changeable": { "type": "boolean" }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "partial-update": {
                    "summary": "Partial update",
                    "value": {
                      "user": {
                        "id": 1,
                        "name": "admin",
                        "email": "admin@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": { "allow_apps": true },
                        "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm"
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "name": { "type": "string" },
                                "language": { "type": "string" },
                                "localeId": { "type": "integer" },
                                "timezoneId": { "type": "integer" },
                                "countryId": { "type": "integer" }
                              }
                            },
                            "example": { "name": "admin", "language": "en", "localeId": 18, "timezoneId": 113, "countryId": 1 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/password-update": {
      "post": {
        "tags": ["Users"],
        "summary": "Password update - deprecated",
        "deprecated": true,
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": { "type": "string" },
                  "newPassword1": { "type": "string" },
                  "newPassword2": { "type": "string" }
                }
              },
              "example": { "currentPassword": "123456Ab.", "newPassword1": "123456Ab-", "newPassword2": "123456Ab-" }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "examples": {
                  "password-update": {
                    "summary": "Password update",
                    "value": { "changed": true },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "currentPassword": { "type": "string" },
                                "newPassword1": { "type": "string" },
                                "newPassword2": { "type": "string" }
                              }
                            },
                            "example": { "currentPassword": "123456Ab.", "newPassword1": "123456Ab-", "newPassword2": "123456Ab-" }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/attributes/password": {
      "put": {
        "tags": ["Users"],
        "summary": "Password update",
        "description": "Update password of the given user.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": { "type": "string", "format": "password" },
                  "newPassword1": { "type": "string", "format": "password" },
                  "newPassword2": { "type": "string", "format": "password" }
                }
              },
              "example": { "currentPassword": "123456Ab.", "newPassword1": "123456Ab-", "newPassword2": "123456Ab-" }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "example": { "changed": true }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/email-update": {
      "post": {
        "tags": ["Users"],
        "summary": "Email update - deprecated",
        "deprecated": true,
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string", "format": "email" }, "password": { "type": "string", "format": "password" } }
              },
              "example": { "email": "aaa@bbbccc.com", "password": "123456Ab-" }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" } } },
                "example": { "changed": true }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/attributes/email": {
      "put": {
        "tags": ["Users"],
        "summary": "Email update",
        "description": "Update email of the given user.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string", "format": "email" }, "password": { "type": "string", "format": "password" } }
              },
              "example": { "email": "aaa@bbbccc.com", "password": "123456Ab-" }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "changed": { "type": "boolean" }, "emailSent": { "type": "boolean" } } },
                "example": { "changed": false, "emailSent": true }
              }
            }
          }
        }
      }
    },
    "/users/password-reset-demand": {
      "post": {
        "tags": ["Users"],
        "summary": "Password reset demand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "email": { "type": "string", "format": "email" } } },
              "example": { "email": "ee@eee.com" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } }, "example": { "ok": 1 } }
            }
          }
        }
      }
    },
    "/users/password-reset": {
      "get": {
        "tags": ["Users"],
        "summary": "Password reset check hash",
        "description": "Checks a hash and sets session for endpoint POST /users/password-reset",
        "parameters": [{ "name": "hash", "in": "query", "schema": { "type": "string" }, "example": "fab680b60044adb766128e713e44e15b" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } }, "example": { "ok": 1 } }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Password reset update",
        "description": "Needs session from endpoint GET /users/password-reset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "newPassword1": { "type": "string" }, "newPassword2": { "type": "string" } } },
              "example": { "newPassword1": "Aa123456.", "newPassword2": "Aa123456." }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "ok": { "type": "integer" } } }, "example": { "ok": 1 } }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users > Me"],
        "summary": "Current user",
        "description": "Get data about the current user.",
        "parameters": [
          {
            "name": "includeInvitedOrg",
            "description": "If true, the `userOrganizationRoles` in the response will also include organizations with unfinished invitations.",
            "in": "query",
            "schema": { "type": "boolean" },
            "example": true
          },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "email",
                  "language",
                  "timezoneId",
                  "localeId",
                  "countryId",
                  "features",
                  "avatar",
                  "timezone",
                  "locale",
                  "emailNotifications",
                  "usersAdminsRoleId",
                  "userOrganizationRoles",
                  "userTeamRoles",
                  "forceSetPassword",
                  "hasPassword",
                  "tfaEnabled"
                ]
              }
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authUser": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "language": { "type": "string" },
                        "timezoneId": { "type": "integer" },
                        "localeId": { "type": "integer" },
                        "countryId": { "type": "integer" },
                        "features": { "type": "object", "properties": { "allow_apps": { "type": "boolean" } } },
                        "avatar": { "type": "string", "format": "uri" },
                        "timezone": { "type": "string" },
                        "locale": { "type": "string" },
                        "emailNotifications": { "type": "null" },
                        "usersAdminsRoleId": { "type": "integer" },
                        "hasPassword": { "type": "boolean" },
                        "tfaEnabled": { "type": "boolean" },
                        "forceSetPassword": { "type": "boolean" },
                        "userOrganizationRoles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "usersRoleId": { "type": "integer" },
                              "userId": { "type": "integer" },
                              "organizationId": { "type": "integer" },
                              "invitation": { "type": "null" }
                            }
                          }
                        },
                        "userTeamRoles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "usersRoleId": { "type": "integer" },
                              "userId": { "type": "integer" },
                              "teamId": { "type": "integer" },
                              "changeable": { "type": "boolean" }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "me": {
                    "summary": "Me",
                    "value": {
                      "authUser": {
                        "id": 1,
                        "name": "Martin",
                        "email": "admin@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": { "allow_apps": true },
                        "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm",
                        "timezone": "Europe/Prague",
                        "locale": "cs",
                        "emailNotifications": null
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "email" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "language" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "timezoneId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "localeId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "countryId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "features" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "avatar" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "timezone" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "locale" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "emailNotifications" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersAdminsRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userOrganizationRoles" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userTeamRoles" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "forceSetPassword" },
                        { "name": "includeInvitedOrg", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
                      ]
                    }
                  },
                  "me-all": {
                    "summary": "Me all",
                    "value": {
                      "authUser": {
                        "id": 1,
                        "name": "Martin",
                        "email": "admin@integromat.cloud",
                        "language": "en",
                        "timezoneId": 113,
                        "localeId": 18,
                        "countryId": 1,
                        "features": { "allow_apps": true },
                        "avatar": "https://secure.gravatar.com/avatar/6b1a74d20d925c12a73af32bf0dd7164.jpg?d=mm",
                        "timezone": "Europe/Prague",
                        "locale": "cs",
                        "emailNotifications": null,
                        "usersAdminsRoleId": 1,
                        "hasPassword": true,
                        "tfaEnabled": false,
                        "forceSetPassword": false,
                        "userOrganizationRoles": [
                          { "usersRoleId": 11, "userId": 1, "organizationId": 1, "invitation": null },
                          { "usersRoleId": 11, "userId": 1, "organizationId": 3, "invitation": null }
                        ],
                        "userTeamRoles": [
                          { "usersRoleId": 1, "userId": 1, "teamId": 1, "changeable": false },
                          { "usersRoleId": 1, "userId": 1, "teamId": 2, "changeable": false }
                        ]
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "email" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "language" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "timezoneId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "localeId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "countryId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "features" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "avatar" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "timezone" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "locale" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "emailNotifications" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersAdminsRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userOrganizationRoles" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userTeamRoles" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "forceSetPassword" },
                        { "name": "includeInvitedOrg", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "hasPassword" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "tfaEnabled" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/organization-invitations": {
      "get": {
        "tags": ["Users > Me"],
        "summary": "Organization invitations",
        "description": "Required scope: user:read",
        "security": [{ "token": ["user:read"] }]
      },
      "responses": {
        "200": {
          "description": "Successful response",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userOrganizationInvitations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "hash": { "type": "string" },
                        "invitation": { "type": "string" },
                        "usersRoleId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "organizationName": { "type": "string" },
                        "zone": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "examples": {
                "organization-invitations": {
                  "summary": "Organization invitations",
                  "value": {
                    "userOrganizationInvitations": [
                      {
                        "hash": "e99ca895-4c54-4d13-b83a-8ab37c35f17a",
                        "organizationId": 10,
                        "organizationName": "Organization 10",
                        "usersRoleId": 12,
                        "invitation": "pending"
                      },
                      {
                        "hash": "5cd8b8c3-cb5c-4bd8-8d31-4b92fcdc7768",
                        "organizationId": 13,
                        "organizationName": "Organization 13",
                        "usersRoleId": 12,
                        "invitation": "expired"
                      }
                    ]
                  },
                  "originalRequest": {}
                },
                "organization-invitations-slave-zone": {
                  "summary": "Organization invitations slave zone",
                  "value": {
                    "userOrganizationInvitations": [
                      {
                        "hash": "7456987b-a0f6-497d-b260-e2b192725499",
                        "invitation": "pending",
                        "usersRoleId": 14,
                        "organizationId": 7,
                        "organizationName": "My Organization 7",
                        "zone": "slave1.integromat.local"
                      },
                      {
                        "hash": "7456987b-a0f6-497d-b260-e2b192725491",
                        "invitation": "pending",
                        "usersRoleId": 14,
                        "organizationId": 9,
                        "organizationName": "My Organization 9",
                        "zone": "slave2.integromat.local"
                      }
                    ]
                  },
                  "originalRequest": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/me/api-tokens": {
      "get": {
        "tags": ["Users > Me > API Tokens"],
        "summary": "List",
        "description": "Get a list of API tokens for the current user",
        "security": [{ "token": ["user:read"] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiTokens": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "token": { "type": "string" },
                          "scope": { "type": "array", "items": { "type": "string", "format": "uri" } },
                          "created": { "type": "string", "format": "date-time" },
                          "label": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "apiTokens": [
                    {
                      "token": "2544847b-****-****-****-************",
                      "scope": ["apps:write"],
                      "created": "2019-11-05T09:22:31.249Z",
                      "label": "token dva write"
                    },
                    {
                      "token": "40aff759-****-****-****-************",
                      "scope": ["apps:read"],
                      "created": "2019-11-05T09:22:22.615Z",
                      "label": "token jedna read"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users > Me > API Tokens"],
        "summary": "Create",
        "description": "Create a new API token for the current user",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": { "type": "string" },
                  "scope": { "type": "array", "items": { "type": "string", "format": "uri" } }
                }
              },
              "example": { "label": "example token", "scope": ["apps:read", "apps:write"] }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiToken": {
                      "type": "object",
                      "properties": {
                        "token": { "type": "string" },
                        "scope": { "type": "array", "items": { "type": "string", "format": "uri" } },
                        "created": { "type": "string", "format": "date-time" },
                        "label": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "create": {
                    "summary": "Create",
                    "value": {
                      "apiToken": {
                        "token": "7615989d-d213-48dc-b625-27133ae3f1a8",
                        "scope": ["apps:read", "apps:write"],
                        "created": "2019-11-06T14:37:51.493Z",
                        "label": "example token"
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "label": { "type": "string" },
                                "scope": { "type": "array", "items": { "type": "string", "format": "uri" } }
                              }
                            },
                            "example": { "label": "works gut", "scope": ["apps:read", "apps:write"] }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/api-tokens/{timestamp}": {
      "delete": {
        "tags": ["Users > Me > API Tokens"],
        "summary": "Delete",
        "description": "Delete API token by timestamp.",
        "security": [{ "token": ["user:write"] }],
        "parameters": [{ "name": "timestamp", "in": "path", "schema": { "type": "string", "format": "date-time" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "type": "object", "properties": { "apiToken": { "type": "string", "format": "date-time" } } },
                "examples": {
                  "delete": { "summary": "Delete", "value": { "apiToken": "2020-03-27T05:53:27.368Z" }, "originalRequest": {} }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-team-roles": {
      "get": {
        "tags": ["Users > User team roles"],
        "summary": "List",
        "description": "Get team roles of a user.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "usersRoleId": { "type": "integer" },
                          "userId": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "changeable": { "type": "boolean" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "userTeamRoles": [
                    { "usersRoleId": 3, "userId": 13, "teamId": 1, "changeable": true },
                    { "usersRoleId": 1, "userId": 13, "teamId": 21, "changeable": true }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-team-roles/{teamId}": {
      "get": {
        "tags": ["Users > User team roles"],
        "summary": "Detail",
        "description": "Get user role in a given team.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamRole": {
                      "type": "object",
                      "properties": {
                        "usersRoleId": { "type": "integer" },
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "changeable": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": { "userTeamRole": { "usersRoleId": 3, "userId": 13, "teamId": 1, "changeable": true } }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users > User team roles"],
        "summary": "Set",
        "description": "Sets the user role within the team. The list of roles is possible to get from the endpoint GET /users/roles category = team.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "usersRoleId": { "type": "integer" } } },
              "example": { "usersRoleId": 3 }
            }
          }
        },
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 13 },
          { "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 1 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamRole": {
                      "type": "object",
                      "properties": {
                        "usersRoleId": { "type": "integer" },
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "changeable": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": { "userTeamRole": { "usersRoleId": 3, "userId": 13, "teamId": 1, "changeable": true } }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-team-notifications/{teamId}": {
      "get": {
        "tags": ["Users > User team notifications"],
        "summary": "List",
        "description": "Get notifications for a user in a given team.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 3 },
          { "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 3 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamNotifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": { "type": "integer" },
                          "teamId": { "type": "integer" },
                          "notificationId": { "type": "integer" },
                          "enabled": { "type": "boolean" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "userTeamNotifications": [
                    { "userId": 3, "teamId": 3, "notificationId": 1, "enabled": true },
                    { "userId": 3, "teamId": 3, "notificationId": 2, "enabled": false },
                    { "userId": 3, "teamId": 3, "notificationId": 6, "enabled": true }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-team-notifications/{teamId}/{notificationId}": {
      "get": {
        "tags": ["Users > User team notifications"],
        "summary": "Detail",
        "description": "Get user team notification detail.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 1 },
          { "name": "teamId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 1 },
          { "name": "notificationId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 6 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamNotification": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "notificationId": { "type": "integer" },
                        "enabled": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": { "userTeamNotification": { "userId": 1, "teamId": 1, "notificationId": 6, "enabled": true } }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users > User team notifications"],
        "summary": "Update",
        "description": "Create a new notification.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "enabled": { "type": "boolean" } } },
              "example": { "enabled": true }
            }
          }
        },
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 1 },
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 1 },
          { "name": "notificationId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 6 }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userTeamNotification": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "teamId": { "type": "integer" },
                        "notificationId": { "type": "integer" },
                        "enabled": { "type": "boolean" }
                      }
                    }
                  }
                },
                "example": { "userTeamNotification": { "userId": 1, "teamId": 1, "notificationId": 6, "enabled": true } }
              }
            }
          }
        }
      }
    },
    "/users/roles": {
      "get": {
        "tags": ["Users > Roles"],
        "summary": "List",
        "description": "Get list of roles that is possible to set to bind the user and team/organization. This is set by the endpoints `POST /users/{userId}/user-organization-roles/{organizationId}` for organizations and `POST /users/{userId}/user-team-roles/{teamId}` for teams.",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          {
            "name": "cols[]",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string", "enum": ["id", "name", "subsidiary", "category", "permissions"] } },
            "example": "name"
          },
          { "name": "category", "in": "query", "schema": { "type": "string", "enum": ["organization", "team"] }, "example": "team" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "usersRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "subsidiary": { "type": "boolean" },
                          "category": { "type": "string" },
                          "permissions": { "type": "array", "items": { "type": "string" } }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list": {
                    "summary": "List",
                    "value": {
                      "usersRoles": [
                        { "id": 1, "name": "Team Admin" },
                        { "id": 3, "name": "Team Member" },
                        { "id": 4, "name": "Team Monitoring" },
                        { "id": 6, "name": "Team Operator" },
                        { "id": 11, "name": "Owner" },
                        { "id": 12, "name": "Admin" },
                        { "id": 13, "name": "Member" },
                        { "id": 14, "name": "Accountant" }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "subsidiary" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "category" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "permissions" },
                        {
                          "name": "category",
                          "in": "query",
                          "schema": { "type": "string" },
                          "description": "organization | team",
                          "example": "team"
                        }
                      ]
                    }
                  },
                  "list-all": {
                    "summary": "List all",
                    "value": {
                      "usersRoles": [
                        {
                          "id": 1,
                          "name": "Team Admin",
                          "subsidiary": true,
                          "category": "team",
                          "permissions": [
                            "account add",
                            "account delete",
                            "account edit",
                            "accounts get",
                            "datastore add",
                            "datastore delete",
                            "datastore edit",
                            "datastores get",
                            "datastore view",
                            "device add",
                            "device delete",
                            "device edit",
                            "devices get",
                            "dlq edit",
                            "dlq view",
                            "function add",
                            "function delete",
                            "function edit",
                            "functions get",
                            "hook add",
                            "hook delete",
                            "hook edit",
                            "hooks get",
                            "key add",
                            "key delete",
                            "key edit",
                            "keys get",
                            "scenario add",
                            "scenario delete",
                            "scenario edit",
                            "scenario logs get",
                            "scenario notifications",
                            "scenario reset counters",
                            "scenario scheduling",
                            "scenarios get",
                            "scenario start",
                            "scenario stop",
                            "scenario verify",
                            "scenario view",
                            "storage edit",
                            "storage view",
                            "team delete",
                            "team edit",
                            "team user add and edit",
                            "team view",
                            "template add",
                            "template delete",
                            "template edit",
                            "templates get",
                            "template view",
                            "udt add",
                            "udt delete",
                            "udt edit",
                            "udts get"
                          ]
                        },
                        {
                          "id": 3,
                          "name": "Team Member",
                          "subsidiary": true,
                          "category": "team",
                          "permissions": [
                            "account add",
                            "account delete",
                            "account edit",
                            "accounts get",
                            "datastore add",
                            "datastore delete",
                            "datastore edit",
                            "datastores get",
                            "datastore view",
                            "device add",
                            "device delete",
                            "device edit",
                            "devices get",
                            "dlq edit",
                            "dlq view",
                            "function add",
                            "function delete",
                            "function edit",
                            "functions get",
                            "hook add",
                            "hook delete",
                            "hook edit",
                            "hooks get",
                            "key add",
                            "key delete",
                            "key edit",
                            "keys get",
                            "scenario add",
                            "scenario delete",
                            "scenario edit",
                            "scenario logs get",
                            "scenario notifications",
                            "scenario reset counters",
                            "scenario scheduling",
                            "scenarios get",
                            "scenario start",
                            "scenario stop",
                            "scenario verify",
                            "scenario view",
                            "storage edit",
                            "storage view",
                            "team edit",
                            "team view",
                            "template add",
                            "template delete",
                            "template edit",
                            "templates get",
                            "template view",
                            "udt add",
                            "udt delete",
                            "udt edit",
                            "udts get"
                          ]
                        },
                        {
                          "id": 4,
                          "name": "Team Monitoring",
                          "subsidiary": true,
                          "category": "team",
                          "permissions": [
                            "dlq view",
                            "scenario logs get",
                            "scenario notifications",
                            "scenario reset counters",
                            "scenarios get",
                            "scenario view",
                            "team view",
                            "templates get",
                            "template view"
                          ]
                        },
                        {
                          "id": 6,
                          "name": "Team Operator",
                          "subsidiary": true,
                          "category": "team",
                          "permissions": [
                            "accounts get",
                            "datastores get",
                            "datastore view",
                            "devices get",
                            "dlq view",
                            "functions get",
                            "hooks get",
                            "keys get",
                            "scenario logs get",
                            "scenario notifications",
                            "scenario reset counters",
                            "scenario scheduling",
                            "scenarios get",
                            "scenario start",
                            "scenario stop",
                            "scenario verify",
                            "scenario view",
                            "storage view",
                            "team view",
                            "templates get",
                            "template view",
                            "udts get"
                          ]
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "id" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "name" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "subsidiary" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "category" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "permissions" },
                        {
                          "name": "category",
                          "in": "query",
                          "schema": { "type": "string" },
                          "description": "organization | team",
                          "example": "team"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-organization-roles": {
      "get": {
        "tags": ["Users > User organization roles"],
        "summary": "List",
        "description": "invitation: null = the user is a member of the organization, pending = the user must accept the invitation, expired = the user's invitation to the organization has expired </br>",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 1 },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["userId", "organizationId", "usersRoleId", "invitation", "organizationTeamsCount", "joinedTeamsCount"]
              }
            },
            "example": "userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": { "type": "integer" },
                          "organizationId": { "type": "integer" },
                          "usersRoleId": { "type": "integer" },
                          "invitation": { "type": "string" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "list-all": {
                    "summary": "List All",
                    "value": {
                      "userOrganizationRoles": [
                        {
                          "userId": 1,
                          "organizationId": 1,
                          "usersRoleId": 11,
                          "invitation": null,
                          "organizationTeamsCount": 8,
                          "joinedTeamsCount": 7
                        },
                        {
                          "userId": 1,
                          "organizationId": 2,
                          "usersRoleId": 11,
                          "invitation": null,
                          "organizationTeamsCount": 2,
                          "joinedTeamsCount": 2
                        },
                        {
                          "userId": 1,
                          "organizationId": 4,
                          "usersRoleId": 11,
                          "invitation": null,
                          "organizationTeamsCount": 2,
                          "joinedTeamsCount": 2
                        }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "list": {
                    "summary": "List",
                    "value": {
                      "userOrganizationRoles": [
                        { "userId": 1, "organizationId": 1, "usersRoleId": 11, "invitation": null },
                        { "userId": 1, "organizationId": 2, "usersRoleId": 11, "invitation": null },
                        { "userId": 1, "organizationId": 4, "usersRoleId": 11, "invitation": null }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-organization-roles/{organizationId}": {
      "get": {
        "tags": ["Users > User organization roles"],
        "summary": "Detail",
        "description": "invitation: null = the user is a member of the organization, pending = the user must accept the invitation, expired = the user's invitation to the organization has expired </br>",
        "security": [{ "token": ["user:read"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 1 },
          { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true, "example": 4 },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["userId", "organizationId", "userRoleId", "invitation", "organizationTeamsCount", "joinedTeamsCount"]
              }
            },
            "example": "userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRole": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "usersRoleId": { "type": "integer" },
                        "invitation": { "type": "null" },
                        "organizationTeamsCount": { "type": "integer" },
                        "joinedTeamsCount": { "type": "integer" }
                      }
                    }
                  }
                },
                "examples": {
                  "detail": {
                    "summary": "Detail",
                    "value": { "userOrganizationRole": { "userId": 1, "organizationId": 4, "usersRoleId": 11, "invitation": null } },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "detail-all": {
                    "summary": "Detail All",
                    "value": {
                      "userOrganizationRole": {
                        "userId": 1,
                        "organizationId": 4,
                        "usersRoleId": 11,
                        "invitation": null,
                        "organizationTeamsCount": 2,
                        "joinedTeamsCount": 2
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users > User organization roles"],
        "summary": "Set",
        "description": "Sets the user role within the organization. The list of roles is possible to get from the endpoint GET /users/roles category = organization.",
        "security": [{ "token": ["user:write"] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "usersRoleId": { "type": "integer" } } },
              "example": { "usersRoleId": 12 }
            }
          }
        },
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 5 },
          { "name": "organizationId", "in": "path", "schema": { "type": "integer" }, "required": true, "example": 2 },
          {
            "name": "cols[]",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["userId", "organizationId", "usersRoleId", "invitation", "organizationTeamsCount", "joinedTeamsCount"]
              }
            },
            "example": "userId"
          },
          { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
          { "name": "deleteConnections", "in": "query", "schema": { "type": "boolean" }, "example": "true" }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRole": {
                      "type": "object",
                      "properties": {
                        "userId": { "type": "integer" },
                        "organizationId": { "type": "integer" },
                        "usersRoleId": { "type": "integer" },
                        "invitation": { "type": "string" }
                      }
                    }
                  }
                },
                "examples": {
                  "set-all": {
                    "summary": "Set All",
                    "value": {
                      "userOrganizationRole": {
                        "userId": 5,
                        "organizationId": 2,
                        "usersRoleId": 12,
                        "invitation": null,
                        "organizationTeamsCount": 2,
                        "joinedTeamsCount": 2
                      }
                    },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "usersRoleId": { "type": "integer" } } },
                            "example": { "usersRoleId": 12 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "deleteConnections", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  },
                  "set": {
                    "summary": "Set",
                    "value": { "userOrganizationRole": { "userId": 5, "organizationId": 2, "usersRoleId": 12, "invitation": null } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "usersRoleId": { "type": "integer" } } },
                            "example": { "usersRoleId": 12 }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "userId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "usersRoleId" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "invitation" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "organizationTeamsCount" },
                        { "name": "cols[]", "in": "query", "schema": { "type": "string" }, "example": "joinedTeamsCount" },
                        { "name": "confirmed", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "deleteConnections", "in": "query", "schema": { "type": "boolean" }, "example": "true" },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/user-organization-roles/{organizationId}/transfer": {
      "post": {
        "tags": ["Users > User organization roles"],
        "summary": "Transfer",
        "description": "Transfer ownership of the organization.<br />",
        "security": [{ "token": ["user:write"] }],
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true, "description": "New owner ID" },
          { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userOrganizationRoles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": { "type": "integer" },
                          "organizationId": { "type": "integer" },
                          "usersRoleId": { "type": "integer" },
                          "invitation": { "type": "null" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "transfer": {
                    "summary": "Transfer",
                    "value": {
                      "userOrganizationRoles": [
                        { "userId": 12, "organizationId": 10, "usersRoleId": 11, "invitation": null },
                        { "userId": 1, "organizationId": 10, "usersRoleId": 12, "invitation": null }
                      ]
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "Content-Type", "in": "header", "schema": { "type": "string" }, "example": "application/json" }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/unread-notifications": {
      "get": {
        "tags": ["Users > Unread notifications"],
        "summary": "Unread notifications",
        "description": "Get a count of unread notifications for current user.",
        "security": [{ "token": ["user:read"] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userUnreadNotifications": { "type": "integer" },
                    "userZoneUnreadNotifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": { "zoneId": { "type": "integer" }, "unreadNotifications": { "type": "integer" } }
                      }
                    }
                  }
                },
                "examples": {
                  "unread-notifications": {
                    "summary": "Unread notifications",
                    "value": { "userUnreadNotifications": 2 },
                    "originalRequest": {}
                  },
                  "unread-notifications-slave-zone": {
                    "summary": "Unread notifications slave zone",
                    "value": {
                      "userUnreadNotifications": 6,
                      "userZoneUnreadNotifications": [
                        { "zoneId": 2, "unreadNotifications": 4 },
                        { "zoneId": 1, "unreadNotifications": 2 }
                      ]
                    },
                    "originalRequest": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailhub/users/{userId}/preferences": {
      "get": {
        "tags": ["Users > User email preferences - Mailhub"],
        "summary": "Get preferences",
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "preferences": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "uuid": { "type": "string" },
                        "email": { "type": "string", "format": "email" },
                        "is_email_verified": { "type": "boolean" },
                        "global": {
                          "type": "object",
                          "properties": {
                            "isEmailVerified": { "type": "boolean" },
                            "preferences": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "enabled": { "type": "boolean" },
                                  "label": { "type": "string" },
                                  "description": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "zones": { "type": "array" }
                      }
                    }
                  }
                },
                "examples": {
                  "get-preferences": {
                    "summary": "Get preferences",
                    "value": {
                      "preferences": {
                        "id": 1,
                        "uuid": "e39de7bc-95b0-443c-83e9-ac397ea8f004",
                        "email": "admin@integromat.cloud",
                        "is_email_verified": true,
                        "global": {
                          "isEmailVerified": true,
                          "preferences": [
                            {
                              "id": "use_cases",
                              "enabled": false,
                              "label": "Use Cases",
                              "description": "Get new Integromat use cases delivered to your inbox."
                            },
                            {
                              "id": "product_updates",
                              "enabled": false,
                              "label": "Product Updates",
                              "description": "Product and feature updates including new releases and important changes."
                            },
                            {
                              "id": "app_updates",
                              "enabled": false,
                              "label": "App Updates",
                              "description": "Get notified about new apps and services as they become available, as well as changes in the existing apps."
                            },
                            {
                              "id": "events_and_webinars",
                              "enabled": false,
                              "label": "Events and Webinars",
                              "description": "Get notified about Integromat events and webinars including demos, discussions and community events."
                            },
                            {
                              "id": "promotions",
                              "enabled": false,
                              "label": "Offers and Promotions",
                              "description": "Latest promotions and discounts delivered to your inbox."
                            },
                            {
                              "id": "channel_partner_updates",
                              "enabled": false,
                              "label": "Partnerships",
                              "description": "Emails with exclusive information for Integromat partners such as partner updates and resources."
                            },
                            {
                              "id": "academy",
                              "enabled": false,
                              "label": "Academy",
                              "description": "Receive the latest content from Integromat Academy including videos, tutorials and educational events."
                            },
                            {
                              "id": "blog",
                              "enabled": false,
                              "label": "Blog and Newsletter",
                              "description": "Get the latest advice, resources and updates on all things Integromat and no-code automation."
                            }
                          ]
                        },
                        "zones": []
                      }
                    },
                    "originalRequest": {
                      "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users > User email preferences - Mailhub"],
        "summary": "Update global preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } },
              "example": { "id": "use_cases", "enabled": true }
            }
          }
        },
        "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "preferences": {
                      "type": "object",
                      "properties": {
                        "global": {
                          "type": "object",
                          "properties": {
                            "preferences": {
                              "type": "object",
                              "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "update-global-preferences": {
                    "summary": "Update global preferences",
                    "value": { "preferences": { "global": { "preferences": { "id": "use_cases", "enabled": true } } } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } },
                            "example": { "id": "use_cases", "enabled": true }
                          }
                        }
                      },
                      "parameters": [{ "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true }]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailhub/users/{userId}/organizations/{organizationId}/teams/{teamId}/preferences": {
      "get": {
        "tags": ["Users > User email preferences - Mailhub"],
        "summary": "Get team preferences",
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "uuid": { "type": "string" },
                    "email": { "type": "string", "format": "email" },
                    "is_email_verified": { "type": "boolean" },
                    "team": {
                      "type": "object",
                      "properties": {
                        "teamId": { "type": "integer" },
                        "teamName": { "type": "string" },
                        "preferences": {
                          "type": "object",
                          "properties": {
                            "native": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "integer" },
                                  "subscribed": { "type": "boolean" },
                                  "label": { "type": "string" },
                                  "description": { "type": "string" }
                                }
                              }
                            },
                            "marketing": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "enabled": { "type": "boolean" },
                                  "label": { "type": "string" },
                                  "description": { "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "get-team-preferences": {
                    "summary": "Get team preferences",
                    "value": {
                      "id": 3,
                      "uuid": "4c090605-19a1-46b9-a3f3-a2cb83e8adc1",
                      "email": "petr.malimanek@integromat.com",
                      "is_email_verified": true,
                      "team": {
                        "teamId": 10,
                        "teamName": "My Team",
                        "preferences": {
                          "native": [
                            {
                              "id": 6,
                              "subscribed": true,
                              "label": "Deactivation",
                              "description": "Get notified when your scenario gets deactivated due to critical issues such as multiple consecutive errors."
                            },
                            {
                              "id": 2,
                              "subscribed": false,
                              "label": "Warnings",
                              "description": "Warnings encountered by your scenarios that need your attention, such as failure to connect with your apps and services."
                            },
                            {
                              "id": 1,
                              "subscribed": true,
                              "label": "Errors",
                              "description": "Notifications about errors encountered by specific modules in your scenarios that keep your workflows from running smoothly."
                            }
                          ],
                          "marketing": [
                            {
                              "id": "onboarding",
                              "enabled": false,
                              "label": "Tips For Success",
                              "description": "Organization-specific emails to help you succeed with Integromat and make the most of your subscription."
                            }
                          ]
                        }
                      }
                    },
                    "originalRequest": {
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users > User email preferences - Mailhub"],
        "summary": "Update team preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } },
              "example": { "id": "onboarding", "enabled": true }
            }
          }
        },
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": {
                        "preferences": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } }
                      }
                    }
                  }
                },
                "examples": {
                  "update-team-preferences": {
                    "summary": "Update team preferences",
                    "value": { "team": { "preferences": { "id": "onboarding", "enabled": false } } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } },
                            "example": { "id": "onboarding", "enabled": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailhub/users/{userId}/organizations/{organizationId}/teams/{teamId}/native-preferences": {
      "patch": {
        "tags": ["Users > User email preferences - Mailhub"],
        "summary": "Update team native preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "id": { "type": "string", "format": "utc-millisec" }, "enabled": { "type": "boolean" } }
              },
              "example": { "id": "1", "enabled": true }
            }
          }
        },
        "parameters": [
          { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
          { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": {
                        "preferences": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } }
                      }
                    }
                  }
                },
                "examples": {
                  "update-team-native-preferences": {
                    "summary": "Update team native preferences",
                    "value": { "team": { "preferences": { "id": "onboarding", "enabled": false } } },
                    "originalRequest": {
                      "requestBody": {
                        "content": {
                          "application/json": {
                            "schema": { "type": "object", "properties": { "id": { "type": "string" }, "enabled": { "type": "boolean" } } },
                            "example": { "id": "onboarding", "enabled": true }
                          }
                        }
                      },
                      "parameters": [
                        { "name": "userId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "organizationId", "in": "path", "schema": { "type": "string" }, "required": true },
                        { "name": "teamId", "in": "path", "schema": { "type": "string" }, "required": true }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": ["General"],
        "summary": "Ping",
        "parameters": [{ "name": "delay", "in": "query", "schema": { "type": "integer" }, "example": "2000" }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": { "text/plain": { "schema": { "type": "string" }, "example": "pong" } }
          }
        }
      }
    }
  }
}
